

let querystring = require('querystring');
let url = require('url');
let isomorphicFetch = require('isomorphic-fetch');
let assign = require('core-js/library/fn/object/assign');
let exports = {};

function filterEmptyParams(params) {
    let keys = Object.keys(params);
    keys.forEach((key) => {
        if (params[key] == undefined)
            {delete params[key];}
    });
    return params;
}
let Configuration = (function () {
    function Configuration(param) {
        if (param === undefined) { param = {}; }
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.fetch = param.fetch;
    }
    return Configuration;
}());
exports.Configuration = Configuration;
let BASE_PATH = '';
let BaseAPI = (function () {
    function BaseAPI(fetch, basePath, configuration) {
        if (fetch === undefined) { fetch = isomorphicFetch; }
        if (basePath === undefined) { basePath = BASE_PATH; }
        if (configuration === undefined) { configuration = new Configuration(); }
        this.basePath = basePath;
        this.fetch = fetch;
        this.configuration = configuration;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;

/**
 * BizactionparamscontrollerApi - fetch parameter creator
 */
exports.BizactionparamscontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入触点可筛选事件
     * @param bizActionParamsPO bizActionParamsPO
     */
    bizActionParamsAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizActionParamsPO" is set
        if (params.bizActionParamsPO == null) {
            throw new Error('Missing required parameter bizActionParamsPO when calling bizActionParamsAddPost');
        }
        let baseUrl = '/bizActionParams/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizActionParamsPO) {
            fetchOptions.body = JSON.stringify(params.bizActionParamsPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除触点可筛选事件
     * @param id id
     */
    bizActionParamsDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizActionParamsDelIdDelete');
        }
        let baseUrl = '/bizActionParams/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询触点可筛选事件
     * @param id id
     */
    bizActionParamsInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizActionParamsInfoIdGet');
        }
        let baseUrl = '/bizActionParams/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询触点可筛选事件列表
     */
    bizActionParamsListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizActionParams/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询触点可筛选事件
     */
    bizActionParamsPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizActionParams/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新触点可筛选事件
     * @param bizActionParamsPO bizActionParamsPO
     */
    bizActionParamsUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizActionParamsPO" is set
        if (params.bizActionParamsPO == null) {
            throw new Error('Missing required parameter bizActionParamsPO when calling bizActionParamsUpdatePut');
        }
        let baseUrl = '/bizActionParams/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizActionParamsPO) {
            fetchOptions.body = JSON.stringify(params.bizActionParamsPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizactionparamscontrollerApi - functional programming interface
 */
exports.BizactionparamscontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入触点可筛选事件
        * @param bizActionParamsPO bizActionParamsPO
        */
        bizActionParamsAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除触点可筛选事件
        * @param id id
        */
        bizActionParamsDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询触点可筛选事件
        * @param id id
        */
        bizActionParamsInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询触点可筛选事件列表
        */
        bizActionParamsListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询触点可筛选事件
        */
        bizActionParamsPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新触点可筛选事件
        * @param bizActionParamsPO bizActionParamsPO
        */
        bizActionParamsUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizactionparamscontrollerApiFetchParamCreator.bizActionParamsUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizautomarketingcontrollerApi - fetch parameter creator
 */
exports.BizautomarketingcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入自动化营销
     * @param bizAutoMarketingPO bizAutoMarketingPO
     */
    bizAutoMarketingAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizAutoMarketingPO" is set
        if (params.bizAutoMarketingPO == null) {
            throw new Error('Missing required parameter bizAutoMarketingPO when calling bizAutoMarketingAddPost');
        }
        let baseUrl = '/bizAutoMarketing/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizAutoMarketingPO) {
            fetchOptions.body = JSON.stringify(params.bizAutoMarketingPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除自动化营销
     * @param id id
     */
    bizAutoMarketingDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizAutoMarketingDelIdDelete');
        }
        let baseUrl = '/bizAutoMarketing/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询自动化营销
     * @param id id
     */
    bizAutoMarketingInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizAutoMarketingInfoIdGet');
        }
        let baseUrl = '/bizAutoMarketing/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询自动化营销列表
     */
    bizAutoMarketingListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizAutoMarketing/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更改自动化营销监听状态
     * @param id id
     * @param isMonitor 监听状态（0：否，1：是）
     */
    bizAutoMarketingMonitorPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizAutoMarketingMonitorPost');
        }
        let baseUrl = '/bizAutoMarketing/monitor';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
            isMonitor: params.isMonitor,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询自动化营销
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizAutoMarketingPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizAutoMarketingPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizAutoMarketingPageGet');
        }
        let baseUrl = '/bizAutoMarketing/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id获取决策树节点的覆盖数
     * @param id id
     * @param startDate startDate
     * @param endDate endDate
     */
    bizAutoMarketingQueryDecisionTreeNodeNumGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizAutoMarketingQueryDecisionTreeNodeNumGet');
        }
        let baseUrl = '/bizAutoMarketing/queryDecisionTreeNodeNum';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
            'startDate': params.startDate,
            endDate: params.endDate,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取决策树节点临时群组详情列表
     * @param entityId 实体id
     * @param bizAutoMarketingVO bizAutoMarketingVO
     * @param columnNames columnNames
     * @param limit limit
     */
    bizAutoMarketingQueryGroupTagDetailInformationPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizAutoMarketingQueryGroupTagDetailInformationPost');
        }
        let baseUrl = '/bizAutoMarketing/queryGroupTagDetailInformation';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'bizAutoMarketingVO': params.bizAutoMarketingVO,
            columnNames: params.columnNames,
            'entityId': params.entityId,
            'limit': params.limit,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取决策树节点临时群组标签分布
     * @param tagEnglishName tagEnglishName
     * @param bizAutoMarketingVO bizAutoMarketingVO
     */
    bizAutoMarketingQueryGroupTagDistributionPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizAutoMarketingQueryGroupTagDistributionPost');
        }
        let baseUrl = '/bizAutoMarketing/queryGroupTagDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            bizAutoMarketingVO: params.bizAutoMarketingVO,
            'tagEnglishName': params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询决策树节点临时群组标签特征
     * @param bizAutoMarketingVO bizAutoMarketingVO
     */
    bizAutoMarketingQueryTGIByIdPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizAutoMarketingVO" is set
        if (params.bizAutoMarketingVO == null) {
            throw new Error('Missing required parameter bizAutoMarketingVO when calling bizAutoMarketingQueryTGIByIdPost');
        }
        let baseUrl = '/bizAutoMarketing/queryTGIById';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizAutoMarketingVO) {
            fetchOptions.body = JSON.stringify(params.bizAutoMarketingVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存决策树节点临时群组为固定群组
     * @param bizAutoMarketGroupVo bizAutoMarketGroupVo
     */
    bizAutoMarketingSaveDecisionGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizAutoMarketGroupVo" is set
        if (params.bizAutoMarketGroupVo == null) {
            throw new Error('Missing required parameter bizAutoMarketGroupVo when calling bizAutoMarketingSaveDecisionGroupPost');
        }
        let baseUrl = '/bizAutoMarketing/saveDecisionGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizAutoMarketGroupVo) {
            fetchOptions.body = JSON.stringify(params.bizAutoMarketGroupVo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 发送短信和邮件的功能
     * @param type 类型：0 短信发送；1 邮件发送；2 发送应用消息；
     * @param contact 联系人，邮箱或者手机号，英文逗号分割的字符
     * @param message 发送内容
     */
    bizAutoMarketingSendMessagePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "type" is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling bizAutoMarketingSendMessagePost');
        }
        // verify required parameter "contact" is set
        if (params.contact == null) {
            throw new Error('Missing required parameter contact when calling bizAutoMarketingSendMessagePost');
        }
        // verify required parameter "message" is set
        if (params.message == null) {
            throw new Error('Missing required parameter message when calling bizAutoMarketingSendMessagePost');
        }
        let baseUrl = '/bizAutoMarketing/sendMessage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'type': params.type,
            'contact': params.contact,
            'message': params.message,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新自动化营销
     * @param bizAutoMarketingPO bizAutoMarketingPO
     */
    bizAutoMarketingUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizAutoMarketingPO" is set
        if (params.bizAutoMarketingPO == null) {
            throw new Error('Missing required parameter bizAutoMarketingPO when calling bizAutoMarketingUpdatePut');
        }
        let baseUrl = '/bizAutoMarketing/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizAutoMarketingPO) {
            fetchOptions.body = JSON.stringify(params.bizAutoMarketingPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizautomarketingcontrollerApi - functional programming interface
 */
exports.BizautomarketingcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入自动化营销
        * @param bizAutoMarketingPO bizAutoMarketingPO
        */
        bizAutoMarketingAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除自动化营销
        * @param id id
        */
        bizAutoMarketingDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询自动化营销
        * @param id id
        */
        bizAutoMarketingInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询自动化营销列表
        */
        bizAutoMarketingListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更改自动化营销监听状态
        * @param id id
        * @param isMonitor 监听状态（0：否，1：是）
        */
        bizAutoMarketingMonitorPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingMonitorPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询自动化营销
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizAutoMarketingPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id获取决策树节点的覆盖数
        * @param id id
        * @param startDate startDate
        * @param endDate endDate
        */
        bizAutoMarketingQueryDecisionTreeNodeNumGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingQueryDecisionTreeNodeNumGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取决策树节点临时群组详情列表
        * @param entityId 实体id
        * @param bizAutoMarketingVO bizAutoMarketingVO
        * @param columnNames columnNames
        * @param limit limit
        */
        bizAutoMarketingQueryGroupTagDetailInformationPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingQueryGroupTagDetailInformationPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取决策树节点临时群组标签分布
        * @param tagEnglishName tagEnglishName
        * @param bizAutoMarketingVO bizAutoMarketingVO
        */
        bizAutoMarketingQueryGroupTagDistributionPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingQueryGroupTagDistributionPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询决策树节点临时群组标签特征
        * @param bizAutoMarketingVO bizAutoMarketingVO
        */
        bizAutoMarketingQueryTGIByIdPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingQueryTGIByIdPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存决策树节点临时群组为固定群组
        * @param bizAutoMarketGroupVo bizAutoMarketGroupVo
        */
        bizAutoMarketingSaveDecisionGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingSaveDecisionGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 发送短信和邮件的功能
        * @param type 类型：0 短信发送；1 邮件发送；2 发送应用消息；
        * @param contact 联系人，邮箱或者手机号，英文逗号分割的字符
        * @param message 发送内容
        */
        bizAutoMarketingSendMessagePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingSendMessagePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新自动化营销
        * @param bizAutoMarketingPO bizAutoMarketingPO
        */
        bizAutoMarketingUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingcontrollerApiFetchParamCreator.bizAutoMarketingUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizautomarketingsuitecontrollerApi - fetch parameter creator
 */
exports.BizautomarketingsuitecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询营销套件
     * @param suiteType 营销套件类型 0：短信，1：应用消息，2：email
     */
    bizAutoMarketingSuiteQueryBizAutoMarketingSuitGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizAutoMarketingSuite/queryBizAutoMarketingSuit';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'SuiteType': params.suiteType,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存营销套件
     * @param bizAutoMarketingSuiteInfo bizAutoMarketingSuiteInfo
     */
    bizAutoMarketingSuiteSaveBizAutoMarketingSuitPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizAutoMarketingSuiteInfo" is set
        if (params.bizAutoMarketingSuiteInfo == null) {
            throw new Error('Missing required parameter bizAutoMarketingSuiteInfo when calling bizAutoMarketingSuiteSaveBizAutoMarketingSuitPost');
        }
        let baseUrl = '/bizAutoMarketingSuite/saveBizAutoMarketingSuit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizAutoMarketingSuiteInfo) {
            fetchOptions.body = JSON.stringify(params.bizAutoMarketingSuiteInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizautomarketingsuitecontrollerApi - functional programming interface
 */
exports.BizautomarketingsuitecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询营销套件
        * @param suiteType 营销套件类型 0：短信，1：应用消息，2：email
        */
        bizAutoMarketingSuiteQueryBizAutoMarketingSuitGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingsuitecontrollerApiFetchParamCreator.bizAutoMarketingSuiteQueryBizAutoMarketingSuitGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存营销套件
        * @param bizAutoMarketingSuiteInfo bizAutoMarketingSuiteInfo
        */
        bizAutoMarketingSuiteSaveBizAutoMarketingSuitPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizautomarketingsuitecontrollerApiFetchParamCreator.bizAutoMarketingSuiteSaveBizAutoMarketingSuitPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizcollectiondetailcontrollerApi - fetch parameter creator
 */
exports.BizcollectiondetailcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询漏斗ID是否存在
     * @param funnelId 漏斗ID
     */
    bizCollectionDetailCheckByFunnelIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizCollectionDetailCheckByFunnelIdGet');
        }
        let baseUrl = '/bizCollectionDetail/checkByFunnelId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'funnelId': params.funnelId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询用户群ID是否存在
     * @param groupId 用户群ID
     */
    bizCollectionDetailCheckByGroupIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizCollectionDetailCheckByGroupIdGet');
        }
        let baseUrl = '/bizCollectionDetail/checkByGroupId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            groupId: params.groupId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询收藏名细
     * @param id id
     */
    bizCollectionDetailCollectionDetailInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizCollectionDetailCollectionDetailInfoIdGet');
        }
        let baseUrl = '/bizCollectionDetail/collectionDetailInfo/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除收藏名细
     * @param id id
     */
    bizCollectionDetailDelCollectionDetailIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizCollectionDetailDelCollectionDetailIdDelete');
        }
        let baseUrl = '/bizCollectionDetail/delCollectionDetail/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据菜单ID查询收藏名细列表
     * @param menuId menuId
     */
    bizCollectionDetailQueryListByMenuIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "menuId" is set
        if (params.menuId == null) {
            throw new Error('Missing required parameter menuId when calling bizCollectionDetailQueryListByMenuIdGet');
        }
        let baseUrl = '/bizCollectionDetail/queryListByMenuId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'menuId': params.menuId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存收藏名细
     * @param bizCollectionDetailInfo bizCollectionDetailInfo
     */
    bizCollectionDetailSaveCollectionDetailPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizCollectionDetailInfo" is set
        if (params.bizCollectionDetailInfo == null) {
            throw new Error('Missing required parameter bizCollectionDetailInfo when calling bizCollectionDetailSaveCollectionDetailPost');
        }
        let baseUrl = '/bizCollectionDetail/saveCollectionDetail';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizCollectionDetailInfo) {
            fetchOptions.body = JSON.stringify(params.bizCollectionDetailInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizcollectiondetailcontrollerApi - functional programming interface
 */
exports.BizcollectiondetailcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询漏斗ID是否存在
        * @param funnelId 漏斗ID
        */
        bizCollectionDetailCheckByFunnelIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailCheckByFunnelIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询用户群ID是否存在
        * @param groupId 用户群ID
        */
        bizCollectionDetailCheckByGroupIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailCheckByGroupIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询收藏名细
        * @param id id
        */
        bizCollectionDetailCollectionDetailInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailCollectionDetailInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除收藏名细
        * @param id id
        */
        bizCollectionDetailDelCollectionDetailIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailDelCollectionDetailIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据菜单ID查询收藏名细列表
        * @param menuId menuId
        */
        bizCollectionDetailQueryListByMenuIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailQueryListByMenuIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存收藏名细
        * @param bizCollectionDetailInfo bizCollectionDetailInfo
        */
        bizCollectionDetailSaveCollectionDetailPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectiondetailcontrollerApiFetchParamCreator.bizCollectionDetailSaveCollectionDetailPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizcollectionmenucontrollerApi - fetch parameter creator
 */
exports.BizcollectionmenucontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询该收藏菜单名称是否存在
     * @param menuName menuName
     */
    bizCollectionMenuCheckMenuNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "menuName" is set
        if (params.menuName == null) {
            throw new Error('Missing required parameter menuName when calling bizCollectionMenuCheckMenuNameGet');
        }
        let baseUrl = '/bizCollectionMenu/checkMenuName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            menuName: params.menuName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除我的收藏菜单
     * @param id id
     */
    bizCollectionMenuDelCollectionMenuIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizCollectionMenuDelCollectionMenuIdDelete');
        }
        let baseUrl = '/bizCollectionMenu/delCollectionMenu/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 收藏菜单列表
     */
    bizCollectionMenuQueryCollectionMenuListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizCollectionMenu/queryCollectionMenuList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存我的收藏菜单
     * @param bizCollectionMenuInfo bizCollectionMenuInfo
     */
    bizCollectionMenuSaveCollectionMenuPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizCollectionMenuInfo" is set
        if (params.bizCollectionMenuInfo == null) {
            throw new Error('Missing required parameter bizCollectionMenuInfo when calling bizCollectionMenuSaveCollectionMenuPost');
        }
        let baseUrl = '/bizCollectionMenu/saveCollectionMenu';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizCollectionMenuInfo) {
            fetchOptions.body = JSON.stringify(params.bizCollectionMenuInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizcollectionmenucontrollerApi - functional programming interface
 */
exports.BizcollectionmenucontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询该收藏菜单名称是否存在
        * @param menuName menuName
        */
        bizCollectionMenuCheckMenuNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectionmenucontrollerApiFetchParamCreator.bizCollectionMenuCheckMenuNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除我的收藏菜单
        * @param id id
        */
        bizCollectionMenuDelCollectionMenuIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectionmenucontrollerApiFetchParamCreator.bizCollectionMenuDelCollectionMenuIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 收藏菜单列表
        */
        bizCollectionMenuQueryCollectionMenuListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectionmenucontrollerApiFetchParamCreator.bizCollectionMenuQueryCollectionMenuListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存我的收藏菜单
        * @param bizCollectionMenuInfo bizCollectionMenuInfo
        */
        bizCollectionMenuSaveCollectionMenuPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizcollectionmenucontrollerApiFetchParamCreator.bizCollectionMenuSaveCollectionMenuPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizfieldinfocontrollerApi - fetch parameter creator
 */
exports.BizfieldinfocontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入栏位信息
     * @param bizFieldInfoPO bizFieldInfoPO
     */
    bizFieldInfoAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFieldInfoPO" is set
        if (params.bizFieldInfoPO == null) {
            throw new Error('Missing required parameter bizFieldInfoPO when calling bizFieldInfoAddPost');
        }
        let baseUrl = '/bizFieldInfo/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFieldInfoPO) {
            fetchOptions.body = JSON.stringify(params.bizFieldInfoPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除栏位
     * @param fieldId 栏位ID
     */
    bizFieldInfoDelFieldInfoDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling bizFieldInfoDelFieldInfoDelete');
        }
        let baseUrl = '/bizFieldInfo/delFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fieldId': params.fieldId,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除栏位信息
     * @param id id
     */
    bizFieldInfoDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFieldInfoDelIdDelete');
        }
        let baseUrl = '/bizFieldInfo/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 修改栏位
     * @param fieldId 栏位ID
     * @param fieldName 栏位名称
     */
    bizFieldInfoEditFieldInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling bizFieldInfoEditFieldInfoPost');
        }
        // verify required parameter "fieldName" is set
        if (params.fieldName == null) {
            throw new Error('Missing required parameter fieldName when calling bizFieldInfoEditFieldInfoPost');
        }
        let baseUrl = '/bizFieldInfo/editFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fieldId': params.fieldId,
            'fieldName': params.fieldName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看是否有重复的规则名称
     * @param ruleName ruleName
     */
    bizFieldInfoFindRepeatedRuleGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "ruleName" is set
        if (params.ruleName == null) {
            throw new Error('Missing required parameter ruleName when calling bizFieldInfoFindRepeatedRuleGet');
        }
        let baseUrl = '/bizFieldInfo/find/repeated/rule';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            ruleName: params.ruleName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary getFieldAndPolicy
     * @param fieldId fieldId
     * @param siteId siteId
     * @param appKey appKey
     * @param startTime startTime
     * @param endTime endTime
     */
    bizFieldInfoGetFiledAndPolicyGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling bizFieldInfoGetFiledAndPolicyGet');
        }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling bizFieldInfoGetFiledAndPolicyGet');
        }
        // verify required parameter "appKey" is set
        if (params.appKey == null) {
            throw new Error('Missing required parameter appKey when calling bizFieldInfoGetFiledAndPolicyGet');
        }
        // verify required parameter "startTime" is set
        if (params.startTime == null) {
            throw new Error('Missing required parameter startTime when calling bizFieldInfoGetFiledAndPolicyGet');
        }
        // verify required parameter "endTime" is set
        if (params.endTime == null) {
            throw new Error('Missing required parameter endTime when calling bizFieldInfoGetFiledAndPolicyGet');
        }
        let baseUrl = '/bizFieldInfo/getFiledAndPolicy';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            fieldId: params.fieldId,
            siteId: params.siteId,
            appKey: params.appKey,
            startTime: params.startTime,
            'endTime': params.endTime,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询栏位信息
     * @param id id
     */
    bizFieldInfoInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFieldInfoInfoIdGet');
        }
        let baseUrl = '/bizFieldInfo/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询栏位信息列表
     */
    bizFieldInfoListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFieldInfo/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询栏位信息
     */
    bizFieldInfoPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFieldInfo/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增栏位
     * @param siteId 站点id
     * @param appKey 客户端
     * @param fieldName 栏位名称
     * @param domainName 域名
     */
    bizFieldInfoSaveFieldInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling bizFieldInfoSaveFieldInfoPost');
        }
        // verify required parameter "appKey" is set
        if (params.appKey == null) {
            throw new Error('Missing required parameter appKey when calling bizFieldInfoSaveFieldInfoPost');
        }
        // verify required parameter "fieldName" is set
        if (params.fieldName == null) {
            throw new Error('Missing required parameter fieldName when calling bizFieldInfoSaveFieldInfoPost');
        }
        // verify required parameter "domainName" is set
        if (params.domainName == null) {
            throw new Error('Missing required parameter domainName when calling bizFieldInfoSaveFieldInfoPost');
        }
        let baseUrl = '/bizFieldInfo/saveFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'siteId': params.siteId,
            'appKey': params.appKey,
            'fieldName': params.fieldName,
            domainName: params.domainName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新栏位信息
     * @param bizFieldInfoPO bizFieldInfoPO
     */
    bizFieldInfoUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFieldInfoPO" is set
        if (params.bizFieldInfoPO == null) {
            throw new Error('Missing required parameter bizFieldInfoPO when calling bizFieldInfoUpdatePut');
        }
        let baseUrl = '/bizFieldInfo/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFieldInfoPO) {
            fetchOptions.body = JSON.stringify(params.bizFieldInfoPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizfieldinfocontrollerApi - functional programming interface
 */
exports.BizfieldinfocontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入栏位信息
        * @param bizFieldInfoPO bizFieldInfoPO
        */
        bizFieldInfoAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除栏位
        * @param fieldId 栏位ID
        */
        bizFieldInfoDelFieldInfoDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoDelFieldInfoDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除栏位信息
        * @param id id
        */
        bizFieldInfoDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 修改栏位
        * @param fieldId 栏位ID
        * @param fieldName 栏位名称
        */
        bizFieldInfoEditFieldInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoEditFieldInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看是否有重复的规则名称
        * @param ruleName ruleName
        */
        bizFieldInfoFindRepeatedRuleGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoFindRepeatedRuleGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary getFieldAndPolicy
        * @param fieldId fieldId
        * @param siteId siteId
        * @param appKey appKey
        * @param startTime startTime
        * @param endTime endTime
        */
        bizFieldInfoGetFiledAndPolicyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoGetFiledAndPolicyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询栏位信息
        * @param id id
        */
        bizFieldInfoInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询栏位信息列表
        */
        bizFieldInfoListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询栏位信息
        */
        bizFieldInfoPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增栏位
        * @param siteId 站点id
        * @param appKey 客户端
        * @param fieldName 栏位名称
        * @param domainName 域名
        */
        bizFieldInfoSaveFieldInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoSaveFieldInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新栏位信息
        * @param bizFieldInfoPO bizFieldInfoPO
        */
        bizFieldInfoUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfieldinfocontrollerApiFetchParamCreator.bizFieldInfoUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizfunnelcontrollerApi - fetch parameter creator
 */
exports.BizfunnelcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 新建漏斗
     * @param bizFunnelVO bizFunnelVO
     */
    bizFunnelAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelVO" is set
        if (params.bizFunnelVO == null) {
            throw new Error('Missing required parameter bizFunnelVO when calling bizFunnelAddPost');
        }
        let baseUrl = '/bizFunnel/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelVO) {
            fetchOptions.body = JSON.stringify(params.bizFunnelVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除漏斗
     * @param id id
     */
    bizFunnelDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFunnelDelIdDelete');
        }
        let baseUrl = '/bizFunnel/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取漏斗详情数据
     * @param groupId groupId
     * @param funnelId funnelId
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizFunnelFunnelDetailPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizFunnelFunnelDetailPost');
        }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizFunnelFunnelDetailPost');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizFunnelFunnelDetailPost');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizFunnelFunnelDetailPost');
        }
        let baseUrl = '/bizFunnel/funnelDetail';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'groupId': params.groupId,
            funnelId: params.funnelId,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询漏斗
     * @param id id
     */
    bizFunnelInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFunnelInfoIdGet');
        }
        let baseUrl = '/bizFunnel/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看漏斗名是否重复
     * @param funnelName funnelName
     */
    bizFunnelIsNameRepeatedGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelName" is set
        if (params.funnelName == null) {
            throw new Error('Missing required parameter funnelName when calling bizFunnelIsNameRepeatedGet');
        }
        let baseUrl = '/bizFunnel/isNameRepeated';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'funnelName': params.funnelName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询漏斗列表
     */
    bizFunnelListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFunnel/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更改漏斗监听状态
     * @param funnelId funnelId
     * @param isMonitor isMonitor
     */
    bizFunnelMonitorPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizFunnelMonitorPost');
        }
        let baseUrl = '/bizFunnel/monitor';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'funnelId': params.funnelId,
            'isMonitor': params.isMonitor,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询漏斗
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizFunnelPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizFunnelPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizFunnelPageGet');
        }
        let baseUrl = '/bizFunnel/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存漏斗步骤流失用户群
     * @param bizFunnelGroupVo bizFunnelGroupVo
     */
    bizFunnelSaveFunnelLoseGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelGroupVo" is set
        if (params.bizFunnelGroupVo == null) {
            throw new Error('Missing required parameter bizFunnelGroupVo when calling bizFunnelSaveFunnelLoseGroupPost');
        }
        let baseUrl = '/bizFunnel/saveFunnelLoseGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelGroupVo) {
            fetchOptions.body = JSON.stringify(params.bizFunnelGroupVo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存漏斗步骤用户群
     * @param bizFunnelGroupVo bizFunnelGroupVo
     */
    bizFunnelSaveFunnelStepGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelGroupVo" is set
        if (params.bizFunnelGroupVo == null) {
            throw new Error('Missing required parameter bizFunnelGroupVo when calling bizFunnelSaveFunnelStepGroupPost');
        }
        let baseUrl = '/bizFunnel/saveFunnelStepGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelGroupVo) {
            fetchOptions.body = JSON.stringify(params.bizFunnelGroupVo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 漏斗标签详情列表
     * @param entityId 实体id
     * @param expression expression
     * @param columnNames columnNames
     */
    bizFunnelTagDetailPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizFunnelTagDetailPost');
        }
        let baseUrl = '/bizFunnel/tagDetail';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'expression': params.expression,
            columnNames: params.columnNames,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 漏斗标签分布
     * @param expression expression
     * @param tagEnglishName tagEnglishName
     */
    bizFunnelTagDistributePost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFunnel/tagDistribute';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            expression: params.expression,
            tagEnglishName: params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 漏斗标签特征
     * @param bizFunnelExpression bizFunnelExpression
     */
    bizFunnelTagFeaturePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelExpression" is set
        if (params.bizFunnelExpression == null) {
            throw new Error('Missing required parameter bizFunnelExpression when calling bizFunnelTagFeaturePost');
        }
        let baseUrl = '/bizFunnel/tagFeature';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelExpression) {
            fetchOptions.body = JSON.stringify(params.bizFunnelExpression || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 数据回溯是否完成
     * @param funnelId funnelId
     */
    bizFunnelTraceBackIsFinishGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizFunnelTraceBackIsFinishGet');
        }
        let baseUrl = '/bizFunnel/traceBackIsFinish';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'funnelId': params.funnelId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 设置数据回溯日期
     * @param funnelId funnelId
     * @param backDate backDate
     */
    bizFunnelTraceBackPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizFunnelTraceBackPost');
        }
        // verify required parameter "backDate" is set
        if (params.backDate == null) {
            throw new Error('Missing required parameter backDate when calling bizFunnelTraceBackPost');
        }
        let baseUrl = '/bizFunnel/traceBack';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            funnelId: params.funnelId,
            backDate: params.backDate,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新漏斗(名字和描述)
     * @param funnelId funnelId
     * @param funnelName funnelName
     * @param funnelDesc funnelDesc
     */
    bizFunnelUpdateFunnelByIdPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizFunnelUpdateFunnelByIdPost');
        }
        // verify required parameter "funnelName" is set
        if (params.funnelName == null) {
            throw new Error('Missing required parameter funnelName when calling bizFunnelUpdateFunnelByIdPost');
        }
        // verify required parameter "funnelDesc" is set
        if (params.funnelDesc == null) {
            throw new Error('Missing required parameter funnelDesc when calling bizFunnelUpdateFunnelByIdPost');
        }
        let baseUrl = '/bizFunnel/updateFunnelById';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'funnelId': params.funnelId,
            'funnelName': params.funnelName,
            'funnelDesc': params.funnelDesc,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizfunnelcontrollerApi - functional programming interface
 */
exports.BizfunnelcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 新建漏斗
        * @param bizFunnelVO bizFunnelVO
        */
        bizFunnelAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除漏斗
        * @param id id
        */
        bizFunnelDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取漏斗详情数据
        * @param groupId groupId
        * @param funnelId funnelId
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizFunnelFunnelDetailPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelFunnelDetailPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询漏斗
        * @param id id
        */
        bizFunnelInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看漏斗名是否重复
        * @param funnelName funnelName
        */
        bizFunnelIsNameRepeatedGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelIsNameRepeatedGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询漏斗列表
        */
        bizFunnelListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更改漏斗监听状态
        * @param funnelId funnelId
        * @param isMonitor isMonitor
        */
        bizFunnelMonitorPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelMonitorPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询漏斗
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizFunnelPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存漏斗步骤流失用户群
        * @param bizFunnelGroupVo bizFunnelGroupVo
        */
        bizFunnelSaveFunnelLoseGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelSaveFunnelLoseGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存漏斗步骤用户群
        * @param bizFunnelGroupVo bizFunnelGroupVo
        */
        bizFunnelSaveFunnelStepGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelSaveFunnelStepGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 漏斗标签详情列表
        * @param entityId 实体id
        * @param expression expression
        * @param columnNames columnNames
        */
        bizFunnelTagDetailPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelTagDetailPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 漏斗标签分布
        * @param expression expression
        * @param tagEnglishName tagEnglishName
        */
        bizFunnelTagDistributePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelTagDistributePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 漏斗标签特征
        * @param bizFunnelExpression bizFunnelExpression
        */
        bizFunnelTagFeaturePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelTagFeaturePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 数据回溯是否完成
        * @param funnelId funnelId
        */
        bizFunnelTraceBackIsFinishGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelTraceBackIsFinishGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 设置数据回溯日期
        * @param funnelId funnelId
        * @param backDate backDate
        */
        bizFunnelTraceBackPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelTraceBackPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新漏斗(名字和描述)
        * @param funnelId funnelId
        * @param funnelName funnelName
        * @param funnelDesc funnelDesc
        */
        bizFunnelUpdateFunnelByIdPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelcontrollerApiFetchParamCreator.bizFunnelUpdateFunnelByIdPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizfunnelstepcontrollerApi - fetch parameter creator
 */
exports.BizfunnelstepcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入漏斗步骤
     * @param bizFunnelStepPO bizFunnelStepPO
     */
    bizFunnelStepAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelStepPO" is set
        if (params.bizFunnelStepPO == null) {
            throw new Error('Missing required parameter bizFunnelStepPO when calling bizFunnelStepAddPost');
        }
        let baseUrl = '/bizFunnelStep/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelStepPO) {
            fetchOptions.body = JSON.stringify(params.bizFunnelStepPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除漏斗步骤
     * @param id id
     */
    bizFunnelStepDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFunnelStepDelIdDelete');
        }
        let baseUrl = '/bizFunnelStep/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询漏斗步骤
     * @param id id
     */
    bizFunnelStepInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizFunnelStepInfoIdGet');
        }
        let baseUrl = '/bizFunnelStep/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询漏斗步骤列表
     */
    bizFunnelStepListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFunnelStep/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询漏斗步骤
     */
    bizFunnelStepPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizFunnelStep/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新漏斗步骤
     * @param bizFunnelStepPO bizFunnelStepPO
     */
    bizFunnelStepUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFunnelStepPO" is set
        if (params.bizFunnelStepPO == null) {
            throw new Error('Missing required parameter bizFunnelStepPO when calling bizFunnelStepUpdatePut');
        }
        let baseUrl = '/bizFunnelStep/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFunnelStepPO) {
            fetchOptions.body = JSON.stringify(params.bizFunnelStepPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizfunnelstepcontrollerApi - functional programming interface
 */
exports.BizfunnelstepcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入漏斗步骤
        * @param bizFunnelStepPO bizFunnelStepPO
        */
        bizFunnelStepAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除漏斗步骤
        * @param id id
        */
        bizFunnelStepDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询漏斗步骤
        * @param id id
        */
        bizFunnelStepInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询漏斗步骤列表
        */
        bizFunnelStepListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询漏斗步骤
        */
        bizFunnelStepPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新漏斗步骤
        * @param bizFunnelStepPO bizFunnelStepPO
        */
        bizFunnelStepUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizfunnelstepcontrollerApiFetchParamCreator.bizFunnelStepUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizgroupanalyzedimensioncontrollerApi - fetch parameter creator
 */
exports.BizgroupanalyzedimensioncontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入群组分析维度
     * @param bizGroupAnalyzeDimensionPOList bizGroupAnalyzeDimensionPOList
     */
    bizGroupAnalyzeDimensionAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizGroupAnalyzeDimensionPOList" is set
        if (params.bizGroupAnalyzeDimensionPOList == null) {
            throw new Error('Missing required parameter bizGroupAnalyzeDimensionPOList when calling bizGroupAnalyzeDimensionAddPost');
        }
        let baseUrl = '/bizGroupAnalyzeDimension/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizGroupAnalyzeDimensionPOList) {
            fetchOptions.body = JSON.stringify(params.bizGroupAnalyzeDimensionPOList || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除群组分析维度
     * @param id id
     */
    bizGroupAnalyzeDimensionDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizGroupAnalyzeDimension/del/{id}';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            id: params.id,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 在群组管理配置页面，根据id删除群组分析维度
     * @param id id
     */
    bizGroupAnalyzeDimensionGroupConfigDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizGroupAnalyzeDimension/groupConfigDel/{id}';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            id: params.id,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询群组分析维度
     * @param entityId entityId
     * @param groupAnalyzeDimensionTypeEnum groupAnalyzeDimensionTypeEnum
     */
    bizGroupAnalyzeDimensionListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizGroupAnalyzeDimension/list';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            groupAnalyzeDimensionTypeEnum: params.groupAnalyzeDimensionTypeEnum,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizgroupanalyzedimensioncontrollerApi - functional programming interface
 */
exports.BizgroupanalyzedimensioncontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入群组分析维度
        * @param bizGroupAnalyzeDimensionPOList bizGroupAnalyzeDimensionPOList
        */
        bizGroupAnalyzeDimensionAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupanalyzedimensioncontrollerApiFetchParamCreator.bizGroupAnalyzeDimensionAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除群组分析维度
        * @param id id
        */
        bizGroupAnalyzeDimensionDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupanalyzedimensioncontrollerApiFetchParamCreator.bizGroupAnalyzeDimensionDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 在群组管理配置页面，根据id删除群组分析维度
        * @param id id
        */
        bizGroupAnalyzeDimensionGroupConfigDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupanalyzedimensioncontrollerApiFetchParamCreator.bizGroupAnalyzeDimensionGroupConfigDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询群组分析维度
        * @param entityId entityId
        * @param groupAnalyzeDimensionTypeEnum groupAnalyzeDimensionTypeEnum
        */
        bizGroupAnalyzeDimensionListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupanalyzedimensioncontrollerApiFetchParamCreator.bizGroupAnalyzeDimensionListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizgroupcategorycontrollerApi - fetch parameter creator
 */
exports.BizgroupcategorycontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 根据id查询
     * @param id id
     */
    bizGroupCategoryInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupCategoryInfoIdGet');
        }
        let baseUrl = '/bizGroupCategory/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 检验用户群分类是否重复
     * @param entityId entityId
     * @param groupCategoryName groupCategoryName
     */
    bizGroupCategoryIsRepetitiveGroupCategoryNamePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupCategoryIsRepetitiveGroupCategoryNamePost');
        }
        // verify required parameter "groupCategoryName" is set
        if (params.groupCategoryName == null) {
            throw new Error('Missing required parameter groupCategoryName when calling bizGroupCategoryIsRepetitiveGroupCategoryNamePost');
        }
        let baseUrl = '/bizGroupCategory/isRepetitiveGroupCategoryName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            'groupCategoryName': params.groupCategoryName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取当前岗位用户群分类
     * @param entityId entityId
     */
    bizGroupCategoryQueryGroupCategoryListByUserPostIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupCategoryQueryGroupCategoryListByUserPostIdGet');
        }
        let baseUrl = '/bizGroupCategory/queryGroupCategoryListByUserPostId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizgroupcategorycontrollerApi - functional programming interface
 */
exports.BizgroupcategorycontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 根据id查询
        * @param id id
        */
        bizGroupCategoryInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcategorycontrollerApiFetchParamCreator.bizGroupCategoryInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 检验用户群分类是否重复
        * @param entityId entityId
        * @param groupCategoryName groupCategoryName
        */
        bizGroupCategoryIsRepetitiveGroupCategoryNamePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcategorycontrollerApiFetchParamCreator.bizGroupCategoryIsRepetitiveGroupCategoryNamePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取当前岗位用户群分类
        * @param entityId entityId
        */
        bizGroupCategoryQueryGroupCategoryListByUserPostIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcategorycontrollerApiFetchParamCreator.bizGroupCategoryQueryGroupCategoryListByUserPostIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizgroupcontrollerApi - fetch parameter creator
 */
exports.BizgroupcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 根据id删除群组
     * @param id id
     */
    bizGroupDeleteGroupByIdIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupDeleteGroupByIdIdDelete');
        }
        let baseUrl = '/bizGroup/deleteGroupById/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 从特别关注群组中删除
     * @param entityId entityId
     * @param superId superId
     */
    bizGroupDeleteSpecialGroupDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupDeleteSpecialGroupDelete');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizGroupDeleteSpecialGroupDelete');
        }
        let baseUrl = '/bizGroup/deleteSpecialGroup';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            'superId': params.superId,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询外导群组匹配数（成功数和失败数）
     * @param fileIdList fileIdList
     * @param entityId entityId
     */
    bizGroupGetFromImportGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fileIdList" is set
        if (params.fileIdList == null) {
            throw new Error('Missing required parameter fileIdList when calling bizGroupGetFromImportGroupPost');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupGetFromImportGroupPost');
        }
        let baseUrl = '/bizGroup/getFromImportGroup/';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            fileIdList: params.fileIdList,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询群组
     * @param id id
     */
    bizGroupInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupInfoIdGet');
        }
        let baseUrl = '/bizGroup/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 判断是否在特别关注群组
     * @param entityId entityId
     * @param superId superId
     */
    bizGroupIsInSpecialGroupGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupIsInSpecialGroupGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizGroupIsInSpecialGroupGet');
        }
        let baseUrl = '/bizGroup/isInSpecialGroup';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'superId': params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 校验用户群名称是否重复
     * @param entityId entityId
     * @param groupName groupName
     */
    bizGroupIsRepetitiveGroupNamePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupIsRepetitiveGroupNamePost');
        }
        // verify required parameter "groupName" is set
        if (params.groupName == null) {
            throw new Error('Missing required parameter groupName when calling bizGroupIsRepetitiveGroupNamePost');
        }
        let baseUrl = '/bizGroup/isRepetitiveGroupName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            groupName: params.groupName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询群组列表
     * @param id 群组自增id
     * @param entityId 实体id不能为空！！！
     * @param groupCategoryId 群组分类id
     * @param groupName 群组名
     * @param groupType 类型（0：普通群组，1：外导群组，2：自定义报表群组，4：自动化营销群组，5：漏斗步骤群组，6：漏斗步骤流失群组，7：所有，8：特别关注，9：其他）
     * @param groupAuthorityType 群组权限类型（0：个人，1：生命旅程）
     * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中,2表示查询全部
     * @param createUser 创建人
     * @param updateUser 更新人
     * @param updateTime 更新时间
     * @param createTime 创建时间
     */
    bizGroupListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizGroup/list';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
            entityId: params.entityId,
            'groupCategoryId': params.groupCategoryId,
            'groupName': params.groupName,
            groupType: params.groupType,
            'groupAuthorityType': params.groupAuthorityType,
            isAddReport: params.isAddReport,
            'createUser': params.createUser,
            updateUser: params.updateUser,
            'updateTime': params.updateTime,
            'createTime': params.createTime,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询群组
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param id 群组自增id
     * @param entityId 实体id不能为空！！！
     * @param groupCategoryId 群组分类id
     * @param groupName 群组名
     * @param groupType 类型（0：普通群组，1：外导群组，2：自定义报表群组，4：自动化营销群组，5：漏斗步骤群组，6：漏斗步骤流失群组，7：所有，8：特别关注，9：其他）
     * @param groupAuthorityType 群组权限类型（0：个人，1：生命旅程）
     * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中,2表示查询全部
     * @param createUser 创建人
     * @param updateUser 更新人
     * @param updateTime 更新时间
     * @param createTime 创建时间
     */
    bizGroupPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizGroupPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizGroupPageGet');
        }
        let baseUrl = '/bizGroup/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
            'id': params.id,
            entityId: params.entityId,
            'groupCategoryId': params.groupCategoryId,
            groupName: params.groupName,
            'groupType': params.groupType,
            groupAuthorityType: params.groupAuthorityType,
            isAddReport: params.isAddReport,
            'createUser': params.createUser,
            'updateUser': params.updateUser,
            'updateTime': params.updateTime,
            createTime: params.createTime,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据用户群自增id列表获取群组的客户数和用户数
     * @param ids 用户群自增id列表，用英文逗号隔开eg:12312,32412,43413241
     * @param entityId 实体id
     */
    bizGroupQueryGroupCustomerNumAndUserNumGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "ids" is set
        if (params.ids == null) {
            throw new Error('Missing required parameter ids when calling bizGroupQueryGroupCustomerNumAndUserNumGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupQueryGroupCustomerNumAndUserNumGet');
        }
        let baseUrl = '/bizGroup/queryGroupCustomerNumAndUserNum';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'ids': params.ids,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取群组人群信息
     * @param id id
     * @param columnNames columnNames
     * @param limit limit
     */
    bizGroupQueryGroupTagDetailInformationIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupQueryGroupTagDetailInformationIdGet');
        }
        // verify required parameter "columnNames" is set
        if (params.columnNames == null) {
            throw new Error('Missing required parameter columnNames when calling bizGroupQueryGroupTagDetailInformationIdGet');
        }
        let baseUrl = '/bizGroup/queryGroupTagDetailInformation/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'columnNames': params.columnNames,
            'limit': params.limit,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取群组标签分布
     * @param id id
     * @param tagEnglishName tagEnglishName
     */
    bizGroupQueryGroupTagDistributionIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupQueryGroupTagDistributionIdGet');
        }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizGroupQueryGroupTagDistributionIdGet');
        }
        let baseUrl = '/bizGroup/queryGroupTagDistribution/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取群组标签特征信息
     * @param id id
     */
    bizGroupQueryTGIByIdIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupQueryTGIByIdIdGet');
        }
        let baseUrl = '/bizGroup/queryTGIById/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 通知查询引擎解析上传的文件
     * @param fileUrlList fileUrlList
     * @param entityId entityId
     */
    bizGroupSaveDateGroupInputPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fileUrlList" is set
        if (params.fileUrlList == null) {
            throw new Error('Missing required parameter fileUrlList when calling bizGroupSaveDateGroupInputPost');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupSaveDateGroupInputPost');
        }
        let baseUrl = '/bizGroup/saveDateGroupInput/';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            fileUrlList: params.fileUrlList,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存特别关注群组
     * @param entityId entityId
     * @param superid superid
     */
    bizGroupSaveSpecialGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupSaveSpecialGroupPost');
        }
        // verify required parameter "superid" is set
        if (params.superid == null) {
            throw new Error('Missing required parameter superid when calling bizGroupSaveSpecialGroupPost');
        }
        let baseUrl = '/bizGroup/saveSpecialGroup';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            superid: params.superid,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 申请下载人群
     * @param id id
     * @param sysEntityId sysEntityId
     * @param columnNames columnNames
     * @param columnCHNames columnCHNames
     */
    bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet');
        }
        // verify required parameter "columnNames" is set
        if (params.columnNames == null) {
            throw new Error('Missing required parameter columnNames when calling bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet');
        }
        // verify required parameter "columnCHNames" is set
        if (params.columnCHNames == null) {
            throw new Error('Missing required parameter columnCHNames when calling bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet');
        }
        let baseUrl = '/bizGroup/{sysEntityId}/downloadGroupTagDetailInformation/{id}'
            .replace('{' + 'id' + '}', '' + params.id)
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'columnNames': params.columnNames,
            'columnCHNames': params.columnCHNames,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取下载模板导入用户群
     * @param sysEntityId sysEntityId
     */
    bizGroupSysEntityIdDownloadTemplateGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizGroupSysEntityIdDownloadTemplateGet');
        }
        let baseUrl = '/bizGroup/{sysEntityId}/downloadTemplate'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存普通群组
     * @param sysEntityId sysEntityId
     * @param bizGroupInfo bizGroupInfo
     */
    bizGroupSysEntityIdSaveCommonGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizGroupSysEntityIdSaveCommonGroupPost');
        }
        // verify required parameter "bizGroupInfo" is set
        if (params.bizGroupInfo == null) {
            throw new Error('Missing required parameter bizGroupInfo when calling bizGroupSysEntityIdSaveCommonGroupPost');
        }
        let baseUrl = '/bizGroup/{sysEntityId}/saveCommonGroup'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizGroupInfo) {
            fetchOptions.body = JSON.stringify(params.bizGroupInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存外导群组
     * @param bizGroupInfo bizGroupInfo
     * @param sysEntityId sysEntityId
     * @param fileIdList fileIdList
     */
    bizGroupSysEntityIdSaveImportGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizGroupInfo" is set
        if (params.bizGroupInfo == null) {
            throw new Error('Missing required parameter bizGroupInfo when calling bizGroupSysEntityIdSaveImportGroupPost');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizGroupSysEntityIdSaveImportGroupPost');
        }
        // verify required parameter "fileIdList" is set
        if (params.fileIdList == null) {
            throw new Error('Missing required parameter fileIdList when calling bizGroupSysEntityIdSaveImportGroupPost');
        }
        let baseUrl = '/bizGroup/{sysEntityId}/saveImportGroup'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fileIdList': params.fileIdList,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizGroupInfo) {
            fetchOptions.body = JSON.stringify(params.bizGroupInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新是否添加到全部报告的状态
     * @param id id
     * @param isAddReport isAddReport
     */
    bizGroupUpdateAddReportIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupUpdateAddReportIdGet');
        }
        // verify required parameter "isAddReport" is set
        if (params.isAddReport == null) {
            throw new Error('Missing required parameter isAddReport when calling bizGroupUpdateAddReportIdGet');
        }
        let baseUrl = '/bizGroup/updateAddReport/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'isAddReport': params.isAddReport,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 修改用户群
     * @param id 群组自增id
     * @param groupName 群组名称
     * @param groupDesc 群组描述
     * @param groupCategoryId 群组分类id
     * @param groupCategory
     * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中
     */
    bizGroupUpdateGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizGroup/updateGroup';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            id: params.id,
            groupName: params.groupName,
            'groupDesc': params.groupDesc,
            groupCategoryId: params.groupCategoryId,
            groupCategory: params.groupCategory,
            'isAddReport': params.isAddReport,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizgroupcontrollerApi - functional programming interface
 */
exports.BizgroupcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 根据id删除群组
        * @param id id
        */
        bizGroupDeleteGroupByIdIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupDeleteGroupByIdIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 从特别关注群组中删除
        * @param entityId entityId
        * @param superId superId
        */
        bizGroupDeleteSpecialGroupDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupDeleteSpecialGroupDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询外导群组匹配数（成功数和失败数）
        * @param fileIdList fileIdList
        * @param entityId entityId
        */
        bizGroupGetFromImportGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupGetFromImportGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询群组
        * @param id id
        */
        bizGroupInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 判断是否在特别关注群组
        * @param entityId entityId
        * @param superId superId
        */
        bizGroupIsInSpecialGroupGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupIsInSpecialGroupGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 校验用户群名称是否重复
        * @param entityId entityId
        * @param groupName groupName
        */
        bizGroupIsRepetitiveGroupNamePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupIsRepetitiveGroupNamePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询群组列表
        * @param id 群组自增id
        * @param entityId 实体id不能为空！！！
        * @param groupCategoryId 群组分类id
        * @param groupName 群组名
        * @param groupType 类型（0：普通群组，1：外导群组，2：自定义报表群组，4：自动化营销群组，5：漏斗步骤群组，6：漏斗步骤流失群组，7：所有，8：特别关注，9：其他）
        * @param groupAuthorityType 群组权限类型（0：个人，1：生命旅程）
        * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中,2表示查询全部
        * @param createUser 创建人
        * @param updateUser 更新人
        * @param updateTime 更新时间
        * @param createTime 创建时间
        */
        bizGroupListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询群组
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param id 群组自增id
        * @param entityId 实体id不能为空！！！
        * @param groupCategoryId 群组分类id
        * @param groupName 群组名
        * @param groupType 类型（0：普通群组，1：外导群组，2：自定义报表群组，4：自动化营销群组，5：漏斗步骤群组，6：漏斗步骤流失群组，7：所有，8：特别关注，9：其他）
        * @param groupAuthorityType 群组权限类型（0：个人，1：生命旅程）
        * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中,2表示查询全部
        * @param createUser 创建人
        * @param updateUser 更新人
        * @param updateTime 更新时间
        * @param createTime 创建时间
        */
        bizGroupPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据用户群自增id列表获取群组的客户数和用户数
        * @param ids 用户群自增id列表，用英文逗号隔开eg:12312,32412,43413241
        * @param entityId 实体id
        */
        bizGroupQueryGroupCustomerNumAndUserNumGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupQueryGroupCustomerNumAndUserNumGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取群组人群信息
        * @param id id
        * @param columnNames columnNames
        * @param limit limit
        */
        bizGroupQueryGroupTagDetailInformationIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupQueryGroupTagDetailInformationIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取群组标签分布
        * @param id id
        * @param tagEnglishName tagEnglishName
        */
        bizGroupQueryGroupTagDistributionIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupQueryGroupTagDistributionIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取群组标签特征信息
        * @param id id
        */
        bizGroupQueryTGIByIdIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupQueryTGIByIdIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 通知查询引擎解析上传的文件
        * @param fileUrlList fileUrlList
        * @param entityId entityId
        */
        bizGroupSaveDateGroupInputPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSaveDateGroupInputPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存特别关注群组
        * @param entityId entityId
        * @param superid superid
        */
        bizGroupSaveSpecialGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSaveSpecialGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 申请下载人群
        * @param id id
        * @param sysEntityId sysEntityId
        * @param columnNames columnNames
        * @param columnCHNames columnCHNames
        */
        bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSysEntityIdDownloadGroupTagDetailInformationIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取下载模板导入用户群
        * @param sysEntityId sysEntityId
        */
        bizGroupSysEntityIdDownloadTemplateGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSysEntityIdDownloadTemplateGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存普通群组
        * @param sysEntityId sysEntityId
        * @param bizGroupInfo bizGroupInfo
        */
        bizGroupSysEntityIdSaveCommonGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSysEntityIdSaveCommonGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存外导群组
        * @param bizGroupInfo bizGroupInfo
        * @param sysEntityId sysEntityId
        * @param fileIdList fileIdList
        */
        bizGroupSysEntityIdSaveImportGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupSysEntityIdSaveImportGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新是否添加到全部报告的状态
        * @param id id
        * @param isAddReport isAddReport
        */
        bizGroupUpdateAddReportIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupUpdateAddReportIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 修改用户群
        * @param id 群组自增id
        * @param groupName 群组名称
        * @param groupDesc 群组描述
        * @param groupCategoryId 群组分类id
        * @param groupCategory
        * @param isAddReport 添加到全局查看报告快捷选择中 1:选中 0未选中
        */
        bizGroupUpdateGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgroupcontrollerApiFetchParamCreator.bizGroupUpdateGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizgrouptagmapcontrollerApi - fetch parameter creator
 */
exports.BizgrouptagmapcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 添加从《选择已有标签里》的标签到群组标签关系表
     * @param id id
     * @param tagEnglishValueTitles tagEnglishValueTitles
     */
    bizGroupTagMapAddChooseCustomtagValuePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupTagMapAddChooseCustomtagValuePost');
        }
        // verify required parameter "tagEnglishValueTitles" is set
        if (params.tagEnglishValueTitles == null) {
            throw new Error('Missing required parameter tagEnglishValueTitles when calling bizGroupTagMapAddChooseCustomtagValuePost');
        }
        let baseUrl = '/bizGroupTagMap/addChooseCustomtagValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
            'tagEnglishValueTitles': params.tagEnglishValueTitles,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据用户群id查询群组的自定义标签
     * @param groupId groupId
     */
    bizGroupTagMapCustomTagByIdGroupIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizGroupTagMapCustomTagByIdGroupIdGet');
        }
        let baseUrl = '/bizGroupTagMap/customTagById/{groupId}'
            .replace('{' + 'groupId' + '}', '' + params.groupId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据用户群id和tagEnglishValueTitle删除群组自定义标签
     * @param groupId groupId
     * @param tagEnglishValueTitle tagEnglishValueTitle
     */
    bizGroupTagMapDelGroupIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizGroupTagMapDelGroupIdDelete');
        }
        // verify required parameter "tagEnglishValueTitle" is set
        if (params.tagEnglishValueTitle == null) {
            throw new Error('Missing required parameter tagEnglishValueTitle when calling bizGroupTagMapDelGroupIdDelete');
        }
        let baseUrl = '/bizGroupTagMap/del/{groupId}'
            .replace('{' + 'groupId' + '}', '' + params.groupId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishValueTitle: params.tagEnglishValueTitle,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取当前岗位自定义标签值列表,根据岗位id
     * @param entityId entityId
     */
    bizGroupTagMapQueryCustomTagByUserPostIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizGroupTagMapQueryCustomTagByUserPostIdGet');
        }
        let baseUrl = '/bizGroupTagMap/queryCustomTagByUserPostId/';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增自定义标签值
     * @param sysEntityId sysEntityId
     * @param id id
     * @param tagValueTitle tagValueTitle
     */
    bizGroupTagMapSysEntityIdAddCustomtagValuePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizGroupTagMapSysEntityIdAddCustomtagValuePost');
        }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizGroupTagMapSysEntityIdAddCustomtagValuePost');
        }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizGroupTagMapSysEntityIdAddCustomtagValuePost');
        }
        let baseUrl = '/bizGroupTagMap/{sysEntityId}/addCustomtagValue'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
            'tagValueTitle': params.tagValueTitle,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizgrouptagmapcontrollerApi - functional programming interface
 */
exports.BizgrouptagmapcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 添加从《选择已有标签里》的标签到群组标签关系表
        * @param id id
        * @param tagEnglishValueTitles tagEnglishValueTitles
        */
        bizGroupTagMapAddChooseCustomtagValuePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgrouptagmapcontrollerApiFetchParamCreator.bizGroupTagMapAddChooseCustomtagValuePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据用户群id查询群组的自定义标签
        * @param groupId groupId
        */
        bizGroupTagMapCustomTagByIdGroupIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgrouptagmapcontrollerApiFetchParamCreator.bizGroupTagMapCustomTagByIdGroupIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据用户群id和tagEnglishValueTitle删除群组自定义标签
        * @param groupId groupId
        * @param tagEnglishValueTitle tagEnglishValueTitle
        */
        bizGroupTagMapDelGroupIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgrouptagmapcontrollerApiFetchParamCreator.bizGroupTagMapDelGroupIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取当前岗位自定义标签值列表,根据岗位id
        * @param entityId entityId
        */
        bizGroupTagMapQueryCustomTagByUserPostIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgrouptagmapcontrollerApiFetchParamCreator.bizGroupTagMapQueryCustomTagByUserPostIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增自定义标签值
        * @param sysEntityId sysEntityId
        * @param id id
        * @param tagValueTitle tagValueTitle
        */
        bizGroupTagMapSysEntityIdAddCustomtagValuePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizgrouptagmapcontrollerApiFetchParamCreator.bizGroupTagMapSysEntityIdAddCustomtagValuePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizlifetripcontrollerApi - fetch parameter creator
 */
exports.BizlifetripcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入经典营销-用户生命旅程
     * @param bizLifeTripInfo bizLifeTripInfo
     */
    bizLifeTripAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfo" is set
        if (params.bizLifeTripInfo == null) {
            throw new Error('Missing required parameter bizLifeTripInfo when calling bizLifeTripAddPost');
        }
        let baseUrl = '/bizLifeTrip/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfo) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除经典营销-用户生命旅程
     * @param id id
     */
    bizLifeTripDelByIdIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizLifeTripDelByIdIdDelete');
        }
        let baseUrl = '/bizLifeTrip/delById/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary  获取漏斗详情数据-用户生命旅程
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     * @param funnelId 漏斗id(自增id)
     * @param startDate startDate
     * @param endDate endDate
     */
    bizLifeTripFunnelDetailPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripFunnelDetailPost');
        }
        // verify required parameter "funnelId" is set
        if (params.funnelId == null) {
            throw new Error('Missing required parameter funnelId when calling bizLifeTripFunnelDetailPost');
        }
        let baseUrl = '/bizLifeTrip/funnelDetail';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            funnelId: params.funnelId,
            startDate: params.startDate,
            endDate: params.endDate,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询经典营销-用户生命旅程
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizLifeTripQueryBizLifeTripInfoByPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizLifeTripQueryBizLifeTripInfoByPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizLifeTripQueryBizLifeTripInfoByPageGet');
        }
        let baseUrl = '/bizLifeTrip/queryBizLifeTripInfoByPage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            pageSize: params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取决策树节点的覆盖数-用户生命旅程
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     * @param treeId 决策树id(业务id)
     * @param startDate startDate
     * @param endDate endDate
     */
    bizLifeTripQueryDecisionTreeNodeNumPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryDecisionTreeNodeNumPost');
        }
        // verify required parameter "treeId" is set
        if (params.treeId == null) {
            throw new Error('Missing required parameter treeId when calling bizLifeTripQueryDecisionTreeNodeNumPost');
        }
        let baseUrl = '/bizLifeTrip/queryDecisionTreeNodeNum';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'treeId': params.treeId,
            'startDate': params.startDate,
            endDate: params.endDate,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取临时群组详情列表
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     * @param groupExpression 群组表达式
     * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
     * @param columnNames 要查询列的(实体ID或属性)英文名的集合；用逗号隔开(eg:phone,name,qq)
     * @param limit 要查询的行数(如果有默认返回200条，前端做分页)
     */
    bizLifeTripQueryGroupTagDetailInformationPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryGroupTagDetailInformationPost');
        }
        // verify required parameter "groupExpression" is set
        if (params.groupExpression == null) {
            throw new Error('Missing required parameter groupExpression when calling bizLifeTripQueryGroupTagDetailInformationPost');
        }
        // verify required parameter "type" is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling bizLifeTripQueryGroupTagDetailInformationPost');
        }
        // verify required parameter "columnNames" is set
        if (params.columnNames == null) {
            throw new Error('Missing required parameter columnNames when calling bizLifeTripQueryGroupTagDetailInformationPost');
        }
        // verify required parameter "limit" is set
        if (params.limit == null) {
            throw new Error('Missing required parameter limit when calling bizLifeTripQueryGroupTagDetailInformationPost');
        }
        let baseUrl = '/bizLifeTrip/queryGroupTagDetailInformation';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'groupExpression': params.groupExpression,
            'type': params.type,
            'columnNames': params.columnNames,
            'limit': params.limit,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取临时群组标签分布
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     * @param groupExpression 群组表达式
     * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
     * @param tagEnglishName 标签的英文名
     */
    bizLifeTripQueryGroupTagDistributionPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryGroupTagDistributionPost');
        }
        // verify required parameter "groupExpression" is set
        if (params.groupExpression == null) {
            throw new Error('Missing required parameter groupExpression when calling bizLifeTripQueryGroupTagDistributionPost');
        }
        // verify required parameter "type" is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling bizLifeTripQueryGroupTagDistributionPost');
        }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizLifeTripQueryGroupTagDistributionPost');
        }
        let baseUrl = '/bizLifeTrip/queryGroupTagDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            groupExpression: params.groupExpression,
            'type': params.type,
            'tagEnglishName': params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询经典营销-用户生命旅程
     * @param id id
     */
    bizLifeTripQueryInfoByIdIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizLifeTripQueryInfoByIdIdGet');
        }
        let baseUrl = '/bizLifeTrip/queryInfoById/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询临时群组标签特征(TGI)
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     * @param groupExpression 群组表达式
     * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
     */
    bizLifeTripQueryLifeGroupTGIPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryLifeGroupTGIPost');
        }
        // verify required parameter "groupExpression" is set
        if (params.groupExpression == null) {
            throw new Error('Missing required parameter groupExpression when calling bizLifeTripQueryLifeGroupTGIPost');
        }
        // verify required parameter "type" is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling bizLifeTripQueryLifeGroupTGIPost');
        }
        let baseUrl = '/bizLifeTrip/queryLifeGroupTGI';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            groupExpression: params.groupExpression,
            type: params.type,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据群条件表达式查询人数-用户生命旅程
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     */
    bizLifeTripQueryPeopleSumPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryPeopleSumPost');
        }
        let baseUrl = '/bizLifeTrip/queryPeopleSum';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 转换分析显著特性(TGI)-用户生命旅程
     * @param bizLifeTripInfoParam bizLifeTripInfoParam
     */
    bizLifeTripQueryTGIPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfoParam" is set
        if (params.bizLifeTripInfoParam == null) {
            throw new Error('Missing required parameter bizLifeTripInfoParam when calling bizLifeTripQueryTGIPost');
        }
        let baseUrl = '/bizLifeTrip/queryTGI';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfoParam) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfoParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存决策树节点临时群组为固定群组-用户生命旅程
     * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
     */
    bizLifeTripSaveDecisionGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripGroupInfo" is set
        if (params.bizLifeTripGroupInfo == null) {
            throw new Error('Missing required parameter bizLifeTripGroupInfo when calling bizLifeTripSaveDecisionGroupPost');
        }
        let baseUrl = '/bizLifeTrip/saveDecisionGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripGroupInfo) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripGroupInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary  保存漏斗步骤流失用户群-用户生命旅程
     * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
     */
    bizLifeTripSaveFunnelLoseGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripGroupInfo" is set
        if (params.bizLifeTripGroupInfo == null) {
            throw new Error('Missing required parameter bizLifeTripGroupInfo when calling bizLifeTripSaveFunnelLoseGroupPost');
        }
        let baseUrl = '/bizLifeTrip/saveFunnelLoseGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripGroupInfo) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripGroupInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary  保存漏斗步骤用户群-用户生命旅程
     * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
     */
    bizLifeTripSaveFunnelStepGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripGroupInfo" is set
        if (params.bizLifeTripGroupInfo == null) {
            throw new Error('Missing required parameter bizLifeTripGroupInfo when calling bizLifeTripSaveFunnelStepGroupPost');
        }
        let baseUrl = '/bizLifeTrip/saveFunnelStepGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripGroupInfo) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripGroupInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary  保存经典营销场景排序
     * @param list list
     */
    bizLifeTripSaveSortIndexPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "list" is set
        if (params.list == null) {
            throw new Error('Missing required parameter list when calling bizLifeTripSaveSortIndexPost');
        }
        let baseUrl = '/bizLifeTrip/saveSortIndex';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.list) {
            fetchOptions.body = JSON.stringify(params.list || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新经典营销-用户生命旅程
     * @param bizLifeTripInfo bizLifeTripInfo
     */
    bizLifeTripUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizLifeTripInfo" is set
        if (params.bizLifeTripInfo == null) {
            throw new Error('Missing required parameter bizLifeTripInfo when calling bizLifeTripUpdatePut');
        }
        let baseUrl = '/bizLifeTrip/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizLifeTripInfo) {
            fetchOptions.body = JSON.stringify(params.bizLifeTripInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizlifetripcontrollerApi - functional programming interface
 */
exports.BizlifetripcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入经典营销-用户生命旅程
        * @param bizLifeTripInfo bizLifeTripInfo
        */
        bizLifeTripAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除经典营销-用户生命旅程
        * @param id id
        */
        bizLifeTripDelByIdIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripDelByIdIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary  获取漏斗详情数据-用户生命旅程
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        * @param funnelId 漏斗id(自增id)
        * @param startDate startDate
        * @param endDate endDate
        */
        bizLifeTripFunnelDetailPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripFunnelDetailPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询经典营销-用户生命旅程
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizLifeTripQueryBizLifeTripInfoByPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryBizLifeTripInfoByPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取决策树节点的覆盖数-用户生命旅程
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        * @param treeId 决策树id(业务id)
        * @param startDate startDate
        * @param endDate endDate
        */
        bizLifeTripQueryDecisionTreeNodeNumPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryDecisionTreeNodeNumPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取临时群组详情列表
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        * @param groupExpression 群组表达式
        * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
        * @param columnNames 要查询列的(实体ID或属性)英文名的集合；用逗号隔开(eg:phone,name,qq)
        * @param limit 要查询的行数(如果有默认返回200条，前端做分页)
        */
        bizLifeTripQueryGroupTagDetailInformationPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryGroupTagDetailInformationPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取临时群组标签分布
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        * @param groupExpression 群组表达式
        * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
        * @param tagEnglishName 标签的英文名
        */
        bizLifeTripQueryGroupTagDistributionPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryGroupTagDistributionPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询经典营销-用户生命旅程
        * @param id id
        */
        bizLifeTripQueryInfoByIdIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryInfoByIdIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询临时群组标签特征(TGI)
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        * @param groupExpression 群组表达式
        * @param type 群组类型英文(funnel(漏斗),funnel_lost(漏斗流逝),decision(决策树))
        */
        bizLifeTripQueryLifeGroupTGIPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryLifeGroupTGIPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据群条件表达式查询人数-用户生命旅程
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        */
        bizLifeTripQueryPeopleSumPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryPeopleSumPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 转换分析显著特性(TGI)-用户生命旅程
        * @param bizLifeTripInfoParam bizLifeTripInfoParam
        */
        bizLifeTripQueryTGIPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripQueryTGIPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存决策树节点临时群组为固定群组-用户生命旅程
        * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
        */
        bizLifeTripSaveDecisionGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripSaveDecisionGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary  保存漏斗步骤流失用户群-用户生命旅程
        * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
        */
        bizLifeTripSaveFunnelLoseGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripSaveFunnelLoseGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary  保存漏斗步骤用户群-用户生命旅程
        * @param bizLifeTripGroupInfo bizLifeTripGroupInfo
        */
        bizLifeTripSaveFunnelStepGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripSaveFunnelStepGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary  保存经典营销场景排序
        * @param list list
        */
        bizLifeTripSaveSortIndexPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripSaveSortIndexPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新经典营销-用户生命旅程
        * @param bizLifeTripInfo bizLifeTripInfo
        */
        bizLifeTripUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizlifetripcontrollerApiFetchParamCreator.bizLifeTripUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizmicroscopicpicturecontrollerApi - fetch parameter creator
 */
exports.BizmicroscopicpicturecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 获取用户行为信息统计--事件次数（时间维度）
     * @param entityId entityId
     * @param superId superId
     * @param startDate startDate
     * @param endDate endDate
     * @param appkey appkey
     * @param actionName actionName
     */
    bizMicroscopicPictureActionInfoStatisticsByTimeGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        // verify required parameter "startDate" is set
        if (params.startDate == null) {
            throw new Error('Missing required parameter startDate when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        // verify required parameter "endDate" is set
        if (params.endDate == null) {
            throw new Error('Missing required parameter endDate when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        // verify required parameter "actionName" is set
        if (params.actionName == null) {
            throw new Error('Missing required parameter actionName when calling bizMicroscopicPictureActionInfoStatisticsByTimeGet');
        }
        let baseUrl = '/bizMicroscopicPicture/actionInfoStatisticsByTime';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            superId: params.superId,
            startDate: params.startDate,
            endDate: params.endDate,
            'appkey': params.appkey,
            actionName: params.actionName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取用户行为信息统计--事件次数
     * @param entityId entityId
     * @param superId superId
     * @param startDate startDate
     * @param endDate endDate
     * @param appkey appkey
     */
    bizMicroscopicPictureActionInfoStatisticsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureActionInfoStatisticsGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureActionInfoStatisticsGet');
        }
        // verify required parameter "startDate" is set
        if (params.startDate == null) {
            throw new Error('Missing required parameter startDate when calling bizMicroscopicPictureActionInfoStatisticsGet');
        }
        // verify required parameter "endDate" is set
        if (params.endDate == null) {
            throw new Error('Missing required parameter endDate when calling bizMicroscopicPictureActionInfoStatisticsGet');
        }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizMicroscopicPictureActionInfoStatisticsGet');
        }
        let baseUrl = '/bizMicroscopicPicture/ActionInfoStatistics';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            superId: params.superId,
            'startDate': params.startDate,
            'endDate': params.endDate,
            appkey: params.appkey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增自定义标签--新增标签
     * @param entityId entityId
     * @param tagValueTitle tagValueTitle
     * @param superId superId
     */
    bizMicroscopicPictureAddNewCustomtagValueGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureAddNewCustomtagValueGet');
        }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizMicroscopicPictureAddNewCustomtagValueGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureAddNewCustomtagValueGet');
        }
        let baseUrl = '/bizMicroscopicPicture/addNewCustomtagValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            tagValueTitle: params.tagValueTitle,
            superId: params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增自定义标签--选择已有标签
     * @param entityId entityId
     * @param tagValueTitle tagValueTitle
     * @param superId superId
     */
    bizMicroscopicPictureAddOldCustomtagGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureAddOldCustomtagGet');
        }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizMicroscopicPictureAddOldCustomtagGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureAddOldCustomtagGet');
        }
        let baseUrl = '/bizMicroscopicPicture/addOldCustomtag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            tagValueTitle: params.tagValueTitle,
            superId: params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除自定义标签
     * @param entityId entityId
     * @param tagValueTitle tagValueTitle
     * @param superId superId
     */
    bizMicroscopicPictureDeleteCustomtagGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureDeleteCustomtagGet');
        }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizMicroscopicPictureDeleteCustomtagGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureDeleteCustomtagGet');
        }
        let baseUrl = '/bizMicroscopicPicture/deleteCustomtag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'tagValueTitle': params.tagValueTitle,
            superId: params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据查询的实体id字段，获取匹配到的实体个体的id信息
     * @param entityId entityId
     * @param queryName queryName
     * @param queryValue queryValue
     */
    bizMicroscopicPictureInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureInfoGet');
        }
        // verify required parameter "queryName" is set
        if (params.queryName == null) {
            throw new Error('Missing required parameter queryName when calling bizMicroscopicPictureInfoGet');
        }
        // verify required parameter "queryValue" is set
        if (params.queryValue == null) {
            throw new Error('Missing required parameter queryValue when calling bizMicroscopicPictureInfoGet');
        }
        let baseUrl = '/bizMicroscopicPicture/info';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            'queryName': params.queryName,
            'queryValue': params.queryValue,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取已有自定义标签
     * @param entityId entityId
     */
    bizMicroscopicPictureQueryExistCustomtagGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureQueryExistCustomtagGet');
        }
        let baseUrl = '/bizMicroscopicPicture/queryExistCustomtag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取推荐产品(感兴趣的产品)
     * @param entityId entityId
     * @param superId superId
     */
    bizMicroscopicPictureRecommendProductsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureRecommendProductsGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureRecommendProductsGet');
        }
        let baseUrl = '/bizMicroscopicPicture/recommendProducts';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'superId': params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取用户行为详情
     * @param entityId entityId
     * @param superId superId
     * @param startDate startDate
     * @param endDate endDate
     * @param appkey appkey
     * @param timestamp timestamp
     * @param actionName actionName
     */
    bizMicroscopicPictureUserActionDetailsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureUserActionDetailsGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureUserActionDetailsGet');
        }
        // verify required parameter "startDate" is set
        if (params.startDate == null) {
            throw new Error('Missing required parameter startDate when calling bizMicroscopicPictureUserActionDetailsGet');
        }
        // verify required parameter "endDate" is set
        if (params.endDate == null) {
            throw new Error('Missing required parameter endDate when calling bizMicroscopicPictureUserActionDetailsGet');
        }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizMicroscopicPictureUserActionDetailsGet');
        }
        let baseUrl = '/bizMicroscopicPicture/userActionDetails';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            superId: params.superId,
            startDate: params.startDate,
            'endDate': params.endDate,
            'appkey': params.appkey,
            timestamp: params.timestamp,
            'actionName': params.actionName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据查询id获取匹配到的用户基本信息
     * @param entityId entityId
     * @param superId superId
     */
    bizMicroscopicPictureUserBaseInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureUserBaseInfoGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureUserBaseInfoGet');
        }
        let baseUrl = '/bizMicroscopicPicture/userBaseInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            'superId': params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取用户标签变化
     * @param entityId entityId
     * @param superId superId
     * @param endDate endDate
     */
    bizMicroscopicPictureUserTagChangesGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureUserTagChangesGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureUserTagChangesGet');
        }
        // verify required parameter "endDate" is set
        if (params.endDate == null) {
            throw new Error('Missing required parameter endDate when calling bizMicroscopicPictureUserTagChangesGet');
        }
        let baseUrl = '/bizMicroscopicPicture/userTagChanges';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'superId': params.superId,
            endDate: params.endDate,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取用户标签信息
     * @param entityId entityId
     * @param superId superId
     */
    bizMicroscopicPictureUserTagInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizMicroscopicPictureUserTagInfoGet');
        }
        // verify required parameter "superId" is set
        if (params.superId == null) {
            throw new Error('Missing required parameter superId when calling bizMicroscopicPictureUserTagInfoGet');
        }
        let baseUrl = '/bizMicroscopicPicture/userTagInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'superId': params.superId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizmicroscopicpicturecontrollerApi - functional programming interface
 */
exports.BizmicroscopicpicturecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 获取用户行为信息统计--事件次数（时间维度）
        * @param entityId entityId
        * @param superId superId
        * @param startDate startDate
        * @param endDate endDate
        * @param appkey appkey
        * @param actionName actionName
        */
        bizMicroscopicPictureActionInfoStatisticsByTimeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureActionInfoStatisticsByTimeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取用户行为信息统计--事件次数
        * @param entityId entityId
        * @param superId superId
        * @param startDate startDate
        * @param endDate endDate
        * @param appkey appkey
        */
        bizMicroscopicPictureActionInfoStatisticsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureActionInfoStatisticsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增自定义标签--新增标签
        * @param entityId entityId
        * @param tagValueTitle tagValueTitle
        * @param superId superId
        */
        bizMicroscopicPictureAddNewCustomtagValueGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureAddNewCustomtagValueGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增自定义标签--选择已有标签
        * @param entityId entityId
        * @param tagValueTitle tagValueTitle
        * @param superId superId
        */
        bizMicroscopicPictureAddOldCustomtagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureAddOldCustomtagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除自定义标签
        * @param entityId entityId
        * @param tagValueTitle tagValueTitle
        * @param superId superId
        */
        bizMicroscopicPictureDeleteCustomtagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureDeleteCustomtagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据查询的实体id字段，获取匹配到的实体个体的id信息
        * @param entityId entityId
        * @param queryName queryName
        * @param queryValue queryValue
        */
        bizMicroscopicPictureInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取已有自定义标签
        * @param entityId entityId
        */
        bizMicroscopicPictureQueryExistCustomtagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureQueryExistCustomtagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取推荐产品(感兴趣的产品)
        * @param entityId entityId
        * @param superId superId
        */
        bizMicroscopicPictureRecommendProductsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureRecommendProductsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取用户行为详情
        * @param entityId entityId
        * @param superId superId
        * @param startDate startDate
        * @param endDate endDate
        * @param appkey appkey
        * @param timestamp timestamp
        * @param actionName actionName
        */
        bizMicroscopicPictureUserActionDetailsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureUserActionDetailsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据查询id获取匹配到的用户基本信息
        * @param entityId entityId
        * @param superId superId
        */
        bizMicroscopicPictureUserBaseInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureUserBaseInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取用户标签变化
        * @param entityId entityId
        * @param superId superId
        * @param endDate endDate
        */
        bizMicroscopicPictureUserTagChangesGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureUserTagChangesGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取用户标签信息
        * @param entityId entityId
        * @param superId superId
        */
        bizMicroscopicPictureUserTagInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizmicroscopicpicturecontrollerApiFetchParamCreator.bizMicroscopicPictureUserTagInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizonlineoperatingindexappcontrollerApi - fetch parameter creator
 */
exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 访问页面/页面访问汇总
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppAccessPageSummaryGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppAccessPageSummaryGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppAccessPageSummaryGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppAccessPageSummaryGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppAccessPageSummaryGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/accessPageSummary';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 活跃状况
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppActiveStatusGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppActiveStatusGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppActiveStatusGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppActiveStatusGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/activeStatus';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 活跃用户/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppActiveUserDataOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppActiveUserDataOfGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppActiveUserDataOfGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppActiveUserDataOfGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppActiveUserDataOfGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppActiveUserDataOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/activeUserDataOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 活跃用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppActiveUserDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppActiveUserDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppActiveUserDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppActiveUserDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppActiveUserDetailDataGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppActiveUserDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/activeUserDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
            'granularity': params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 活跃用户/新老用户趋势对比
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/activeUserNewOldTrendComparison';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 活跃用户/活跃用户趋势
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppActiveUserTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppActiveUserTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/activeUserTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
            'granularity': params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 应用摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     */
    bizOnlineOperatingIndexAppApplicationOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppApplicationOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/applicationOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 应用概况
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppApplicationsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppApplicationsGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppApplicationsGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppApplicationsGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/applications';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 渠道分析/渠道分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/channelAnalysisChannelDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 渠道分析/渠道趋势对比
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param channel channel
     */
    bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        // verify required parameter "channel" is set
        if (params.channel == null) {
            throw new Error('Missing required parameter channel when calling bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/channelAnalysisChannelTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
            channel: params.channel,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 渠道分析/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/channelAnalysisDataSummary';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 数据趋势
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppDataTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppDataTrendGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppDataTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppDataTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppDataTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/dataTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误趋势/错误分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppErrorAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppErrorAnalysisGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppErrorAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppErrorAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppErrorAnalysisGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppErrorAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/errorAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误列表
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppErrorListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppErrorListGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppErrorListGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppErrorListGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppErrorListGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/errorList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 留存用户/留存趋势图
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppKeepTrendChartGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppKeepTrendChartGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppKeepTrendChartGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppKeepTrendChartGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppKeepTrendChartGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppKeepTrendChartGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/keepTrendChart';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 流失用户/流失用户分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppLossUserAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppLossUserAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/lossUserAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
            'granularity': params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 流失用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppLossUserDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppLossUserDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppLossUserDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppLossUserDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppLossUserDetailDataGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppLossUserDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/lossUserDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
            'granularity': params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 网络和运营商/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/networkOperatorDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 网络和运营商/网络
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/networkOperatorNetWork';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 网络和运营商/运营商
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppNetworkOperatorOperatorGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNetworkOperatorOperatorGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppNetworkOperatorOperatorGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorOperatorGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNetworkOperatorOperatorGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNetworkOperatorOperatorGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/networkOperatorOperator';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 留存用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppNewKeepUserDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        }
        // verify required parameter "granularity" is set
       /*  if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppNewKeepUserDetailDataGet');
        } */
        let baseUrl = '/bizOnlineOperatingIndexApp/newKeepUserDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
            // granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增用户/新增用户分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppNewUserAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppNewUserAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/newUserAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增用户/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppNewUserDataOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNewUserDataOfGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNewUserDataOfGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNewUserDataOfGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNewUserDataOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/newUserDataOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppNewUserDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppNewUserDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppNewUserDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppNewUserDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppNewUserDetailDataGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppNewUserDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/newUserDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 中文映射
     * @param pageEnglishName pageEnglishName
     */
    bizOnlineOperatingIndexAppQueryPageNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageEnglishName" is set
        if (params.pageEnglishName == null) {
            throw new Error('Missing required parameter pageEnglishName when calling bizOnlineOperatingIndexAppQueryPageNameGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/queryPageName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageEnglishName': params.pageEnglishName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地区分析/中国地区
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppRegionalAnalysisChinalGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppRegionalAnalysisChinalGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppRegionalAnalysisChinalGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisChinalGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisChinalGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppRegionalAnalysisChinalGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/regionalAnalysisChinal';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地区分析/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/regionalAnalysisDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地区分析/全球分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/regionalAnalysisGlobalDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 回访用户/回访用户分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppReturnUserAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppReturnUserAnalysisGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppReturnUserAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppReturnUserAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppReturnUserAnalysisGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppReturnUserAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/returnUserAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 回访用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppReturnUserDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppReturnUserDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppReturnUserDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppReturnUserDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppReturnUserDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/returnUserDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 筛选条件
     * @param appkey appkey
     * @param columnName columnName
     */
    bizOnlineOperatingIndexAppScreeningConditionsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppScreeningConditionsGet');
        }
        // verify required parameter "columnName" is set
        if (params.columnName == null) {
            throw new Error('Missing required parameter columnName when calling bizOnlineOperatingIndexAppScreeningConditionsGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/screeningConditions';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'columnName': params.columnName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 沉默用户/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppSilentDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppSilentDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppSilentDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppSilentDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppSilentDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/silentDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 沉默用户/沉默与新增对比趋势图
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppSilentNewTrendComparisonGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppSilentNewTrendComparisonGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppSilentNewTrendComparisonGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppSilentNewTrendComparisonGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppSilentNewTrendComparisonGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/silentNewTrendComparison';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 沉默用户/沉默用户趋势图
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppSilentUserTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppSilentUserTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppSilentUserTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppSilentUserTrendGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppSilentUserTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/silentUserTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 终端分析/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/terminalAnalysisDataOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 终端分析/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/terminalAnalysisDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 终端分析/操作系统
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/terminalAnalysisOperatingSystem';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 终端分析/终端型号
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/terminalAnalysisTerminalType';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 终端分析/分辨率
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/terminalAnalysisiResolution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 时段分析/时段分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTimeIntervalAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTimeIntervalAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTimeIntervalAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTimeIntervalAnalysisGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTimeIntervalAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/timeIntervalAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 时段分析/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTimeIntervalDataOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTimeIntervalDataOfGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTimeIntervalDataOfGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTimeIntervalDataOfGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTimeIntervalDataOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/timeIntervalDataOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 时段分析/数据明细
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppTimeIntervalDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTimeIntervalDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTimeIntervalDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTimeIntervalDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppTimeIntervalDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/timeIntervalDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10访问页面
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopAccessPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopAccessPageGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopAccessPageGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopAccessPageGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topAccessPage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误趋势/Top10版本错误分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topAppversionErrorAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误趋势/Top10渠道错误分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topChannelErrorAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10渠道
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopChannelGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopChannelGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTopChannelGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopChannelGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopChannelGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topChannel';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10自定义事件
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopCustomEventGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopCustomEventGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopCustomEventGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopCustomEventGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topCustomEvent';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10跳出页面
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopJumpsPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopJumpsPageGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopJumpsPageGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopJumpsPageGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topJumpsPage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误趋势/Top10设备错误分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopModelErrorAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopModelErrorAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopModelErrorAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopModelErrorAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topModelErrorAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10模型
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopModelGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopModelGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTopModelGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopModelGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopModelGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topModel';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 错误趋势/Top10操作系统错误分析
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topOsversionErrorAnalysis';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary TOP10地区
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     */
    bizOnlineOperatingIndexAppTopRegionsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppTopRegionsGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppTopRegionsGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppTopRegionsGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppTopRegionsGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/topRegions';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用频率/启动次数分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUseFrequencyDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUseFrequencyDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUseFrequencyDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUseFrequencyDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUseFrequencyDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/useFrequencyDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户生命周期/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLifeCycleDataOfGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLifeCycleDataOfGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLifeCycleDataOfGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLifeCycleDataOf';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户生命周期/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLifeCycleDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLifeCycleDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLifeCycleDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLifeCycleDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户生命周期
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLifeCycleGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLifeCycleGet');
        }
        // verify required parameter "prevGroupExpression" is set
        /* 20190715 去掉，客户不需要群组
        if (params.prevGroupExpression == null) {
            throw new Error('Missing required parameter prevGroupExpression when calling bizOnlineOperatingIndexAppUserLifeCycleGet');
        }*/
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLifeCycleGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLifeCycle';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户生命周期-查询起始时间
     */
    bizOnlineOperatingIndexAppUserLifeCycleStartTimeGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLifeCycleStartTime';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/访问页面/访问页面分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyAccessPageDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/访问页面/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用时长/单次使用时长分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltySingleUseTimeDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用频率/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseFrequencyDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用频率/启动次数趋势
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param granularity granularity
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        // verify required parameter "granularity" is set
        if (params.granularity == null) {
            throw new Error('Missing required parameter granularity when calling bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseFrequency';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            index: params.index,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
            granularity: params.granularity,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用间隔/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseIntervalDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用间隔/使用间隔分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseIntervalDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用时长/明细数据
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseTimeTrendDetailData';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            'startDateStr': params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 用户忠诚度/使用时长/使用时长趋势
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/userLoyaltyUseTimeTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            index: params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 版本分析/版本趋势对比
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param index index
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     * @param version version
     */
    bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        // verify required parameter "index" is set
        if (params.index == null) {
            throw new Error('Missing required parameter index when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        // verify required parameter "version" is set
        if (params.version == null) {
            throw new Error('Missing required parameter version when calling bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/versionAnalysisBersionTrend';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            prevGroupExpression: params.prevGroupExpression,
            'index': params.index,
            'startDateStr': params.startDateStr,
            endDateStr: params.endDateStr,
            'dimension': params.dimension,
            version: params.version,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 版本分析/数据摘要
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/versionAnalysisDataSummary';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            dimension: params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 版本分析/版本分布
     * @param appkey appkey
     * @param prevGroupExpression prevGroupExpression
     * @param startDateStr startDateStr
     * @param endDateStr endDateStr
     * @param dimension dimension
     */
    bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet');
        }
        // verify required parameter "startDateStr" is set
        if (params.startDateStr == null) {
            throw new Error('Missing required parameter startDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet');
        }
        // verify required parameter "endDateStr" is set
        if (params.endDateStr == null) {
            throw new Error('Missing required parameter endDateStr when calling bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet');
        }
        // verify required parameter "dimension" is set
        if (params.dimension == null) {
            throw new Error('Missing required parameter dimension when calling bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet');
        }
        let baseUrl = '/bizOnlineOperatingIndexApp/versionAnalysisVersionDistribution';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkey: params.appkey,
            'prevGroupExpression': params.prevGroupExpression,
            startDateStr: params.startDateStr,
            'endDateStr': params.endDateStr,
            'dimension': params.dimension,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizonlineoperatingindexappcontrollerApi - functional programming interface
 */
exports.BizonlineoperatingindexappcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 访问页面/页面访问汇总
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppAccessPageSummaryGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppAccessPageSummaryGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 活跃状况
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppActiveStatusGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppActiveStatusGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 活跃用户/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppActiveUserDataOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppActiveUserDataOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 活跃用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppActiveUserDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppActiveUserDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 活跃用户/新老用户趋势对比
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppActiveUserNewOldTrendComparisonGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 活跃用户/活跃用户趋势
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppActiveUserTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppActiveUserTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 应用摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        */
        bizOnlineOperatingIndexAppApplicationOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppApplicationOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 应用概况
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppApplicationsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppApplicationsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 渠道分析/渠道分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppChannelAnalysisChannelDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 渠道分析/渠道趋势对比
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param channel channel
        */
        bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppChannelAnalysisChannelTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 渠道分析/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppChannelAnalysisDataSummaryGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 数据趋势
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppDataTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppDataTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误趋势/错误分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppErrorAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppErrorAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误列表
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppErrorListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppErrorListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 留存用户/留存趋势图
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppKeepTrendChartGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppKeepTrendChartGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 流失用户/流失用户分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppLossUserAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppLossUserAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 流失用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppLossUserDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppLossUserDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 网络和运营商/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNetworkOperatorDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 网络和运营商/网络
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNetworkOperatorNetWorkGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 网络和运营商/运营商
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppNetworkOperatorOperatorGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNetworkOperatorOperatorGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 留存用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppNewKeepUserDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNewKeepUserDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增用户/新增用户分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppNewUserAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNewUserAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增用户/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppNewUserDataOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNewUserDataOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppNewUserDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppNewUserDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 中文映射
        * @param pageEnglishName pageEnglishName
        */
        bizOnlineOperatingIndexAppQueryPageNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppQueryPageNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地区分析/中国地区
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppRegionalAnalysisChinalGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppRegionalAnalysisChinalGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地区分析/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppRegionalAnalysisDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地区分析/全球分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppRegionalAnalysisGlobalDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 回访用户/回访用户分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppReturnUserAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppReturnUserAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 回访用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppReturnUserDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppReturnUserDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 筛选条件
        * @param appkey appkey
        * @param columnName columnName
        */
        bizOnlineOperatingIndexAppScreeningConditionsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppScreeningConditionsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 沉默用户/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppSilentDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppSilentDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 沉默用户/沉默与新增对比趋势图
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppSilentNewTrendComparisonGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppSilentNewTrendComparisonGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 沉默用户/沉默用户趋势图
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppSilentUserTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppSilentUserTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 终端分析/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTerminalAnalysisDataOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 终端分析/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTerminalAnalysisDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 终端分析/操作系统
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTerminalAnalysisOperatingSystemGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 终端分析/终端型号
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTerminalAnalysisTerminalTypeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 终端分析/分辨率
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTerminalAnalysisiResolutionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 时段分析/时段分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTimeIntervalAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTimeIntervalAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 时段分析/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTimeIntervalDataOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTimeIntervalDataOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 时段分析/数据明细
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppTimeIntervalDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTimeIntervalDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10访问页面
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopAccessPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopAccessPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误趋势/Top10版本错误分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopAppversionErrorAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误趋势/Top10渠道错误分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopChannelErrorAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10渠道
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopChannelGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopChannelGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10自定义事件
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopCustomEventGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopCustomEventGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10跳出页面
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopJumpsPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopJumpsPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误趋势/Top10设备错误分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopModelErrorAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopModelErrorAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10模型
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopModelGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopModelGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 错误趋势/Top10操作系统错误分析
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopOsversionErrorAnalysisGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary TOP10地区
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        */
        bizOnlineOperatingIndexAppTopRegionsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppTopRegionsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用频率/启动次数分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUseFrequencyDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUseFrequencyDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户生命周期/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLifeCycleDataOfGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLifeCycleDataOfGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户生命周期/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLifeCycleDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLifeCycleDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户生命周期
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLifeCycleGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLifeCycleGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户生命周期-查询起始时间
        */
        bizOnlineOperatingIndexAppUserLifeCycleStartTimeGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLifeCycleStartTimeGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/访问页面/访问页面分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyAccessPageDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/访问页面/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用时长/单次使用时长分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltySingleUseTimeDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用频率/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用频率/启动次数趋势
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param granularity granularity
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseFrequencyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用间隔/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用间隔/使用间隔分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseIntervalDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用时长/明细数据
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendDetailDataGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 用户忠诚度/使用时长/使用时长趋势
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppUserLoyaltyUseTimeTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 版本分析/版本趋势对比
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param index index
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        * @param version version
        */
        bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppVersionAnalysisBersionTrendGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 版本分析/数据摘要
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppVersionAnalysisDataSummaryGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 版本分析/版本分布
        * @param appkey appkey
        * @param prevGroupExpression prevGroupExpression
        * @param startDateStr startDateStr
        * @param endDateStr endDateStr
        * @param dimension dimension
        */
        bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizonlineoperatingindexappcontrollerApiFetchParamCreator.bizOnlineOperatingIndexAppVersionAnalysisVersionDistributionGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizoperlogcontrollerApi - fetch parameter creator
 */
exports.BizoperlogcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 分页查询用户操作日志
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param startDate startDate
     * @param endDate endDate
     */
    bizOperLogOperLogPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizOperLogOperLogPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizOperLogOperLogPageGet');
        }
        let baseUrl = '/bizOperLog/operLogPage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            pageSize: params.pageSize,
            startDate: params.startDate,
            'endDate': params.endDate,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizoperlogcontrollerApi - functional programming interface
 */
exports.BizoperlogcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 分页查询用户操作日志
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param startDate startDate
        * @param endDate endDate
        */
        bizOperLogOperLogPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizoperlogcontrollerApiFetchParamCreator.bizOperLogOperLogPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizperrecomalgorithmcontrollerApi - fetch parameter creator
 */
exports.BizperrecomalgorithmcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询算法名称是否存在
     * @param algorithmName algorithmName
     */
    bizPerRecomAlgorithmCheckAlgorithmNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "algorithmName" is set
        if (params.algorithmName == null) {
            throw new Error('Missing required parameter algorithmName when calling bizPerRecomAlgorithmCheckAlgorithmNameGet');
        }
        let baseUrl = '/bizPerRecomAlgorithm/checkAlgorithmName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            algorithmName: params.algorithmName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除个性化推荐算法配置
     * @param id id
     */
    bizPerRecomAlgorithmDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPerRecomAlgorithmDelIdDelete');
        }
        let baseUrl = '/bizPerRecomAlgorithm/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐算法实例配置
     */
    bizPerRecomAlgorithmQueryRecomAlgorithmListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPerRecomAlgorithm/queryRecomAlgorithmList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存个性化推荐算法配置
     * @param bizPerRecomAlgorithmInfo bizPerRecomAlgorithmInfo
     */
    bizPerRecomAlgorithmSavePerRecomAlgorithmPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomAlgorithmInfo" is set
        if (params.bizPerRecomAlgorithmInfo == null) {
            throw new Error('Missing required parameter bizPerRecomAlgorithmInfo when calling bizPerRecomAlgorithmSavePerRecomAlgorithmPost');
        }
        let baseUrl = '/bizPerRecomAlgorithm/savePerRecomAlgorithm';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomAlgorithmInfo) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomAlgorithmInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizperrecomalgorithmcontrollerApi - functional programming interface
 */
exports.BizperrecomalgorithmcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询算法名称是否存在
        * @param algorithmName algorithmName
        */
        bizPerRecomAlgorithmCheckAlgorithmNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomalgorithmcontrollerApiFetchParamCreator.bizPerRecomAlgorithmCheckAlgorithmNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除个性化推荐算法配置
        * @param id id
        */
        bizPerRecomAlgorithmDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomalgorithmcontrollerApiFetchParamCreator.bizPerRecomAlgorithmDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐算法实例配置
        */
        bizPerRecomAlgorithmQueryRecomAlgorithmListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomalgorithmcontrollerApiFetchParamCreator.bizPerRecomAlgorithmQueryRecomAlgorithmListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存个性化推荐算法配置
        * @param bizPerRecomAlgorithmInfo bizPerRecomAlgorithmInfo
        */
        bizPerRecomAlgorithmSavePerRecomAlgorithmPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomalgorithmcontrollerApiFetchParamCreator.bizPerRecomAlgorithmSavePerRecomAlgorithmPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizperrecomcontrollerApi - fetch parameter creator
 */
exports.BizperrecomcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 推荐列表导出功能
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param startTime startTime
     * @param endTime endTime
     * @param header header
     * @param fieldId fieldId
     * @param appKey appKey
     * @param siteId siteId
     */
    bizPerRecomExportGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizPerRecomExportGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizPerRecomExportGet');
        }
        // verify required parameter "startTime" is set
        if (params.startTime == null) {
            throw new Error('Missing required parameter startTime when calling bizPerRecomExportGet');
        }
        // verify required parameter "endTime" is set
        if (params.endTime == null) {
            throw new Error('Missing required parameter endTime when calling bizPerRecomExportGet');
        }
        // verify required parameter "header" is set
        if (params.header == null) {
            throw new Error('Missing required parameter header when calling bizPerRecomExportGet');
        }
        let baseUrl = '/bizPerRecom/export';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            pageSize: params.pageSize,
            'fieldId': params.fieldId,
            'appKey': params.appKey,
            'siteId': params.siteId,
            'startTime': params.startTime,
            endTime: params.endTime,
            header: params.header,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据fieldId查询策略内容
     * @param fieldId fieldId
     */
    bizPerRecomFindByFieldIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling bizPerRecomFindByFieldIdGet');
        }
        let baseUrl = '/bizPerRecom/findByFieldId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fieldId': params.fieldId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询策略,根据时间、站点、栏位
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param startTime startTime
     * @param endTime endTime
     * @param dataIndex dataIndex
     * @param fieldId fieldId
     * @param appKey appKey
     * @param siteId siteId
     */
    bizPerRecomPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizPerRecomPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizPerRecomPageGet');
        }
        // verify required parameter "startTime" is set
        if (params.startTime == null) {
            throw new Error('Missing required parameter startTime when calling bizPerRecomPageGet');
        }
        // verify required parameter "endTime" is set
        if (params.endTime == null) {
            throw new Error('Missing required parameter endTime when calling bizPerRecomPageGet');
        }
        // verify required parameter "dataIndex" is set
        if (params.dataIndex == null) {
            throw new Error('Missing required parameter dataIndex when calling bizPerRecomPageGet');
        }
        let baseUrl = '/bizPerRecom/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            pageSize: params.pageSize,
            fieldId: params.fieldId,
            appKey: params.appKey,
            siteId: params.siteId,
            'startTime': params.startTime,
            'endTime': params.endTime,
            'dataIndex': params.dataIndex,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取推荐规则的列表
     */
    bizPerRecomRuleListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPerRecom/rule/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 个性化推荐的最终的策略保存接口
     * @param policyReq policyReq
     */
    bizPerRecomSavePolicyPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "policyReq" is set
        if (params.policyReq == null) {
            throw new Error('Missing required parameter policyReq when calling bizPerRecomSavePolicyPost');
        }
        let baseUrl = '/bizPerRecom/save/policy';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.policyReq) {
            fetchOptions.body = JSON.stringify(params.policyReq || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 栏位规则名称优先推荐的配置接口
     * @param bizRecRuleParam bizRecRuleParam
     */
    bizPerRecomSaveRecContextPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizRecRuleParam" is set
        if (params.bizRecRuleParam == null) {
            throw new Error('Missing required parameter bizRecRuleParam when calling bizPerRecomSaveRecContextPost');
        }
        let baseUrl = '/bizPerRecom/save/rec/context';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizRecRuleParam) {
            fetchOptions.body = JSON.stringify(params.bizRecRuleParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary test
     * @param bid bid
     * @param appkey appkey
     * @param gid gid
     * @param fmt fmt
     */
    bizPerRecomTestGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bid" is set
        if (params.bid == null) {
            throw new Error('Missing required parameter bid when calling bizPerRecomTestGet');
        }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling bizPerRecomTestGet');
        }
        // verify required parameter "gid" is set
        if (params.gid == null) {
            throw new Error('Missing required parameter gid when calling bizPerRecomTestGet');
        }
        // verify required parameter "fmt" is set
        if (params.fmt == null) {
            throw new Error('Missing required parameter fmt when calling bizPerRecomTestGet');
        }
        let baseUrl = '/bizPerRecom/test';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'bid': params.bid,
            'appkey': params.appkey,
            'gid': params.gid,
            fmt: params.fmt,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看趋势图
     * @param policyId policyId
     * @param startTime startTime
     * @param endTime endTime
     * @param columns columns
     */
    bizPerRecomTrendsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "policyId" is set
        if (params.policyId == null) {
            throw new Error('Missing required parameter policyId when calling bizPerRecomTrendsGet');
        }
        // verify required parameter "startTime" is set
        if (params.startTime == null) {
            throw new Error('Missing required parameter startTime when calling bizPerRecomTrendsGet');
        }
        // verify required parameter "endTime" is set
        if (params.endTime == null) {
            throw new Error('Missing required parameter endTime when calling bizPerRecomTrendsGet');
        }
        // verify required parameter "columns" is set
        if (params.columns == null) {
            throw new Error('Missing required parameter columns when calling bizPerRecomTrendsGet');
        }
        let baseUrl = '/bizPerRecom/trends';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'policyId': params.policyId,
            'startTime': params.startTime,
            'endTime': params.endTime,
            columns: params.columns,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizperrecomcontrollerApi - functional programming interface
 */
exports.BizperrecomcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 推荐列表导出功能
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param startTime startTime
        * @param endTime endTime
        * @param header header
        * @param fieldId fieldId
        * @param appKey appKey
        * @param siteId siteId
        */
        bizPerRecomExportGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomExportGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据fieldId查询策略内容
        * @param fieldId fieldId
        */
        bizPerRecomFindByFieldIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomFindByFieldIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询策略,根据时间、站点、栏位
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param startTime startTime
        * @param endTime endTime
        * @param dataIndex dataIndex
        * @param fieldId fieldId
        * @param appKey appKey
        * @param siteId siteId
        */
        bizPerRecomPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取推荐规则的列表
        */
        bizPerRecomRuleListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomRuleListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 个性化推荐的最终的策略保存接口
        * @param policyReq policyReq
        */
        bizPerRecomSavePolicyPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomSavePolicyPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 栏位规则名称优先推荐的配置接口
        * @param bizRecRuleParam bizRecRuleParam
        */
        bizPerRecomSaveRecContextPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomSaveRecContextPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary test
        * @param bid bid
        * @param appkey appkey
        * @param gid gid
        * @param fmt fmt
        */
        bizPerRecomTestGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomTestGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看趋势图
        * @param policyId policyId
        * @param startTime startTime
        * @param endTime endTime
        * @param columns columns
        */
        bizPerRecomTrendsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomcontrollerApiFetchParamCreator.bizPerRecomTrendsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizperrecomstrategytemplatecontrollerApi - fetch parameter creator
 */
exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入个性化推荐策略模板
     * @param bizPerRecomStrategyTemplatePO bizPerRecomStrategyTemplatePO
     */
    bizPerRecomStrategyTemplateAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomStrategyTemplatePO" is set
        if (params.bizPerRecomStrategyTemplatePO == null) {
            throw new Error('Missing required parameter bizPerRecomStrategyTemplatePO when calling bizPerRecomStrategyTemplateAddPost');
        }
        let baseUrl = '/bizPerRecomStrategyTemplate/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomStrategyTemplatePO) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomStrategyTemplatePO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除个性化推荐策略模板
     * @param id id
     */
    bizPerRecomStrategyTemplateDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPerRecomStrategyTemplateDelIdDelete');
        }
        let baseUrl = '/bizPerRecomStrategyTemplate/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询个性化推荐策略模板
     * @param id id
     */
    bizPerRecomStrategyTemplateInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPerRecomStrategyTemplateInfoIdGet');
        }
        let baseUrl = '/bizPerRecomStrategyTemplate/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐策略模板列表
     */
    bizPerRecomStrategyTemplateListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPerRecomStrategyTemplate/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询个性化推荐策略模板
     */
    bizPerRecomStrategyTemplatePageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPerRecomStrategyTemplate/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新个性化推荐策略模板
     * @param bizPerRecomStrategyTemplatePO bizPerRecomStrategyTemplatePO
     */
    bizPerRecomStrategyTemplateUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomStrategyTemplatePO" is set
        if (params.bizPerRecomStrategyTemplatePO == null) {
            throw new Error('Missing required parameter bizPerRecomStrategyTemplatePO when calling bizPerRecomStrategyTemplateUpdatePut');
        }
        let baseUrl = '/bizPerRecomStrategyTemplate/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomStrategyTemplatePO) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomStrategyTemplatePO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizperrecomstrategytemplatecontrollerApi - functional programming interface
 */
exports.BizperrecomstrategytemplatecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入个性化推荐策略模板
        * @param bizPerRecomStrategyTemplatePO bizPerRecomStrategyTemplatePO
        */
        bizPerRecomStrategyTemplateAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplateAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除个性化推荐策略模板
        * @param id id
        */
        bizPerRecomStrategyTemplateDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplateDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询个性化推荐策略模板
        * @param id id
        */
        bizPerRecomStrategyTemplateInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplateInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐策略模板列表
        */
        bizPerRecomStrategyTemplateListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplateListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询个性化推荐策略模板
        */
        bizPerRecomStrategyTemplatePageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplatePageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新个性化推荐策略模板
        * @param bizPerRecomStrategyTemplatePO bizPerRecomStrategyTemplatePO
        */
        bizPerRecomStrategyTemplateUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomstrategytemplatecontrollerApiFetchParamCreator.bizPerRecomStrategyTemplateUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizperrecomupdaterecordcontrollerApi - fetch parameter creator
 */
exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入个性化推荐修改历史
     * @param bizPerRecomUpdateRecordPO bizPerRecomUpdateRecordPO
     */
    bizPerRecomUpdateRecordAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomUpdateRecordPO" is set
        if (params.bizPerRecomUpdateRecordPO == null) {
            throw new Error('Missing required parameter bizPerRecomUpdateRecordPO when calling bizPerRecomUpdateRecordAddPost');
        }
        let baseUrl = '/bizPerRecomUpdateRecord/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomUpdateRecordPO) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomUpdateRecordPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除个性化推荐修改历史
     * @param id id
     */
    bizPerRecomUpdateRecordDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPerRecomUpdateRecordDelIdDelete');
        }
        let baseUrl = '/bizPerRecomUpdateRecord/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询个性化推荐修改历史
     * @param id id
     */
    bizPerRecomUpdateRecordInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPerRecomUpdateRecordInfoIdGet');
        }
        let baseUrl = '/bizPerRecomUpdateRecord/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐修改记录列表
     */
    bizPerRecomUpdateRecordListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPerRecomUpdateRecord/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询个性化推荐修改历史
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param fieldId fieldId
     * @param policyId policyId
     * @param startTime startTime
     * @param endTime endTime
     */
    bizPerRecomUpdateRecordPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizPerRecomUpdateRecordPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizPerRecomUpdateRecordPageGet');
        }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling bizPerRecomUpdateRecordPageGet');
        }
        // verify required parameter "policyId" is set
        if (params.policyId == null) {
            throw new Error('Missing required parameter policyId when calling bizPerRecomUpdateRecordPageGet');
        }
        // verify required parameter "startTime" is set
        if (params.startTime == null) {
            throw new Error('Missing required parameter startTime when calling bizPerRecomUpdateRecordPageGet');
        }
        // verify required parameter "endTime" is set
        if (params.endTime == null) {
            throw new Error('Missing required parameter endTime when calling bizPerRecomUpdateRecordPageGet');
        }
        let baseUrl = '/bizPerRecomUpdateRecord/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
            fieldId: params.fieldId,
            'policyId': params.policyId,
            'startTime': params.startTime,
            'endTime': params.endTime,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新个性化推荐历史记录
     * @param bizPerRecomUpdateRecordPO bizPerRecomUpdateRecordPO
     */
    bizPerRecomUpdateRecordUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomUpdateRecordPO" is set
        if (params.bizPerRecomUpdateRecordPO == null) {
            throw new Error('Missing required parameter bizPerRecomUpdateRecordPO when calling bizPerRecomUpdateRecordUpdatePut');
        }
        let baseUrl = '/bizPerRecomUpdateRecord/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomUpdateRecordPO) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomUpdateRecordPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizperrecomupdaterecordcontrollerApi - functional programming interface
 */
exports.BizperrecomupdaterecordcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入个性化推荐修改历史
        * @param bizPerRecomUpdateRecordPO bizPerRecomUpdateRecordPO
        */
        bizPerRecomUpdateRecordAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除个性化推荐修改历史
        * @param id id
        */
        bizPerRecomUpdateRecordDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询个性化推荐修改历史
        * @param id id
        */
        bizPerRecomUpdateRecordInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐修改记录列表
        */
        bizPerRecomUpdateRecordListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询个性化推荐修改历史
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param fieldId fieldId
        * @param policyId policyId
        * @param startTime startTime
        * @param endTime endTime
        */
        bizPerRecomUpdateRecordPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新个性化推荐历史记录
        * @param bizPerRecomUpdateRecordPO bizPerRecomUpdateRecordPO
        */
        bizPerRecomUpdateRecordUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizperrecomupdaterecordcontrollerApiFetchParamCreator.bizPerRecomUpdateRecordUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizpersonalrecommendcontrollerApi - fetch parameter creator
 */
exports.BizpersonalrecommendcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入个性化推荐
     * @param bizPersonalRecommendPO bizPersonalRecommendPO
     */
    bizPersonalRecommendAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPersonalRecommendPO" is set
        if (params.bizPersonalRecommendPO == null) {
            throw new Error('Missing required parameter bizPersonalRecommendPO when calling bizPersonalRecommendAddPost');
        }
        let baseUrl = '/bizPersonalRecommend/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPersonalRecommendPO) {
            fetchOptions.body = JSON.stringify(params.bizPersonalRecommendPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除个性化推荐
     * @param id id
     */
    bizPersonalRecommendDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPersonalRecommendDelIdDelete');
        }
        let baseUrl = '/bizPersonalRecommend/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询个性化推荐
     * @param id id
     */
    bizPersonalRecommendInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizPersonalRecommendInfoIdGet');
        }
        let baseUrl = '/bizPersonalRecommend/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐列表
     */
    bizPersonalRecommendListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPersonalRecommend/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询个性化推荐
     */
    bizPersonalRecommendPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizPersonalRecommend/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新个性化推荐
     * @param bizPersonalRecommendPO bizPersonalRecommendPO
     */
    bizPersonalRecommendUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPersonalRecommendPO" is set
        if (params.bizPersonalRecommendPO == null) {
            throw new Error('Missing required parameter bizPersonalRecommendPO when calling bizPersonalRecommendUpdatePut');
        }
        let baseUrl = '/bizPersonalRecommend/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPersonalRecommendPO) {
            fetchOptions.body = JSON.stringify(params.bizPersonalRecommendPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizpersonalrecommendcontrollerApi - functional programming interface
 */
exports.BizpersonalrecommendcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入个性化推荐
        * @param bizPersonalRecommendPO bizPersonalRecommendPO
        */
        bizPersonalRecommendAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除个性化推荐
        * @param id id
        */
        bizPersonalRecommendDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询个性化推荐
        * @param id id
        */
        bizPersonalRecommendInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐列表
        */
        bizPersonalRecommendListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询个性化推荐
        */
        bizPersonalRecommendPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新个性化推荐
        * @param bizPersonalRecommendPO bizPersonalRecommendPO
        */
        bizPersonalRecommendUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizpersonalrecommendcontrollerApiFetchParamCreator.bizPersonalRecommendUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizrecompolicycontrollerApi - fetch parameter creator
 */
exports.BizrecompolicycontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入推荐的策略
     * @param bizRecomPolicyPO bizRecomPolicyPO
     */
    bizRecomPolicyAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizRecomPolicyPO" is set
        if (params.bizRecomPolicyPO == null) {
            throw new Error('Missing required parameter bizRecomPolicyPO when calling bizRecomPolicyAddPost');
        }
        let baseUrl = '/bizRecomPolicy/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizRecomPolicyPO) {
            fetchOptions.body = JSON.stringify(params.bizRecomPolicyPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除推荐的策略
     * @param id id
     */
    bizRecomPolicyDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizRecomPolicyDelIdDelete');
        }
        let baseUrl = '/bizRecomPolicy/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询推荐的策略
     * @param id id
     */
    bizRecomPolicyInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizRecomPolicyInfoIdGet');
        }
        let baseUrl = '/bizRecomPolicy/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询推荐的策略列表
     */
    bizRecomPolicyListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizRecomPolicy/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询推荐的策略
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizRecomPolicyPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizRecomPolicyPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizRecomPolicyPageGet');
        }
        let baseUrl = '/bizRecomPolicy/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 策略的保存接口，不区分新增和修改
     * @param recPolicyParam recPolicyParam
     */
    bizRecomPolicySavePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "recPolicyParam" is set
        if (params.recPolicyParam == null) {
            throw new Error('Missing required parameter recPolicyParam when calling bizRecomPolicySavePost');
        }
        let baseUrl = '/bizRecomPolicy/save';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.recPolicyParam) {
            fetchOptions.body = JSON.stringify(params.recPolicyParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新推荐的策略
     * @param bizRecomPolicyPO bizRecomPolicyPO
     */
    bizRecomPolicyUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizRecomPolicyPO" is set
        if (params.bizRecomPolicyPO == null) {
            throw new Error('Missing required parameter bizRecomPolicyPO when calling bizRecomPolicyUpdatePut');
        }
        let baseUrl = '/bizRecomPolicy/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizRecomPolicyPO) {
            fetchOptions.body = JSON.stringify(params.bizRecomPolicyPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizrecompolicycontrollerApi - functional programming interface
 */
exports.BizrecompolicycontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入推荐的策略
        * @param bizRecomPolicyPO bizRecomPolicyPO
        */
        bizRecomPolicyAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除推荐的策略
        * @param id id
        */
        bizRecomPolicyDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询推荐的策略
        * @param id id
        */
        bizRecomPolicyInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询推荐的策略列表
        */
        bizRecomPolicyListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询推荐的策略
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizRecomPolicyPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 策略的保存接口，不区分新增和修改
        * @param recPolicyParam recPolicyParam
        */
        bizRecomPolicySavePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicySavePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新推荐的策略
        * @param bizRecomPolicyPO bizRecomPolicyPO
        */
        bizRecomPolicyUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizrecompolicycontrollerApiFetchParamCreator.bizRecomPolicyUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizreportcontrollerApi - fetch parameter creator
 */
exports.BizreportcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询在线事件报表
     * @param bizReportParam bizReportParam
     */
    bizPerRecomEventPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizReportParam" is set
        if (params.bizReportParam == null) {
            throw new Error('Missing required parameter bizReportParam when calling bizPerRecomEventPost');
        }
        let baseUrl = '/bizPerRecom/event';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizReportParam) {
            fetchOptions.body = JSON.stringify(params.bizReportParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 在线事件报表--查看维度
     * @param eventId 事件ID
     * @param eventType 事件类型
     */
    bizPerRecomGetViewDimensionPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "eventId" is set
        if (params.eventId == null) {
            throw new Error('Missing required parameter eventId when calling bizPerRecomGetViewDimensionPost');
        }
        let baseUrl = '/bizPerRecom/getViewDimension';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            eventId: params.eventId,
            eventType: params.eventType,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存在线事件报表用户群
     * @param bizReportSaveReportGroupParam bizReportSaveReportGroupParam
     */
    bizPerRecomSaveReportGroupPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizReportSaveReportGroupParam" is set
        if (params.bizReportSaveReportGroupParam == null) {
            throw new Error('Missing required parameter bizReportSaveReportGroupParam when calling bizPerRecomSaveReportGroupPost');
        }
        let baseUrl = '/bizPerRecom/saveReportGroup';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizReportSaveReportGroupParam) {
            fetchOptions.body = JSON.stringify(params.bizReportSaveReportGroupParam || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 在线事件报表标签详情列表
     * @param reportExpression reportExpression
     * @param entityId 实体id
     * @param columnNames columnNames
     */
    bizPerRecomTagDetailPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "reportExpression" is set
        if (params.reportExpression == null) {
            throw new Error('Missing required parameter reportExpression when calling bizPerRecomTagDetailPost');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizPerRecomTagDetailPost');
        }
        let baseUrl = '/bizPerRecom/tagDetail';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            columnNames: params.columnNames,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.reportExpression) {
            fetchOptions.body = JSON.stringify(params.reportExpression || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 在线事件报表标签分布
     * @param reportExpression reportExpression
     * @param tagEnglishName tagEnglishName
     */
    bizPerRecomTagDistributePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "reportExpression" is set
        if (params.reportExpression == null) {
            throw new Error('Missing required parameter reportExpression when calling bizPerRecomTagDistributePost');
        }
        let baseUrl = '/bizPerRecom/tagDistribute';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'tagEnglishName': params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.reportExpression) {
            fetchOptions.body = JSON.stringify(params.reportExpression || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 在线事件报表标签特征
     * @param reportExpression reportExpression
     */
    bizPerRecomTagFeaturePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "reportExpression" is set
        if (params.reportExpression == null) {
            throw new Error('Missing required parameter reportExpression when calling bizPerRecomTagFeaturePost');
        }
        let baseUrl = '/bizPerRecom/tagFeature';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.reportExpression) {
            fetchOptions.body = JSON.stringify(params.reportExpression || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizreportcontrollerApi - functional programming interface
 */
exports.BizreportcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询在线事件报表
        * @param bizReportParam bizReportParam
        */
        bizPerRecomEventPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomEventPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 在线事件报表--查看维度
        * @param eventId 事件ID
        * @param eventType 事件类型
        */
        bizPerRecomGetViewDimensionPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomGetViewDimensionPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存在线事件报表用户群
        * @param bizReportSaveReportGroupParam bizReportSaveReportGroupParam
        */
        bizPerRecomSaveReportGroupPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomSaveReportGroupPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 在线事件报表标签详情列表
        * @param reportExpression reportExpression
        * @param entityId 实体id
        * @param columnNames columnNames
        */
        bizPerRecomTagDetailPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomTagDetailPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 在线事件报表标签分布
        * @param reportExpression reportExpression
        * @param tagEnglishName tagEnglishName
        */
        bizPerRecomTagDistributePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomTagDistributePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 在线事件报表标签特征
        * @param reportExpression reportExpression
        */
        bizPerRecomTagFeaturePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizreportcontrollerApiFetchParamCreator.bizPerRecomTagFeaturePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizstrategymarketingcontrollerApi - fetch parameter creator
 */
exports.BizstrategymarketingcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入策略营销
     * @param param param
     */
    bizStrategyMarketingAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "param" is set
        if (params.param == null) {
            throw new Error('Missing required parameter param when calling bizStrategyMarketingAddPost');
        }
        let baseUrl = '/bizStrategyMarketing/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.param) {
            fetchOptions.body = JSON.stringify(params.param || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除策略营销
     * @param id id
     */
    bizStrategyMarketingDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizStrategyMarketingDelIdDelete');
        }
        let baseUrl = '/bizStrategyMarketing/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 申请下载
     * @param id id
     */
    bizStrategyMarketingDownloadIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizStrategyMarketingDownloadIdGet');
        }
        let baseUrl = '/bizStrategyMarketing/download/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取生成推荐名单的列头
     * @param fromGroupId fromGroupId
     * @param toGroupId toGroupId
     * @param fieldId fieldId
     */
    bizStrategyMarketingGetColumnsGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fromGroupId" is set
        if (params.fromGroupId == null) {
            throw new Error('Missing required parameter fromGroupId when calling bizStrategyMarketingGetColumnsGet');
        }
        let baseUrl = '/bizStrategyMarketing/getColumns';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            fromGroupId: params.fromGroupId,
            'toGroupId': params.toGroupId,
            'fieldId': params.fieldId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取推送对象
     */
    bizStrategyMarketingGetPushGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizStrategyMarketing/get/push';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看某个id在策略营销中是否是用到的
     * @param groupId groupId
     */
    bizStrategyMarketingHasGroupGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizStrategyMarketingHasGroupGet');
        }
        let baseUrl = '/bizStrategyMarketing/has/group';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'groupId': params.groupId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询策略营销
     * @param id id
     */
    bizStrategyMarketingInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizStrategyMarketingInfoIdGet');
        }
        let baseUrl = '/bizStrategyMarketing/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询策略营销列表
     */
    bizStrategyMarketingListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizStrategyMarketing/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询策略营销
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizStrategyMarketingPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizStrategyMarketingPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizStrategyMarketingPageGet');
        }
        let baseUrl = '/bizStrategyMarketing/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            pageSize: params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 推送对象
     * @param pushObject pushObject
     */
    bizStrategyMarketingPushPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pushObject" is set
        if (params.pushObject == null) {
            throw new Error('Missing required parameter pushObject when calling bizStrategyMarketingPushPost');
        }
        let baseUrl = '/bizStrategyMarketing/push';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.pushObject) {
            fetchOptions.body = JSON.stringify(params.pushObject || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id字符串获取策略营销对象
     * @param ids ids
     */
    bizStrategyMarketingQueryIdsPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "ids" is set
        if (params.ids == null) {
            throw new Error('Missing required parameter ids when calling bizStrategyMarketingQueryIdsPost');
        }
        let baseUrl = '/bizStrategyMarketing/query/ids';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.ids) {
            fetchOptions.body = JSON.stringify(params.ids || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 生成推荐名单
     * @param rec rec
     */
    bizStrategyMarketingRecPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "rec" is set
        if (params.rec == null) {
            throw new Error('Missing required parameter rec when calling bizStrategyMarketingRecPost');
        }
        let baseUrl = '/bizStrategyMarketing/rec';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.rec) {
            fetchOptions.body = JSON.stringify(params.rec || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新策略营销
     * @param param param
     */
    bizStrategyMarketingUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "param" is set
        if (params.param == null) {
            throw new Error('Missing required parameter param when calling bizStrategyMarketingUpdatePut');
        }
        let baseUrl = '/bizStrategyMarketing/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.param) {
            fetchOptions.body = JSON.stringify(params.param || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizstrategymarketingcontrollerApi - functional programming interface
 */
exports.BizstrategymarketingcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入策略营销
        * @param param param
        */
        bizStrategyMarketingAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除策略营销
        * @param id id
        */
        bizStrategyMarketingDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 申请下载
        * @param id id
        */
        bizStrategyMarketingDownloadIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingDownloadIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取生成推荐名单的列头
        * @param fromGroupId fromGroupId
        * @param toGroupId toGroupId
        * @param fieldId fieldId
        */
        bizStrategyMarketingGetColumnsGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingGetColumnsGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取推送对象
        */
        bizStrategyMarketingGetPushGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingGetPushGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看某个id在策略营销中是否是用到的
        * @param groupId groupId
        */
        bizStrategyMarketingHasGroupGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingHasGroupGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询策略营销
        * @param id id
        */
        bizStrategyMarketingInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询策略营销列表
        */
        bizStrategyMarketingListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询策略营销
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizStrategyMarketingPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 推送对象
        * @param pushObject pushObject
        */
        bizStrategyMarketingPushPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingPushPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id字符串获取策略营销对象
        * @param ids ids
        */
        bizStrategyMarketingQueryIdsPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingQueryIdsPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 生成推荐名单
        * @param rec rec
        */
        bizStrategyMarketingRecPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingRecPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新策略营销
        * @param param param
        */
        bizStrategyMarketingUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingcontrollerApiFetchParamCreator.bizStrategyMarketingUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BizstrategymarketingforreccontrollerApi - fetch parameter creator
 */
exports.BizstrategymarketingforreccontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入推荐的策略营销
     * @param bizStrategyMarketingForRecPO bizStrategyMarketingForRecPO
     */
    bizStrategyMarketingForRecAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizStrategyMarketingForRecPO" is set
        if (params.bizStrategyMarketingForRecPO == null) {
            throw new Error('Missing required parameter bizStrategyMarketingForRecPO when calling bizStrategyMarketingForRecAddPost');
        }
        let baseUrl = '/bizStrategyMarketingForRec/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizStrategyMarketingForRecPO) {
            fetchOptions.body = JSON.stringify(params.bizStrategyMarketingForRecPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除推荐的策略营销
     * @param id id
     */
    bizStrategyMarketingForRecDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizStrategyMarketingForRecDelIdDelete');
        }
        let baseUrl = '/bizStrategyMarketingForRec/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看某个id在策略营销中是否是用到的
     * @param groupId groupId
     */
    bizStrategyMarketingForRecHasGroupGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "groupId" is set
        if (params.groupId == null) {
            throw new Error('Missing required parameter groupId when calling bizStrategyMarketingForRecHasGroupGet');
        }
        let baseUrl = '/bizStrategyMarketingForRec/has/group';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'groupId': params.groupId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询推荐的策略营销
     * @param id id
     */
    bizStrategyMarketingForRecInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizStrategyMarketingForRecInfoIdGet');
        }
        let baseUrl = '/bizStrategyMarketingForRec/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查找已经推送到个性化推荐的策略营销
     * @param ids ids
     */
    bizStrategyMarketingForRecIsExistGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "ids" is set
        if (params.ids == null) {
            throw new Error('Missing required parameter ids when calling bizStrategyMarketingForRecIsExistGet');
        }
        let baseUrl = '/bizStrategyMarketingForRec/isExist';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'ids': params.ids,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询推荐的策略营销列表
     */
    bizStrategyMarketingForRecListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizStrategyMarketingForRec/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询推荐的策略营销
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    bizStrategyMarketingForRecPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizStrategyMarketingForRecPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizStrategyMarketingForRecPageGet');
        }
        let baseUrl = '/bizStrategyMarketingForRec/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            pageSize: params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据实体id查询用到这个实体的策略营销
     * @param entityId entityId
     */
    bizStrategyMarketingForRecQueryForRecGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizStrategyMarketingForRecQueryForRecGet');
        }
        let baseUrl = '/bizStrategyMarketingForRec/queryForRec';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新推荐的策略营销
     * @param bizStrategyMarketingForRecPO bizStrategyMarketingForRecPO
     */
    bizStrategyMarketingForRecUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizStrategyMarketingForRecPO" is set
        if (params.bizStrategyMarketingForRecPO == null) {
            throw new Error('Missing required parameter bizStrategyMarketingForRecPO when calling bizStrategyMarketingForRecUpdatePut');
        }
        let baseUrl = '/bizStrategyMarketingForRec/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizStrategyMarketingForRecPO) {
            fetchOptions.body = JSON.stringify(params.bizStrategyMarketingForRecPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BizstrategymarketingforreccontrollerApi - functional programming interface
 */
exports.BizstrategymarketingforreccontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入推荐的策略营销
        * @param bizStrategyMarketingForRecPO bizStrategyMarketingForRecPO
        */
        bizStrategyMarketingForRecAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除推荐的策略营销
        * @param id id
        */
        bizStrategyMarketingForRecDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看某个id在策略营销中是否是用到的
        * @param groupId groupId
        */
        bizStrategyMarketingForRecHasGroupGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecHasGroupGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询推荐的策略营销
        * @param id id
        */
        bizStrategyMarketingForRecInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查找已经推送到个性化推荐的策略营销
        * @param ids ids
        */
        bizStrategyMarketingForRecIsExistGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecIsExistGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询推荐的策略营销列表
        */
        bizStrategyMarketingForRecListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询推荐的策略营销
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        bizStrategyMarketingForRecPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据实体id查询用到这个实体的策略营销
        * @param entityId entityId
        */
        bizStrategyMarketingForRecQueryForRecGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecQueryForRecGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新推荐的策略营销
        * @param bizStrategyMarketingForRecPO bizStrategyMarketingForRecPO
        */
        bizStrategyMarketingForRecUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BizstrategymarketingforreccontrollerApiFetchParamCreator.bizStrategyMarketingForRecUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BiztablemetadatacontrollerApi - fetch parameter creator
 */
exports.BiztablemetadatacontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入元数据管理
     * @param bizTableMetadataPO bizTableMetadataPO
     */
    bizTableMetadataAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTableMetadataPO" is set
        if (params.bizTableMetadataPO == null) {
            throw new Error('Missing required parameter bizTableMetadataPO when calling bizTableMetadataAddPost');
        }
        let baseUrl = '/bizTableMetadata/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTableMetadataPO) {
            fetchOptions.body = JSON.stringify(params.bizTableMetadataPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除元数据管理
     * @param id id
     */
    bizTableMetadataDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizTableMetadataDelIdDelete');
        }
        let baseUrl = '/bizTableMetadata/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询元数据管理
     * @param id id
     */
    bizTableMetadataInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling bizTableMetadataInfoIdGet');
        }
        let baseUrl = '/bizTableMetadata/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询元数据管理列表
     */
    bizTableMetadataListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizTableMetadata/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询元数据管理
     */
    bizTableMetadataPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/bizTableMetadata/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新元数据管理
     * @param bizTableMetadataPO bizTableMetadataPO
     */
    bizTableMetadataUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTableMetadataPO" is set
        if (params.bizTableMetadataPO == null) {
            throw new Error('Missing required parameter bizTableMetadataPO when calling bizTableMetadataUpdatePut');
        }
        let baseUrl = '/bizTableMetadata/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTableMetadataPO) {
            fetchOptions.body = JSON.stringify(params.bizTableMetadataPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BiztablemetadatacontrollerApi - functional programming interface
 */
exports.BiztablemetadatacontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入元数据管理
        * @param bizTableMetadataPO bizTableMetadataPO
        */
        bizTableMetadataAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除元数据管理
        * @param id id
        */
        bizTableMetadataDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询元数据管理
        * @param id id
        */
        bizTableMetadataInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询元数据管理列表
        */
        bizTableMetadataListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询元数据管理
        */
        bizTableMetadataPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新元数据管理
        * @param bizTableMetadataPO bizTableMetadataPO
        */
        bizTableMetadataUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztablemetadatacontrollerApiFetchParamCreator.bizTableMetadataUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BiztagcategorycontrollerApi - fetch parameter creator
 */
exports.BiztagcategorycontrollerApiFetchParamCreator = {
    /**
     *
     * @summary BDI映射文件上传
     * @param file file
     * @param entityId entityId
     * @param type type
     */
    bizTagCategoryBdiFileUploadPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "file" is set
        if (params.file == null) {
            throw new Error('Missing required parameter file when calling bizTagCategoryBdiFileUploadPost');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryBdiFileUploadPost');
        }
        // verify required parameter "type" is set
        if (params.type == null) {
            throw new Error('Missing required parameter type when calling bizTagCategoryBdiFileUploadPost');
        }
        let baseUrl = '/bizTagCategory/bdiFileUpload';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            'type': params.type,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 校验标签分类是否重复(flase表示标签分类重复)
     * @param categoryEnglishName categoryEnglishName
     * @param entityId entityId
     */
    bizTagCategoryCategoryRepeatGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "categoryEnglishName" is set
        if (params.categoryEnglishName == null) {
            throw new Error('Missing required parameter categoryEnglishName when calling bizTagCategoryCategoryRepeatGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryCategoryRepeatGet');
        }
        let baseUrl = '/bizTagCategory/categoryRepeat';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            categoryEnglishName: params.categoryEnglishName,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 标签配置--标签体系文件上传
     * @param file file
     * @param entityId entityId
     */
    bizTagCategoryFileUploadPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "file" is set
        if (params.file == null) {
            throw new Error('Missing required parameter file when calling bizTagCategoryFileUploadPost');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryFileUploadPost');
        }
        let baseUrl = '/bizTagCategory/fileUpload';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            file: params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询标签树
     * @param entityId entityId
     */
    bizTagCategoryFindTagTreeGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryFindTagTreeGet');
        }
        let baseUrl = '/bizTagCategory/findTagTree';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 标签配置--单个实体上传记录
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param entityId entityId
     */
    bizTagCategoryOneTagConfigGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling bizTagCategoryOneTagConfigGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling bizTagCategoryOneTagConfigGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryOneTagConfigGet');
        }
        let baseUrl = '/bizTagCategory/oneTagConfig';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            'pageSize': params.pageSize,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询可调参标签树列表(标签名+标签值)
     * @param entityId entityId
     */
    bizTagCategoryQueryAdjustTagCategoryAndTagNameListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryQueryAdjustTagCategoryAndTagNameListGet');
        }
        let baseUrl = '/bizTagCategory/queryAdjustTagCategoryAndTagNameList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询手机型号
     * @param modelEnglishName modelEnglishName
     */
    bizTagCategoryQueryModelNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "modelEnglishName" is set
        if (params.modelEnglishName == null) {
            throw new Error('Missing required parameter modelEnglishName when calling bizTagCategoryQueryModelNameGet');
        }
        let baseUrl = '/bizTagCategory/queryModelName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'modelEnglishName': params.modelEnglishName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询非自定义标签树列表(标签名+标签值)
     * @param entityId entityId
     */
    bizTagCategoryQueryTagListExceptCustomGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryQueryTagListExceptCustomGet');
        }
        let baseUrl = '/bizTagCategory/queryTagListExceptCustom';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 插入标签分类
     * @param bizTagCategoryVO bizTagCategoryVO
     * @param sysEntityId sysEntityId
     */
    bizTagCategorySysEntityIdAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTagCategoryVO" is set
        if (params.bizTagCategoryVO == null) {
            throw new Error('Missing required parameter bizTagCategoryVO when calling bizTagCategorySysEntityIdAddPost');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagCategorySysEntityIdAddPost');
        }
        let baseUrl = '/bizTagCategory/{sysEntityId}/add'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTagCategoryVO) {
            fetchOptions.body = JSON.stringify(params.bizTagCategoryVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据分类唯一标识(categoryEnglishName)删除标签分类
     * @param categoryEnglishName categoryEnglishName
     * @param sysEntityId sysEntityId
     */
    bizTagCategorySysEntityIdDelDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "categoryEnglishName" is set
        if (params.categoryEnglishName == null) {
            throw new Error('Missing required parameter categoryEnglishName when calling bizTagCategorySysEntityIdDelDelete');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagCategorySysEntityIdDelDelete');
        }
        let baseUrl = '/bizTagCategory/{sysEntityId}/del'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            categoryEnglishName: params.categoryEnglishName,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新标签分类
     * @param bizTagCategoryVO bizTagCategoryVO
     * @param sysEntityId sysEntityId
     */
    bizTagCategorySysEntityIdUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTagCategoryVO" is set
        if (params.bizTagCategoryVO == null) {
            throw new Error('Missing required parameter bizTagCategoryVO when calling bizTagCategorySysEntityIdUpdatePut');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagCategorySysEntityIdUpdatePut');
        }
        let baseUrl = '/bizTagCategory/{sysEntityId}/update'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTagCategoryVO) {
            fetchOptions.body = JSON.stringify(params.bizTagCategoryVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询不含权限标签树列表（All标签名+All标签值）
     * @param entityId entityId
     */
    bizTagCategoryTagCategoryAndTagNameListExceptPowerGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryTagCategoryAndTagNameListExceptPowerGet');
        }
        let baseUrl = '/bizTagCategory/tagCategoryAndTagNameListExceptPower';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询标签树列表（All标签名+All标签值，如果没有标签名，不展示分类）
     * @param entityId entityId
     */
    bizTagCategoryTagCategoryAndTagNameListForGroupGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryTagCategoryAndTagNameListForGroupGet');
        }
        let baseUrl = '/bizTagCategory/tagCategoryAndTagNameListForGroup';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询标签树列表（All标签名+All标签值）
     * @param entityId entityId
     */
    bizTagCategoryTagCategoryAndTagNameListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryTagCategoryAndTagNameListGet');
        }
        let baseUrl = '/bizTagCategory/tagCategoryAndTagNameList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询标签
     * @param entityId entityId
     * @param value searchValue
     */
    // bizTagCategoryTagQueryList (params, options) {
    //   if (options === undefined) { options = {}; }
    //   // verify required parameter "entityId" is set
    //   if (params.entityId == null) {
    //       throw new Error('Missing required parameter entityId when calling bizTagCategoryTagQueryList');
    //   }
    //   let baseUrl = '/bizTagCategory/tagCategoryAndTagNameList';
    //   let urlObj = url.parse(baseUrl, true);
    //   urlObj.query = assign({}, urlObj.query, {
    //       'entityId': params.entityId,
    //   });
    //   let fetchOptions = assign({}, { method: 'GET' }, options);
    //   let contentTypeHeader = {};
    //   if (contentTypeHeader) {
    //       fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
    //   }
    //   urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
    //   return {
    //       url: url.format(urlObj),
    //       options: fetchOptions,
    //   };
    // },
    /**
     *
     * @summary 查询非定制化标签树列表(标签名+标签值)
     * @param entityId entityId
     */
    bizTagCategoryTagListExceptBusinesTagGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagCategoryTagListExceptBusinesTagGet');
        }
        let baseUrl = '/bizTagCategory/tagListExceptBusinesTag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BiztagcategorycontrollerApi - functional programming interface
 */
exports.BiztagcategorycontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary BDI映射文件上传
        * @param file file
        * @param entityId entityId
        * @param type type
        */
        bizTagCategoryBdiFileUploadPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryBdiFileUploadPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 校验标签分类是否重复(flase表示标签分类重复)
        * @param categoryEnglishName categoryEnglishName
        * @param entityId entityId
        */
        bizTagCategoryCategoryRepeatGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryCategoryRepeatGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 标签配置--标签体系文件上传
        * @param file file
        * @param entityId entityId
        */
        bizTagCategoryFileUploadPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryFileUploadPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询标签树
        * @param entityId entityId
        */
        bizTagCategoryFindTagTreeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryFindTagTreeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 标签配置--单个实体上传记录
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param entityId entityId
        */
        bizTagCategoryOneTagConfigGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryOneTagConfigGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询可调参标签树列表(标签名+标签值)
        * @param entityId entityId
        */
        bizTagCategoryQueryAdjustTagCategoryAndTagNameListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryQueryAdjustTagCategoryAndTagNameListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询手机型号
        * @param modelEnglishName modelEnglishName
        */
        bizTagCategoryQueryModelNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryQueryModelNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询非自定义标签树列表(标签名+标签值)
        * @param entityId entityId
        */
        bizTagCategoryQueryTagListExceptCustomGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryQueryTagListExceptCustomGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 插入标签分类
        * @param bizTagCategoryVO bizTagCategoryVO
        * @param sysEntityId sysEntityId
        */
        bizTagCategorySysEntityIdAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategorySysEntityIdAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据分类唯一标识(categoryEnglishName)删除标签分类
        * @param categoryEnglishName categoryEnglishName
        * @param sysEntityId sysEntityId
        */
        bizTagCategorySysEntityIdDelDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategorySysEntityIdDelDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新标签分类
        * @param bizTagCategoryVO bizTagCategoryVO
        * @param sysEntityId sysEntityId
        */
        bizTagCategorySysEntityIdUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategorySysEntityIdUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询不含权限标签树列表（All标签名+All标签值）
        * @param entityId entityId
        */
        bizTagCategoryTagCategoryAndTagNameListExceptPowerGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryTagCategoryAndTagNameListExceptPowerGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询标签树列表（All标签名+All标签值，如果没有标签名，不展示分类）
        * @param entityId entityId
        */
        bizTagCategoryTagCategoryAndTagNameListForGroupGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryTagCategoryAndTagNameListForGroupGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询标签树列表（All标签名+All标签值）
        * @param entityId entityId
        */
        bizTagCategoryTagCategoryAndTagNameListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryTagCategoryAndTagNameListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询标签
        * @param entityId entityId
        * @param value SearchValue
        */
        bizTagCategoryTagQueryList (params, options) {
          if (options === undefined) { options = {}; }
          let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryTagQueryList(params, options);
          let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
          let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
          return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
              if (response.status >= 200 && response.status < 300) {
                  return response.json();
              }
              else {
                  throw response;
              }
          });
        },
        /**
        *
        * @summary 查询非定制化标签树列表(标签名+标签值)
        * @param entityId entityId
        */
        bizTagCategoryTagListExceptBusinesTagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagcategorycontrollerApiFetchParamCreator.bizTagCategoryTagListExceptBusinesTagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BiztagnamecontrollerApi - fetch parameter creator
 */
exports.BiztagnamecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 根据标签唯一标识(tagEnglishName)查询标签名详情
     * @param tagEnglishName tagEnglishName
     * @param entityId entityId
     */
    bizTagNameLabelInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameLabelInfoGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagNameLabelInfoGet');
        }
        let baseUrl = '/bizTagName/labelInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 校验标签名是否重复(flase表示标签名重复)
     * @param tagEnglishName tagEnglishName
     * @param entityId entityId
     */
    bizTagNameNameRepeatGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameNameRepeatGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagNameNameRepeatGet');
        }
        let baseUrl = '/bizTagName/nameRepeat';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'tagEnglishName': params.tagEnglishName,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 通过标签英文名获取标签中文名（支持批量获取）
     * @param tagEnglishName tagEnglishName
     */
    bizTagNameQuerytagNameByTagEnglishNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameQuerytagNameByTagEnglishNameGet');
        }
        let baseUrl = '/bizTagName/querytagNameByTagEnglishName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 插入标签名
     * @param bizTagNameVO bizTagNameVO
     * @param sysEntityId sysEntityId
     */
    bizTagNameSysEntityIdAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTagNameVO" is set
        if (params.bizTagNameVO == null) {
            throw new Error('Missing required parameter bizTagNameVO when calling bizTagNameSysEntityIdAddPost');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagNameSysEntityIdAddPost');
        }
        let baseUrl = '/bizTagName/{sysEntityId}/add'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTagNameVO) {
            fetchOptions.body = JSON.stringify(params.bizTagNameVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据标签名唯一标识(tagEnglishName)删除标签名
     * @param tagEnglishName tagEnglishName
     * @param sysEntityId sysEntityId
     */
    bizTagNameSysEntityIdDelDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameSysEntityIdDelDelete');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagNameSysEntityIdDelDelete');
        }
        let baseUrl = '/bizTagName/{sysEntityId}/del'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新标签名
     * @param bizTagNameVO bizTagNameVO
     * @param sysEntityId sysEntityId
     */
    bizTagNameSysEntityIdUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizTagNameVO" is set
        if (params.bizTagNameVO == null) {
            throw new Error('Missing required parameter bizTagNameVO when calling bizTagNameSysEntityIdUpdatePut');
        }
        // verify required parameter "sysEntityId" is set
        if (params.sysEntityId == null) {
            throw new Error('Missing required parameter sysEntityId when calling bizTagNameSysEntityIdUpdatePut');
        }
        let baseUrl = '/bizTagName/{sysEntityId}/update'
            .replace('{' + 'sysEntityId' + '}', '' + params.sysEntityId);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizTagNameVO) {
            fetchOptions.body = JSON.stringify(params.bizTagNameVO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据标签唯一标识(tagEnglishName)查询标签名详情（不含覆盖数）
     * @param tagEnglishName tagEnglishName
     * @param entityId entityId
     */
    bizTagNameTagInfoExceptCoverGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameTagInfoExceptCoverGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagNameTagInfoExceptCoverGet');
        }
        let baseUrl = '/bizTagName/tagInfoExceptCover';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
            'entityId': params.entityId,
            isNew: params.isNew,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 标签配置--修改标签约束条件
     * @param tagEnglishName tagEnglishName
     * @param paramJson paramJson
     * @param entityId entityId
     */
    bizTagNameUpdateTagConstraintGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagNameUpdateTagConstraintGet');
        }
        // verify required parameter "paramJson" is set
        if (params.paramJson == null) {
            throw new Error('Missing required parameter paramJson when calling bizTagNameUpdateTagConstraintGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagNameUpdateTagConstraintGet');
        }
        let baseUrl = '/bizTagName/updateTagConstraint';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'tagEnglishName': params.tagEnglishName,
            'paramJson': params.paramJson,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BiztagnamecontrollerApi - functional programming interface
 */
exports.BiztagnamecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 根据标签唯一标识(tagEnglishName)查询标签名详情
        * @param tagEnglishName tagEnglishName
        * @param entityId entityId
        */
        bizTagNameLabelInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameLabelInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 校验标签名是否重复(flase表示标签名重复)
        * @param tagEnglishName tagEnglishName
        * @param entityId entityId
        */
        bizTagNameNameRepeatGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameNameRepeatGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 通过标签英文名获取标签中文名（支持批量获取）
        * @param tagEnglishName tagEnglishName
        */
        bizTagNameQuerytagNameByTagEnglishNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameQuerytagNameByTagEnglishNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 插入标签名
        * @param bizTagNameVO bizTagNameVO
        * @param sysEntityId sysEntityId
        */
        bizTagNameSysEntityIdAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameSysEntityIdAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据标签名唯一标识(tagEnglishName)删除标签名
        * @param tagEnglishName tagEnglishName
        * @param sysEntityId sysEntityId
        */
        bizTagNameSysEntityIdDelDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameSysEntityIdDelDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新标签名
        * @param bizTagNameVO bizTagNameVO
        * @param sysEntityId sysEntityId
        */
        bizTagNameSysEntityIdUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameSysEntityIdUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据标签唯一标识(tagEnglishName)查询标签名详情（不含覆盖数）
        * @param tagEnglishName tagEnglishName
        * @param entityId entityId
        */
        bizTagNameTagInfoExceptCoverGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameTagInfoExceptCoverGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 标签配置--修改标签约束条件
        * @param tagEnglishName tagEnglishName
        * @param paramJson paramJson
        * @param entityId entityId
        */
        bizTagNameUpdateTagConstraintGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagnamecontrollerApiFetchParamCreator.bizTagNameUpdateTagConstraintGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * BiztagvaluecontrollerApi - fetch parameter creator
 */
exports.BiztagvaluecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 新增自动化标签值
     * @param tagValueTitle tagValueTitle
     * @param entityId entityId
     */
    bizTagValueAddAutomaticTagValueGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizTagValueAddAutomaticTagValueGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueAddAutomaticTagValueGet');
        }
        let baseUrl = '/bizTagValue/addAutomaticTagValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagValueTitle: params.tagValueTitle,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增自定义标签值
     * @param tagValueTitle tagValueTitle
     * @param entityId entityId
     */
    bizTagValueAddCustomtagValueGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizTagValueAddCustomtagValueGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueAddCustomtagValueGet');
        }
        let baseUrl = '/bizTagValue/addCustomtagValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagValueTitle: params.tagValueTitle,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除标签值
     * @param entityId entityId
     * @param tagValueTitle tagValueTitle
     */
    bizTagValueDeleteTagValueGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueDeleteTagValueGet');
        }
        // verify required parameter "tagValueTitle" is set
        if (params.tagValueTitle == null) {
            throw new Error('Missing required parameter tagValueTitle when calling bizTagValueDeleteTagValueGet');
        }
        let baseUrl = '/bizTagValue/deleteTagValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            'tagValueTitle': params.tagValueTitle,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据标签值唯一标识(tagEnglishValueTitle)查询标签值信息
     * @param tagEnglishValueTitle tagEnglishValueTitle
     * @param entityId entityId
     */
    bizTagValueInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishValueTitle" is set
        if (params.tagEnglishValueTitle == null) {
            throw new Error('Missing required parameter tagEnglishValueTitle when calling bizTagValueInfoGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueInfoGet');
        }
        let baseUrl = '/bizTagValue/info';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'tagEnglishValueTitle': params.tagEnglishValueTitle,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据标签名唯一标识(tagEnglishName)查询标签值列表
     * @param tagEnglishName tagEnglishName
     * @param entityId entityId
     */
    bizTagValueListByTagEnglishNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagValueListByTagEnglishNameGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueListByTagEnglishNameGet');
        }
        let baseUrl = '/bizTagValue/listByTagEnglishName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            tagEnglishName: params.tagEnglishName,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取已有自动化标签
     * @param entityId entityId
     */
    bizTagValueQueryAutomaticTagValueListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueQueryAutomaticTagValueListGet');
        }
        let baseUrl = '/bizTagValue/queryAutomaticTagValueList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取已有自定义标签
     * @param entityId entityId
     */
    bizTagValueQueryCustomTagValueListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueQueryCustomTagValueListGet');
        }
        let baseUrl = '/bizTagValue/queryCustomTagValueList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据标签名唯一标识(tagEnglishName)查询标签值列表(不含覆盖数)
     * @param tagEnglishName tagEnglishName
     * @param entityId entityId
     */
    bizTagValueTagValueListExceptCoverGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "tagEnglishName" is set
        if (params.tagEnglishName == null) {
            throw new Error('Missing required parameter tagEnglishName when calling bizTagValueTagValueListExceptCoverGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling bizTagValueTagValueListExceptCoverGet');
        }
        let baseUrl = '/bizTagValue/tagValueListExceptCover';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'tagEnglishName': params.tagEnglishName,
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * BiztagvaluecontrollerApi - functional programming interface
 */
exports.BiztagvaluecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 新增自动化标签值
        * @param tagValueTitle tagValueTitle
        * @param entityId entityId
        */
        bizTagValueAddAutomaticTagValueGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueAddAutomaticTagValueGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增自定义标签值
        * @param tagValueTitle tagValueTitle
        * @param entityId entityId
        */
        bizTagValueAddCustomtagValueGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueAddCustomtagValueGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除标签值
        * @param entityId entityId
        * @param tagValueTitle tagValueTitle
        */
        bizTagValueDeleteTagValueGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueDeleteTagValueGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据标签值唯一标识(tagEnglishValueTitle)查询标签值信息
        * @param tagEnglishValueTitle tagEnglishValueTitle
        * @param entityId entityId
        */
        bizTagValueInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据标签名唯一标识(tagEnglishName)查询标签值列表
        * @param tagEnglishName tagEnglishName
        * @param entityId entityId
        */
        bizTagValueListByTagEnglishNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueListByTagEnglishNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取已有自动化标签
        * @param entityId entityId
        */
        bizTagValueQueryAutomaticTagValueListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueQueryAutomaticTagValueListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取已有自定义标签
        * @param entityId entityId
        */
        bizTagValueQueryCustomTagValueListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueQueryCustomTagValueListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据标签名唯一标识(tagEnglishName)查询标签值列表(不含覆盖数)
        * @param tagEnglishName tagEnglishName
        * @param entityId entityId
        */
        bizTagValueTagValueListExceptCoverGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.BiztagvaluecontrollerApiFetchParamCreator.bizTagValueTagValueListExceptCoverGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * ClientapicontrollerApi - fetch parameter creator
 */
exports.ClientapicontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 切换/选择岗位
     * @param postId postId
     */
    clientapiChangePostPostIdPut (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/clientapi/changePost/{postId}';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'postId': params.postId,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取当前登录人
     */
    clientapiGetMyAccountGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/clientapi/getMyAccount';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取当前所有岗位
     */
    clientapiGetPostListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/clientapi/getPostList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 判断用户是否登录
     */
    clientapiIsLoginGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/clientapi/isLogin';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取当前登录人菜单权限
     */
    clientapiQueryMyMenusGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/clientapi/queryMyMenus';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取某权限下子权限列表
     * @param parentKey 父级节点ID
     */
    clientapiQueryOperAuthListByParentKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "parentKey" is set
        if (params.parentKey == null) {
            throw new Error('Missing required parameter parentKey when calling clientapiQueryOperAuthListByParentKeyGet');
        }
        let baseUrl = '/clientapi/queryOperAuthListByParentKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'parentKey': params.parentKey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ClientapicontrollerApi - functional programming interface
 */
exports.ClientapicontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 切换/选择岗位
        * @param postId postId
        */
        clientapiChangePostPostIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiChangePostPostIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取当前登录人
        */
        clientapiGetMyAccountGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiGetMyAccountGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取当前所有岗位
        */
        clientapiGetPostListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiGetPostListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 判断用户是否登录
        */
        clientapiIsLoginGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiIsLoginGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取当前登录人菜单权限
        */
        clientapiQueryMyMenusGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiQueryMyMenusGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取某权限下子权限列表
        * @param parentKey 父级节点ID
        */
        clientapiQueryOperAuthListByParentKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ClientapicontrollerApiFetchParamCreator.clientapiQueryOperAuthListByParentKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * EventactioncontrollerApi - fetch parameter creator
 */
exports.EventactioncontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询客户端名称是否存在
     * @param appkeyName appkeyName
     */
    eventActionCheckAppkeyNameGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkeyName" is set
        if (params.appkeyName == null) {
            throw new Error('Missing required parameter appkeyName when calling eventActionCheckAppkeyNameGet');
        }
        let baseUrl = '/eventAction/checkAppkeyName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appkeyName: params.appkeyName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取行为（事件）参数值提示
     * @param columnName 要提示的事件参数名称
     * @param appkey 客户端
     * @param actionName 事件名
     */
    eventActionQueryActionParamPromptGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "columnName" is set
        if (params.columnName == null) {
            throw new Error('Missing required parameter columnName when calling eventActionQueryActionParamPromptGet');
        }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling eventActionQueryActionParamPromptGet');
        }
        // verify required parameter "actionName" is set
        if (params.actionName == null) {
            throw new Error('Missing required parameter actionName when calling eventActionQueryActionParamPromptGet');
        }
        let baseUrl = '/eventAction/queryActionParamPrompt';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'columnName': params.columnName,
            'appkey': params.appkey,
            'actionName': params.actionName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取客户端列表
     * @param isExtend 是否包含合并客户端标识
     * @param terminal 客户端类型
     */
    eventActionQueryAppListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/eventAction/queryAppList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            isExtend: params.isExtend,
            'terminal': params.terminal,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取已保存的事件参数列表
     * @param eventId 事件ID
     * @param eventType 事件类型
     */
    eventActionQueryConfigEventListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "eventId" is set
        if (params.eventId == null) {
            throw new Error('Missing required parameter eventId when calling eventActionQueryConfigEventListGet');
        }
        let baseUrl = '/eventAction/queryConfigEventList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            eventId: params.eventId,
            'eventType': params.eventType,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取指定客户端事件
     * @param appKey appKey
     */
    eventActionQueryEventListByAppIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appKey" is set
        if (params.appKey == null) {
            throw new Error('Missing required parameter appKey when calling eventActionQueryEventListByAppIdGet');
        }
        let baseUrl = '/eventAction/queryEventListByAppId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            appKey: params.appKey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询站点所有可以选择的客户端
     */
    eventActionQuerySiteAvailableAppKeyListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/eventAction/querySiteAvailableAppKeyList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存客户端合并
     * @param bizMergeAppkeyInfo bizMergeAppkeyInfo
     */
    eventActionSaveBizMergeAppkeyPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizMergeAppkeyInfo" is set
        if (params.bizMergeAppkeyInfo == null) {
            throw new Error('Missing required parameter bizMergeAppkeyInfo when calling eventActionSaveBizMergeAppkeyPost');
        }
        let baseUrl = '/eventAction/saveBizMergeAppkey';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizMergeAppkeyInfo) {
            fetchOptions.body = JSON.stringify(params.bizMergeAppkeyInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存事件参数配置
     * @param smConfigEventInfos smConfigEventInfos
     */
    eventActionSaveConfigEventPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigEventInfos" is set
        if (params.smConfigEventInfos == null) {
            throw new Error('Missing required parameter smConfigEventInfos when calling eventActionSaveConfigEventPost');
        }
        let baseUrl = '/eventAction/saveConfigEvent';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigEventInfos) {
            fetchOptions.body = JSON.stringify(params.smConfigEventInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * EventactioncontrollerApi - functional programming interface
 */
exports.EventactioncontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询客户端名称是否存在
        * @param appkeyName appkeyName
        */
        eventActionCheckAppkeyNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionCheckAppkeyNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取行为（事件）参数值提示
        * @param columnName 要提示的事件参数名称
        * @param appkey 客户端
        * @param actionName 事件名
        */
        eventActionQueryActionParamPromptGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionQueryActionParamPromptGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取客户端列表
        * @param isExtend 是否包含合并客户端标识
        * @param terminal 客户端类型
        */
        eventActionQueryAppListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionQueryAppListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取已保存的事件参数列表
        * @param eventId 事件ID
        * @param eventType 事件类型
        */
        eventActionQueryConfigEventListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionQueryConfigEventListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取指定客户端事件
        * @param appKey appKey
        */
        eventActionQueryEventListByAppIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionQueryEventListByAppIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询站点所有可以选择的客户端
        */
        eventActionQuerySiteAvailableAppKeyListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionQuerySiteAvailableAppKeyListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存客户端合并
        * @param bizMergeAppkeyInfo bizMergeAppkeyInfo
        */
        eventActionSaveBizMergeAppkeyPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionSaveBizMergeAppkeyPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存事件参数配置
        * @param smConfigEventInfos smConfigEventInfos
        */
        eventActionSaveConfigEventPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.EventactioncontrollerApiFetchParamCreator.eventActionSaveConfigEventPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * FilecontrollerApi - fetch parameter creator
 */
exports.FilecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 文件 删除
     */
    fileIdFileNameDelete (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/file/{id}/{fileName}';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary read
     */
    fileIdFileNameGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/file/{id}/{fileName}';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 文件 上传
     * @param file file
     */
    fileUploadPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "file" is set
        if (params.file == null) {
            throw new Error('Missing required parameter file when calling fileUploadPost');
        }
        let baseUrl = '/file/upload';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * FilecontrollerApi - functional programming interface
 */
exports.FilecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 文件 删除
        */
        fileIdFileNameDelete (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.FilecontrollerApiFetchParamCreator.fileIdFileNameDelete(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary read
        */
        fileIdFileNameGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.FilecontrollerApiFetchParamCreator.fileIdFileNameGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 文件 上传
        * @param file file
        */
        fileUploadPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.FilecontrollerApiFetchParamCreator.fileUploadPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * GlobalconfigurationcontrollerApi - fetch parameter creator
 */
exports.GlobalconfigurationcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 获取logo图片URL
     */
    globalConfigurationGetLogoUrlGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/getLogoUrl';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询导入组织机构列表
     */
    globalConfigurationImportOrgListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/importOrgList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 导入组织架构
     * @param file excel文件
     */
    globalConfigurationImportOrgPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/importOrg';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            file: params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除配置
     * @param id id
     */
    globalConfigurationInitColumnDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling globalConfigurationInitColumnDelIdDelete');
        }
        let baseUrl = '/globalConfiguration/initColumnDel/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询当前登录人列权限对应实体列配置列表
     * @param entityId 实体id(用户,产品,企业)
     */
    globalConfigurationQueryCurrentEntityInitListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling globalConfigurationQueryCurrentEntityInitListGet');
        }
        let baseUrl = '/globalConfiguration/queryCurrentEntityInitList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询明细表配置列表
     */
    globalConfigurationQueryDetailListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/queryDetailList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询实体列配置列表
     * @param entityId 实体id(用户,产品,企业)
     */
    globalConfigurationQueryEntityInitListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling globalConfigurationQueryEntityInitListGet');
        }
        let baseUrl = '/globalConfiguration/queryEntityInitList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询全局列配置列表
     * @param configType 分类
     * @param entityId 实体id(用户,产品,企业)
     */
    globalConfigurationQueryInitColumnListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/queryInitColumnList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'configType': params.configType,
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看接口配置
     */
    globalConfigurationQueryInterfaceGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/queryInterface';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存渠道列配置
     * @param smEntityConfigInfos smEntityConfigInfos
     */
    globalConfigurationSaveChannelInitPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smEntityConfigInfos" is set
        if (params.smEntityConfigInfos == null) {
            throw new Error('Missing required parameter smEntityConfigInfos when calling globalConfigurationSaveChannelInitPost');
        }
        let baseUrl = '/globalConfiguration/saveChannelInit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smEntityConfigInfos) {
            fetchOptions.body = JSON.stringify(params.smEntityConfigInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存明细列配置
     * @param smEntityConfigInfos smEntityConfigInfos
     */
    globalConfigurationSaveDetailInitPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smEntityConfigInfos" is set
        if (params.smEntityConfigInfos == null) {
            throw new Error('Missing required parameter smEntityConfigInfos when calling globalConfigurationSaveDetailInitPost');
        }
        let baseUrl = '/globalConfiguration/saveDetailInit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smEntityConfigInfos) {
            fetchOptions.body = JSON.stringify(params.smEntityConfigInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存实体列配置
     * @param smEntityConfigInfos smEntityConfigInfos
     */
    globalConfigurationSaveEntityInitPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smEntityConfigInfos" is set
        if (params.smEntityConfigInfos == null) {
            throw new Error('Missing required parameter smEntityConfigInfos when calling globalConfigurationSaveEntityInitPost');
        }
        let baseUrl = '/globalConfiguration/saveEntityInit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smEntityConfigInfos) {
            fetchOptions.body = JSON.stringify(params.smEntityConfigInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存接口配置
     * @param smConfigKvInfos smConfigKvInfos
     */
    globalConfigurationSaveInterfacePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigKvInfos" is set
        if (params.smConfigKvInfos == null) {
            throw new Error('Missing required parameter smConfigKvInfos when calling globalConfigurationSaveInterfacePost');
        }
        let baseUrl = '/globalConfiguration/saveInterface';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigKvInfos) {
            fetchOptions.body = JSON.stringify(params.smConfigKvInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存logo
     * @param logoInfo logoInfo
     */
    globalConfigurationSaveLogoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "logoInfo" is set
        if (params.logoInfo == null) {
            throw new Error('Missing required parameter logoInfo when calling globalConfigurationSaveLogoPost');
        }
        let baseUrl = '/globalConfiguration/saveLogo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.logoInfo) {
            fetchOptions.body = JSON.stringify(params.logoInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * GlobalconfigurationcontrollerApi - functional programming interface
 */
exports.GlobalconfigurationcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 获取logo图片URL
        */
        globalConfigurationGetLogoUrlGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationGetLogoUrlGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询导入组织机构列表
        */
        globalConfigurationImportOrgListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationImportOrgListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 导入组织架构
        * @param file excel文件
        */
        globalConfigurationImportOrgPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationImportOrgPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除配置
        * @param id id
        */
        globalConfigurationInitColumnDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationInitColumnDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询当前登录人列权限对应实体列配置列表
        * @param entityId 实体id(用户,产品,企业)
        */
        globalConfigurationQueryCurrentEntityInitListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationQueryCurrentEntityInitListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询明细表配置列表
        */
        globalConfigurationQueryDetailListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationQueryDetailListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询实体列配置列表
        * @param entityId 实体id(用户,产品,企业)
        */
        globalConfigurationQueryEntityInitListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationQueryEntityInitListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询全局列配置列表
        * @param configType 分类
        * @param entityId 实体id(用户,产品,企业)
        */
        globalConfigurationQueryInitColumnListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationQueryInitColumnListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看接口配置
        */
        globalConfigurationQueryInterfaceGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationQueryInterfaceGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存渠道列配置
        * @param smEntityConfigInfos smEntityConfigInfos
        */
        globalConfigurationSaveChannelInitPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationSaveChannelInitPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存明细列配置
        * @param smEntityConfigInfos smEntityConfigInfos
        */
        globalConfigurationSaveDetailInitPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationSaveDetailInitPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存实体列配置
        * @param smEntityConfigInfos smEntityConfigInfos
        */
        globalConfigurationSaveEntityInitPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationSaveEntityInitPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存接口配置
        * @param smConfigKvInfos smConfigKvInfos
        */
        globalConfigurationSaveInterfacePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationSaveInterfacePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存logo
        * @param logoInfo logoInfo
        */
        globalConfigurationSaveLogoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.GlobalconfigurationcontrollerApiFetchParamCreator.globalConfigurationSaveLogoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * ReportonlineoperateindexcontrollerApi - fetch parameter creator
 */
exports.ReportonlineoperateindexcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 下载BDI数据
     * @param head excel头部
     * @param data 导出数据
     * @param fileName 导出文件名
     */
    globalConfigurationDownloadBdiPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/globalConfiguration/downloadBdi';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'head': params.head,
            data: params.data,
            'fileName': params.fileName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 入口页面/自定义指标
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcEntryPageCustomerIndexPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcEntryPageCustomerIndexPost');
        }
        let baseUrl = '/globalConfiguration/queryPcEntryPageCustomerIndex';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 入口页面/入口页流量概览
     * @param baseIndexInfo baseIndexInfo
     */
    globalConfigurationQueryPcEntryPageFlowOverviewPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseIndexInfo" is set
        if (params.baseIndexInfo == null) {
            throw new Error('Missing required parameter baseIndexInfo when calling globalConfigurationQueryPcEntryPageFlowOverviewPost');
        }
        let baseUrl = '/globalConfiguration/queryPcEntryPageFlowOverview';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 入口页面
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcEntryPagePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcEntryPagePost');
        }
        let baseUrl = '/globalConfiguration/queryPcEntryPage';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 受访页面/自定义指标
     * @param basePageTypeInfo basePageTypeInfo
     */
    globalConfigurationQueryPcInterviewPageCustomIndexPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "basePageTypeInfo" is set
        if (params.basePageTypeInfo == null) {
            throw new Error('Missing required parameter basePageTypeInfo when calling globalConfigurationQueryPcInterviewPageCustomIndexPost');
        }
        let baseUrl = '/globalConfiguration/queryPcInterviewPageCustomIndex';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.basePageTypeInfo) {
            fetchOptions.body = JSON.stringify(params.basePageTypeInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 受访页面
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcInterviewPagePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcInterviewPagePost');
        }
        let baseUrl = '/globalConfiguration/queryPcInterviewPage';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 忠诚度
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcLoyaltyPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcLoyaltyPost');
        }
        let baseUrl = '/globalConfiguration/queryPcLoyalty';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新老访客/新老访客概况
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcOveriewOfNewAndOldVisitorPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcOveriewOfNewAndOldVisitorPost');
        }
        let baseUrl = '/globalConfiguration/queryPcOveriewOfNewAndOldVisitor';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地域分布
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcRegionalDistributionPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcRegionalDistributionPost');
        }
        let baseUrl = '/globalConfiguration/queryPcRegionalDistribution';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地域分布/自定义指标
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcRegionalDistrubutionCustomerIndexPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcRegionalDistrubutionCustomerIndexPost');
        }
        let baseUrl = '/globalConfiguration/queryPcRegionalDistrubutionCustomerIndex';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 系统环境浏览器分布概况
     * @param baseSystemInfo baseSystemInfo
     */
    globalConfigurationQueryPcSyfstemEnvironmentBrowserDistributionOverviewPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseSystemInfo" is set
        if (params.baseSystemInfo == null) {
            throw new Error('Missing required parameter baseSystemInfo when calling globalConfigurationQueryPcSyfstemEnvironmentBrowserDistributionOverviewPost');
        }
        let baseUrl = '/globalConfiguration/queryPcSyfstemEnvironmentBrowserDistributionOverview';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseSystemInfo) {
            fetchOptions.body = JSON.stringify(params.baseSystemInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 系统环境
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcSystemEnvironmentBrowserPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcSystemEnvironmentBrowserPost');
        }
        let baseUrl = '/globalConfiguration/queryPcSystemEnvironmentBrowser';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 地区分布/访问地域分布概况
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcVisitGeographicalDistributionPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcVisitGeographicalDistributionPost');
        }
        let baseUrl = '/globalConfiguration/queryPcVisitGeographicalDistribution';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 网站流量趋势
     * @param baseGranularityInfo baseGranularityInfo
     */
    globalConfigurationQueryPcWebsiteTrafficTrendPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseGranularityInfo" is set
        if (params.baseGranularityInfo == null) {
            throw new Error('Missing required parameter baseGranularityInfo when calling globalConfigurationQueryPcWebsiteTrafficTrendPost');
        }
        let baseUrl = '/globalConfiguration/queryPcWebsiteTrafficTrend';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseGranularityInfo) {
            fetchOptions.body = JSON.stringify(params.baseGranularityInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 网站趋势
     * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
     */
    globalConfigurationQueryPcWebsiteTrendPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "baseOnlineOperatingIndexInfo" is set
        if (params.baseOnlineOperatingIndexInfo == null) {
            throw new Error('Missing required parameter baseOnlineOperatingIndexInfo when calling globalConfigurationQueryPcWebsiteTrendPost');
        }
        let baseUrl = '/globalConfiguration/queryPcWebsiteTrend';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.baseOnlineOperatingIndexInfo) {
            fetchOptions.body = JSON.stringify(params.baseOnlineOperatingIndexInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ReportonlineoperateindexcontrollerApi - functional programming interface
 */
exports.ReportonlineoperateindexcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 下载BDI数据
        * @param head excel头部
        * @param data 导出数据
        * @param fileName 导出文件名
        */
        globalConfigurationDownloadBdiPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationDownloadBdiPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 入口页面/自定义指标
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcEntryPageCustomerIndexPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcEntryPageCustomerIndexPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 入口页面/入口页流量概览
        * @param baseIndexInfo baseIndexInfo
        */
        globalConfigurationQueryPcEntryPageFlowOverviewPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcEntryPageFlowOverviewPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 入口页面
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcEntryPagePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcEntryPagePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 受访页面/自定义指标
        * @param basePageTypeInfo basePageTypeInfo
        */
        globalConfigurationQueryPcInterviewPageCustomIndexPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcInterviewPageCustomIndexPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 受访页面
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcInterviewPagePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcInterviewPagePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 忠诚度
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcLoyaltyPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcLoyaltyPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新老访客/新老访客概况
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcOveriewOfNewAndOldVisitorPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcOveriewOfNewAndOldVisitorPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地域分布
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcRegionalDistributionPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcRegionalDistributionPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地域分布/自定义指标
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcRegionalDistrubutionCustomerIndexPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcRegionalDistrubutionCustomerIndexPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 系统环境浏览器分布概况
        * @param baseSystemInfo baseSystemInfo
        */
        globalConfigurationQueryPcSyfstemEnvironmentBrowserDistributionOverviewPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcSyfstemEnvironmentBrowserDistributionOverviewPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 系统环境
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcSystemEnvironmentBrowserPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcSystemEnvironmentBrowserPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 地区分布/访问地域分布概况
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcVisitGeographicalDistributionPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcVisitGeographicalDistributionPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 网站流量趋势
        * @param baseGranularityInfo baseGranularityInfo
        */
        globalConfigurationQueryPcWebsiteTrafficTrendPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcWebsiteTrafficTrendPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 网站趋势
        * @param baseOnlineOperatingIndexInfo baseOnlineOperatingIndexInfo
        */
        globalConfigurationQueryPcWebsiteTrendPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.ReportonlineoperateindexcontrollerApiFetchParamCreator.globalConfigurationQueryPcWebsiteTrendPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigalgorithmcontrollerApi - fetch parameter creator
 */
exports.SmconfigalgorithmcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入算法配置
     * @param smConfigAlgorithmPO smConfigAlgorithmPO
     */
    smConfigAlgorithmAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigAlgorithmPO" is set
        if (params.smConfigAlgorithmPO == null) {
            throw new Error('Missing required parameter smConfigAlgorithmPO when calling smConfigAlgorithmAddPost');
        }
        let baseUrl = '/smConfigAlgorithm/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigAlgorithmPO) {
            fetchOptions.body = JSON.stringify(params.smConfigAlgorithmPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除算法配置
     * @param id id
     */
    smConfigAlgorithmDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smConfigAlgorithmDelIdDelete');
        }
        let baseUrl = '/smConfigAlgorithm/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询算法配置
     * @param id id
     */
    smConfigAlgorithmInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smConfigAlgorithmInfoIdGet');
        }
        let baseUrl = '/smConfigAlgorithm/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询算法配置列表
     */
    smConfigAlgorithmListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigAlgorithm/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询算法配置
     */
    smConfigAlgorithmPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigAlgorithm/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新算法配置
     * @param smConfigAlgorithmPO smConfigAlgorithmPO
     */
    smConfigAlgorithmUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigAlgorithmPO" is set
        if (params.smConfigAlgorithmPO == null) {
            throw new Error('Missing required parameter smConfigAlgorithmPO when calling smConfigAlgorithmUpdatePut');
        }
        let baseUrl = '/smConfigAlgorithm/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigAlgorithmPO) {
            fetchOptions.body = JSON.stringify(params.smConfigAlgorithmPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigalgorithmcontrollerApi - functional programming interface
 */
exports.SmconfigalgorithmcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入算法配置
        * @param smConfigAlgorithmPO smConfigAlgorithmPO
        */
        smConfigAlgorithmAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除算法配置
        * @param id id
        */
        smConfigAlgorithmDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询算法配置
        * @param id id
        */
        smConfigAlgorithmInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询算法配置列表
        */
        smConfigAlgorithmListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询算法配置
        */
        smConfigAlgorithmPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新算法配置
        * @param smConfigAlgorithmPO smConfigAlgorithmPO
        */
        smConfigAlgorithmUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigalgorithmcontrollerApiFetchParamCreator.smConfigAlgorithmUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigbdioperatorcontrollerApi - fetch parameter creator
 */
exports.SmconfigbdioperatorcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 导入运营商资源表
     * @param file csv文件
     */
    smConfigBdiOperatorImportConfigBdiOperatorPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigBdiOperator/importConfigBdiOperator';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigbdioperatorcontrollerApi - functional programming interface
 */
exports.SmconfigbdioperatorcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 导入运营商资源表
        * @param file csv文件
        */
        smConfigBdiOperatorImportConfigBdiOperatorPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigbdioperatorcontrollerApiFetchParamCreator.smConfigBdiOperatorImportConfigBdiOperatorPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigcidregcontrollerApi - fetch parameter creator
 */
exports.SmconfigcidregcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询客户端正则表达式列表
     * @param appkey appkey
     */
    smConfigCidRegQueryConfigCidRegListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "appkey" is set
        if (params.appkey == null) {
            throw new Error('Missing required parameter appkey when calling smConfigCidRegQueryConfigCidRegListGet');
        }
        let baseUrl = '/smConfigCidReg/queryConfigCidRegList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appkey': params.appkey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存客户端正则表达式
     * @param smConfigCidRegInfos smConfigCidRegInfos
     */
    smConfigCidRegSaveConfigCidRegInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigCidRegInfos" is set
        if (params.smConfigCidRegInfos == null) {
            throw new Error('Missing required parameter smConfigCidRegInfos when calling smConfigCidRegSaveConfigCidRegInfoPost');
        }
        let baseUrl = '/smConfigCidReg/saveConfigCidRegInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigCidRegInfos) {
            fetchOptions.body = JSON.stringify(params.smConfigCidRegInfos || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigcidregcontrollerApi - functional programming interface
 */
exports.SmconfigcidregcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询客户端正则表达式列表
        * @param appkey appkey
        */
        smConfigCidRegQueryConfigCidRegListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigcidregcontrollerApiFetchParamCreator.smConfigCidRegQueryConfigCidRegListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存客户端正则表达式
        * @param smConfigCidRegInfos smConfigCidRegInfos
        */
        smConfigCidRegSaveConfigCidRegInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigcidregcontrollerApiFetchParamCreator.smConfigCidRegSaveConfigCidRegInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigentitycontrollerApi - fetch parameter creator
 */
exports.SmconfigentitycontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 根据实体类别查询实体列表
     * @param entityCategoryEnum 类别
     */
    smConfigEntityQueryConfigEntityListByCategoryEntityCategoryEnumGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityCategoryEnum" is set
        if (params.entityCategoryEnum == null) {
            throw new Error('Missing required parameter entityCategoryEnum when calling smConfigEntityQueryConfigEntityListByCategoryEntityCategoryEnumGet');
        }
        let baseUrl = '/smConfigEntity/queryConfigEntityListByCategory/{entityCategoryEnum}'
            .replace('{' + 'entityCategoryEnum' + '}', '' + params.entityCategoryEnum);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询实体配置表列表
     */
    smConfigEntityQueryConfigEntityListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigEntity/queryConfigEntityList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询推荐内容实体列表
     */
    smConfigEntityQueryRecommendContentEntityListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigEntity/queryRecommendContentEntityList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询推荐对象实体列表
     */
    smConfigEntityQueryRecommendObjectEntityListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigEntity/queryRecommendObjectEntityList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存实体配置表
     * @param smConfigEntityInfo smConfigEntityInfo
     */
    smConfigEntitySaveConfigEntityPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigEntityInfo" is set
        if (params.smConfigEntityInfo == null) {
            throw new Error('Missing required parameter smConfigEntityInfo when calling smConfigEntitySaveConfigEntityPost');
        }
        let baseUrl = '/smConfigEntity/saveConfigEntity';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigEntityInfo) {
            fetchOptions.body = JSON.stringify(params.smConfigEntityInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigentitycontrollerApi - functional programming interface
 */
exports.SmconfigentitycontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 根据实体类别查询实体列表
        * @param entityCategoryEnum 类别
        */
        smConfigEntityQueryConfigEntityListByCategoryEntityCategoryEnumGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigentitycontrollerApiFetchParamCreator.smConfigEntityQueryConfigEntityListByCategoryEntityCategoryEnumGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询实体配置表列表
        */
        smConfigEntityQueryConfigEntityListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigentitycontrollerApiFetchParamCreator.smConfigEntityQueryConfigEntityListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询推荐内容实体列表
        */
        smConfigEntityQueryRecommendContentEntityListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigentitycontrollerApiFetchParamCreator.smConfigEntityQueryRecommendContentEntityListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询推荐对象实体列表
        */
        smConfigEntityQueryRecommendObjectEntityListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigentitycontrollerApiFetchParamCreator.smConfigEntityQueryRecommendObjectEntityListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存实体配置表
        * @param smConfigEntityInfo smConfigEntityInfo
        */
        smConfigEntitySaveConfigEntityPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigentitycontrollerApiFetchParamCreator.smConfigEntitySaveConfigEntityPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigmodelrecommendcontrollerApi - fetch parameter creator
 */
exports.SmconfigmodelrecommendcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 导入手机型号资源表
     * @param file csv文件
     */
    smConfigModelRecommendImportConfigModelRecommendPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigModelRecommend/importConfigModelRecommend';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigmodelrecommendcontrollerApi - functional programming interface
 */
exports.SmconfigmodelrecommendcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 导入手机型号资源表
        * @param file csv文件
        */
        smConfigModelRecommendImportConfigModelRecommendPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigmodelrecommendcontrollerApiFetchParamCreator.smConfigModelRecommendImportConfigModelRecommendPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmconfigsearchenginecontrollerApi - fetch parameter creator
 */
exports.SmconfigsearchenginecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 导入搜索引擎配置表
     * @param file csv文件
     */
    smConfigSearchEngineImportConfigSearchEnginePost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smConfigSearchEngine/importConfigSearchEngine';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmconfigsearchenginecontrollerApi - functional programming interface
 */
exports.SmconfigsearchenginecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 导入搜索引擎配置表
        * @param file csv文件
        */
        smConfigSearchEngineImportConfigSearchEnginePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmconfigsearchenginecontrollerApiFetchParamCreator.smConfigSearchEngineImportConfigSearchEnginePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmfilerecordcontrollerApi - fetch parameter creator
 */
exports.SmfilerecordcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 分页查询文件上传记录
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    smFileRecordSmFileRecordPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smFileRecordSmFileRecordPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smFileRecordSmFileRecordPageGet');
        }
        let baseUrl = '/smFileRecord/smFileRecordPage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmfilerecordcontrollerApi - functional programming interface
 */
exports.SmfilerecordcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 分页查询文件上传记录
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        smFileRecordSmFileRecordPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmfilerecordcontrollerApiFetchParamCreator.smFileRecordSmFileRecordPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmgroupmanagementcontrollerApi - fetch parameter creator
 */
exports.SmgroupmanagementcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询基础指标
     * @param entityId 实体ID
     */
    smGroupManagementQueryBaseInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smGroupManagement/queryBaseInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询群组管理信息
     * @param entityId 群组实体标识
     */
    smGroupManagementQueryGroupConfigInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling smGroupManagementQueryGroupConfigInfoGet');
        }
        let baseUrl = '/smGroupManagement/queryGroupConfigInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存群组管理信息
     * @param smGroupManagementInfo smGroupManagementInfo
     */
    smGroupManagementSaveGroupManagementPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smGroupManagementInfo" is set
        if (params.smGroupManagementInfo == null) {
            throw new Error('Missing required parameter smGroupManagementInfo when calling smGroupManagementSaveGroupManagementPost');
        }
        let baseUrl = '/smGroupManagement/saveGroupManagement';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smGroupManagementInfo) {
            fetchOptions.body = JSON.stringify(params.smGroupManagementInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmgroupmanagementcontrollerApi - functional programming interface
 */
exports.SmgroupmanagementcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询基础指标
        * @param entityId 实体ID
        */
        smGroupManagementQueryBaseInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmgroupmanagementcontrollerApiFetchParamCreator.smGroupManagementQueryBaseInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询群组管理信息
        * @param entityId 群组实体标识
        */
        smGroupManagementQueryGroupConfigInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmgroupmanagementcontrollerApiFetchParamCreator.smGroupManagementQueryGroupConfigInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存群组管理信息
        * @param smGroupManagementInfo smGroupManagementInfo
        */
        smGroupManagementSaveGroupManagementPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmgroupmanagementcontrollerApiFetchParamCreator.smGroupManagementSaveGroupManagementPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SminitdictionarycontrollerApi - fetch parameter creator
 */
exports.SminitdictionarycontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 批量删除分类字典表
     * @param categoryCodeArray 分类码的数组
     */
    smInitDictionaryBatchDelByCategoryCodeDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smInitDictionary/batchDelByCategoryCode';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            categoryCodeArray: params.categoryCodeArray,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 批量删除码值字典表
     * @param codeValueCodeArray 码值对应码的数组
     */
    smInitDictionaryBatchDelByCodeValueCodeDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smInitDictionary/batchDelByCodeValueCode';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            codeValueCodeArray: params.codeValueCodeArray,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 修改码值字典表
     * @param id id
     * @param dictionaryCode 快速编码
     * @param dictionaryLabel 码值
     */
    smInitDictionaryEditCodeValueIdPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smInitDictionaryEditCodeValueIdPut');
        }
        let baseUrl = '/smInitDictionary/editCodeValue/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'dictionaryCode': params.dictionaryCode,
            dictionaryLabel: params.dictionaryLabel,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 判断字典表中是否已经包含当前的码
     * @param code 码
     */
    smInitDictionaryIsExistCodeGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smInitDictionary/isExistCode';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'code': params.code,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 导入码值字典表
     * @param categoryCode 分类码
     * @param file excel文件
     */
    smInitDictionaryLeadingInCodeValuePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "categoryCode" is set
        if (params.categoryCode == null) {
            throw new Error('Missing required parameter categoryCode when calling smInitDictionaryLeadingInCodeValuePost');
        }
        let baseUrl = '/smInitDictionary/leadingInCodeValue';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'categoryCode': params.categoryCode,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            'file': params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询全部类别列表
     */
    smInitDictionaryQueryALLCategoryListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smInitDictionary/queryALLCategoryList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询类别列表
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param categoryLabel 类别名称
     */
    smInitDictionaryQueryCategoryListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smInitDictionaryQueryCategoryListGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smInitDictionaryQueryCategoryListGet');
        }
        let baseUrl = '/smInitDictionary/queryCategoryList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'categoryLabel': params.categoryLabel,
            'pageNum': params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询当前分类全部码值
     * @param categoryCode 分类码
     */
    smInitDictionaryQueryCodeByCategoryCodeGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "categoryCode" is set
        if (params.categoryCode == null) {
            throw new Error('Missing required parameter categoryCode when calling smInitDictionaryQueryCodeByCategoryCodeGet');
        }
        let baseUrl = '/smInitDictionary/queryCodeByCategoryCode';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'categoryCode': params.categoryCode,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询指定分类下码值字典表
     * @param categoryCode 分类码
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param codeLabelOrCode 码值对应的码或者名称
     */
    smInitDictionaryQueryCodeListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "categoryCode" is set
        if (params.categoryCode == null) {
            throw new Error('Missing required parameter categoryCode when calling smInitDictionaryQueryCodeListGet');
        }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smInitDictionaryQueryCodeListGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smInitDictionaryQueryCodeListGet');
        }
        let baseUrl = '/smInitDictionary/queryCodeList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'categoryCode': params.categoryCode,
            'codeLabelOrCode': params.codeLabelOrCode,
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增分类字典表
     * @param smInitDictionaryCategoryInfo smInitDictionaryCategoryInfo
     */
    smInitDictionarySaveCategoryPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smInitDictionaryCategoryInfo" is set
        if (params.smInitDictionaryCategoryInfo == null) {
            throw new Error('Missing required parameter smInitDictionaryCategoryInfo when calling smInitDictionarySaveCategoryPost');
        }
        let baseUrl = '/smInitDictionary/saveCategory';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smInitDictionaryCategoryInfo) {
            fetchOptions.body = JSON.stringify(params.smInitDictionaryCategoryInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增码值字典表
     * @param smInitDictionaryCodeInfo smInitDictionaryCodeInfo
     */
    smInitDictionarySaveCodeValuePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smInitDictionaryCodeInfo" is set
        if (params.smInitDictionaryCodeInfo == null) {
            throw new Error('Missing required parameter smInitDictionaryCodeInfo when calling smInitDictionarySaveCodeValuePost');
        }
        let baseUrl = '/smInitDictionary/saveCodeValue';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smInitDictionaryCodeInfo) {
            fetchOptions.body = JSON.stringify(params.smInitDictionaryCodeInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SminitdictionarycontrollerApi - functional programming interface
 */
exports.SminitdictionarycontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 批量删除分类字典表
        * @param categoryCodeArray 分类码的数组
        */
        smInitDictionaryBatchDelByCategoryCodeDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryBatchDelByCategoryCodeDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 批量删除码值字典表
        * @param codeValueCodeArray 码值对应码的数组
        */
        smInitDictionaryBatchDelByCodeValueCodeDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryBatchDelByCodeValueCodeDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 修改码值字典表
        * @param id id
        * @param dictionaryCode 快速编码
        * @param dictionaryLabel 码值
        */
        smInitDictionaryEditCodeValueIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryEditCodeValueIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 判断字典表中是否已经包含当前的码
        * @param code 码
        */
        smInitDictionaryIsExistCodeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryIsExistCodeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 导入码值字典表
        * @param categoryCode 分类码
        * @param file excel文件
        */
        smInitDictionaryLeadingInCodeValuePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryLeadingInCodeValuePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询全部类别列表
        */
        smInitDictionaryQueryALLCategoryListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryQueryALLCategoryListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询类别列表
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param categoryLabel 类别名称
        */
        smInitDictionaryQueryCategoryListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryQueryCategoryListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询当前分类全部码值
        * @param categoryCode 分类码
        */
        smInitDictionaryQueryCodeByCategoryCodeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryQueryCodeByCategoryCodeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询指定分类下码值字典表
        * @param categoryCode 分类码
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param codeLabelOrCode 码值对应的码或者名称
        */
        smInitDictionaryQueryCodeListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionaryQueryCodeListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增分类字典表
        * @param smInitDictionaryCategoryInfo smInitDictionaryCategoryInfo
        */
        smInitDictionarySaveCategoryPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionarySaveCategoryPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增码值字典表
        * @param smInitDictionaryCodeInfo smInitDictionaryCodeInfo
        */
        smInitDictionarySaveCodeValuePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SminitdictionarycontrollerApiFetchParamCreator.smInitDictionarySaveCodeValuePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmmailgroupcontrollerApi - fetch parameter creator
 */
exports.SmmailgroupcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入邮件组
     * @param smMailGroupPO smMailGroupPO
     */
    smMailGroupAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smMailGroupPO" is set
        if (params.smMailGroupPO == null) {
            throw new Error('Missing required parameter smMailGroupPO when calling smMailGroupAddPost');
        }
        let baseUrl = '/smMailGroup/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smMailGroupPO) {
            fetchOptions.body = JSON.stringify(params.smMailGroupPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 检查邮件组名是否重复
     * @param mailGroupName mailGroupName
     */
    smMailGroupCheckRepeatGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "mailGroupName" is set
        if (params.mailGroupName == null) {
            throw new Error('Missing required parameter mailGroupName when calling smMailGroupCheckRepeatGet');
        }
        let baseUrl = '/smMailGroup/checkRepeat';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            mailGroupName: params.mailGroupName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除邮件组
     * @param id id
     */
    smMailGroupDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMailGroupDelIdDelete');
        }
        let baseUrl = '/smMailGroup/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询邮件组
     * @param id id
     */
    smMailGroupInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMailGroupInfoIdGet');
        }
        let baseUrl = '/smMailGroup/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询邮件组列表
     */
    smMailGroupListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMailGroup/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询邮件组
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    smMailGroupPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smMailGroupPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smMailGroupPageGet');
        }
        let baseUrl = '/smMailGroup/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新邮件组
     * @param smMailGroupPO smMailGroupPO
     */
    smMailGroupUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smMailGroupPO" is set
        if (params.smMailGroupPO == null) {
            throw new Error('Missing required parameter smMailGroupPO when calling smMailGroupUpdatePut');
        }
        let baseUrl = '/smMailGroup/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smMailGroupPO) {
            fetchOptions.body = JSON.stringify(params.smMailGroupPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmmailgroupcontrollerApi - functional programming interface
 */
exports.SmmailgroupcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入邮件组
        * @param smMailGroupPO smMailGroupPO
        */
        smMailGroupAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 检查邮件组名是否重复
        * @param mailGroupName mailGroupName
        */
        smMailGroupCheckRepeatGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupCheckRepeatGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除邮件组
        * @param id id
        */
        smMailGroupDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询邮件组
        * @param id id
        */
        smMailGroupInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询邮件组列表
        */
        smMailGroupListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询邮件组
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        smMailGroupPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新邮件组
        * @param smMailGroupPO smMailGroupPO
        */
        smMailGroupUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmailgroupcontrollerApiFetchParamCreator.smMailGroupUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmmarketingscenecontrollerApi - fetch parameter creator
 */
exports.SmmarketingscenecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 新增策略模板
     * @param bizPerRecomStrategyTemplateInfo bizPerRecomStrategyTemplateInfo
     */
    smMarketingSceneAddStrategyTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomStrategyTemplateInfo" is set
        if (params.bizPerRecomStrategyTemplateInfo == null) {
            throw new Error('Missing required parameter bizPerRecomStrategyTemplateInfo when calling smMarketingSceneAddStrategyTemplatePost');
        }
        let baseUrl = '/smMarketingScene/addStrategyTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomStrategyTemplateInfo) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomStrategyTemplateInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐算法模板列表
     */
    smMarketingSceneBizPerRecomAlgorithmTemplateListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/bizPerRecomAlgorithmTemplateList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除客户端
     * @param siteId 站点ID
     * @param appKey 客户端key
     */
    smMarketingSceneDelAppKeyInfoDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling smMarketingSceneDelAppKeyInfoDelete');
        }
        // verify required parameter "appKey" is set
        if (params.appKey == null) {
            throw new Error('Missing required parameter appKey when calling smMarketingSceneDelAppKeyInfoDelete');
        }
        let baseUrl = '/smMarketingScene/delAppKeyInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            siteId: params.siteId,
            'appKey': params.appKey,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除算法模板
     * @param id id
     */
    smMarketingSceneDelBizPerRecomAlgorithmTemplateIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMarketingSceneDelBizPerRecomAlgorithmTemplateIdDelete');
        }
        let baseUrl = '/smMarketingScene/delBizPerRecomAlgorithmTemplate/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除优先推荐
     * @param id id
     */
    smMarketingSceneDelByRecommendIdIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMarketingSceneDelByRecommendIdIdDelete');
        }
        let baseUrl = '/smMarketingScene/delByRecommendId/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除栏位
     * @param fieldId 栏位id
     */
    smMarketingSceneDelFieldInfoDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling smMarketingSceneDelFieldInfoDelete');
        }
        let baseUrl = '/smMarketingScene/delFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fieldId': params.fieldId,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除站点
     * @param siteId 站点ID
     */
    smMarketingSceneDelSiteInfoDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling smMarketingSceneDelSiteInfoDelete');
        }
        let baseUrl = '/smMarketingScene/delSiteInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            siteId: params.siteId,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除策略模板
     * @param id id
     */
    smMarketingSceneDelStrategyTemplateIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMarketingSceneDelStrategyTemplateIdDelete');
        }
        let baseUrl = '/smMarketingScene/delStrategyTemplate/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 修改栏位
     * @param fieldId 栏位id
     * @param fieldName 栏位名称
     */
    smMarketingSceneEditFieldInfoPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "fieldId" is set
        if (params.fieldId == null) {
            throw new Error('Missing required parameter fieldId when calling smMarketingSceneEditFieldInfoPut');
        }
        // verify required parameter "fieldName" is set
        if (params.fieldName == null) {
            throw new Error('Missing required parameter fieldName when calling smMarketingSceneEditFieldInfoPut');
        }
        let baseUrl = '/smMarketingScene/editFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            fieldId: params.fieldId,
            'fieldName': params.fieldName,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 编辑站点
     * @param siteId siteId
     * @param siteName 站点名称
     */
    smMarketingSceneEditSiteInfoPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling smMarketingSceneEditSiteInfoPut');
        }
        // verify required parameter "siteName" is set
        if (params.siteName == null) {
            throw new Error('Missing required parameter siteName when calling smMarketingSceneEditSiteInfoPut');
        }
        let baseUrl = '/smMarketingScene/editSiteInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            siteId: params.siteId,
            'siteName': params.siteName,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 编辑策略模板
     * @param bizPerRecomStrategyTemplateEditInfo bizPerRecomStrategyTemplateEditInfo
     */
    smMarketingSceneEditStrategyTemplatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizPerRecomStrategyTemplateEditInfo" is set
        if (params.bizPerRecomStrategyTemplateEditInfo == null) {
            throw new Error('Missing required parameter bizPerRecomStrategyTemplateEditInfo when calling smMarketingSceneEditStrategyTemplatePut');
        }
        let baseUrl = '/smMarketingScene/editStrategyTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizPerRecomStrategyTemplateEditInfo) {
            fetchOptions.body = JSON.stringify(params.bizPerRecomStrategyTemplateEditInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 导出策略模板
     * @param id id
     */
    smMarketingSceneExportStrategyTemplateIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smMarketingSceneExportStrategyTemplateIdGet');
        }
        let baseUrl = '/smMarketingScene/exportStrategyTemplate/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 过滤策略标签配置（个性化推荐）
     * @param entityId 实体ID
     */
    smMarketingSceneFilterStrategyTagGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/filterStrategyTag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询已经设置好的站点有哪些客户端
     * @param siteId siteId
     */
    smMarketingSceneGetAppKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "siteId" is set
        if (params.siteId == null) {
            throw new Error('Missing required parameter siteId when calling smMarketingSceneGetAppKeyGet');
        }
        let baseUrl = '/smMarketingScene/getAppKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'siteId': params.siteId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取栏位
     * @param fieldId 栏位id
     */
    smMarketingSceneGetFieldInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/getFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'fieldId': params.fieldId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询站点
     * @param siteId siteId
     * @param isFilter isFilter
     */
    smMarketingSceneGetSiteInfoGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/getSiteInfo';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'siteId': params.siteId,
            'isFilter': params.isFilter,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 导入算法模板
     * @param file txt文件
     */
    smMarketingSceneImportBizPerRecomAlgorithmTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/importBizPerRecomAlgorithmTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            file: params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 导入策略模板
     * @param file 栏位id
     */
    smMarketingSceneImportStrategyTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/importStrategyTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };
        fetchOptions.body = querystring.stringify({
            file: params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询个性化推荐客户端(个性化推荐模块)
     * @param siteId 站点
     */
    smMarketingSceneQueryCurrentUserAppKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryCurrentUserAppKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            siteId: params.siteId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询客户端下栏位(个性化推荐模块)
     * @param appKey 客户端
     */
    smMarketingSceneQueryCurrentUserColumnByAppKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryCurrentUserColumnByAppKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'appKey': params.appKey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据客户端获取栏位
     * @param siteId 站点id
     * @param appKey 客户端
     */
    smMarketingSceneQueryFieldByAppKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryFieldByAppKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            siteId: params.siteId,
            appKey: params.appKey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询自动化营销场景配置
     */
    smMarketingSceneQueryMarketingSceneInfoGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryMarketingSceneInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询自动化营销场景单个决策树节点上限
     */
    smMarketingSceneQueryMarketingSceneNodeUpperLimitGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryMarketingSceneNodeUpperLimit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看优先推荐内容
     */
    smMarketingSceneQueryRecommendGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryRecommend';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询策略模板
     */
    smMarketingSceneQuerySceneConfigurationGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/querySceneConfiguration';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询策略用标签配置
     * @param entityId 实体ID
     */
    smMarketingSceneQueryStrategyTagGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/queryStrategyTag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新建栏位
     * @param bizFieldInfo bizFieldInfo
     */
    smMarketingSceneSaveFieldInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizFieldInfo" is set
        if (params.bizFieldInfo == null) {
            throw new Error('Missing required parameter bizFieldInfo when calling smMarketingSceneSaveFieldInfoPost');
        }
        let baseUrl = '/smMarketingScene/saveFieldInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizFieldInfo) {
            fetchOptions.body = JSON.stringify(params.bizFieldInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存自动化营销场景配置
     * @param smConfigKvInfo smConfigKvInfo
     */
    smMarketingSceneSaveMarketingScenePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigKvInfo" is set
        if (params.smConfigKvInfo == null) {
            throw new Error('Missing required parameter smConfigKvInfo when calling smMarketingSceneSaveMarketingScenePost');
        }
        let baseUrl = '/smMarketingScene/saveMarketingScene';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigKvInfo) {
            fetchOptions.body = JSON.stringify(params.smConfigKvInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新建站点
     * @param bizSiteInfo bizSiteInfo
     */
    smMarketingSceneSaveSiteInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "bizSiteInfo" is set
        if (params.bizSiteInfo == null) {
            throw new Error('Missing required parameter bizSiteInfo when calling smMarketingSceneSaveSiteInfoPost');
        }
        let baseUrl = '/smMarketingScene/saveSiteInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.bizSiteInfo) {
            fetchOptions.body = JSON.stringify(params.bizSiteInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存策略用标签配置
     * @param entityId 实体ID
     * @param labelName 标签名
     */
    smMarketingSceneSaveStrategyTagPost (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smMarketingScene/saveStrategyTag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
            labelName: params.labelName,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 策略模板调试
     * @param regular 策略模板内容
     */
    smMarketingSceneSceneConfigurationDebugGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "regular" is set
        if (params.regular == null) {
            throw new Error('Missing required parameter regular when calling smMarketingSceneSceneConfigurationDebugGet');
        }
        let baseUrl = '/smMarketingScene/sceneConfigurationDebug';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            regular: params.regular,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmmarketingscenecontrollerApi - functional programming interface
 */
exports.SmmarketingscenecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 新增策略模板
        * @param bizPerRecomStrategyTemplateInfo bizPerRecomStrategyTemplateInfo
        */
        smMarketingSceneAddStrategyTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneAddStrategyTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐算法模板列表
        */
        smMarketingSceneBizPerRecomAlgorithmTemplateListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneBizPerRecomAlgorithmTemplateListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除客户端
        * @param siteId 站点ID
        * @param appKey 客户端key
        */
        smMarketingSceneDelAppKeyInfoDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelAppKeyInfoDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除算法模板
        * @param id id
        */
        smMarketingSceneDelBizPerRecomAlgorithmTemplateIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelBizPerRecomAlgorithmTemplateIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除优先推荐
        * @param id id
        */
        smMarketingSceneDelByRecommendIdIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelByRecommendIdIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除栏位
        * @param fieldId 栏位id
        */
        smMarketingSceneDelFieldInfoDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelFieldInfoDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除站点
        * @param siteId 站点ID
        */
        smMarketingSceneDelSiteInfoDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelSiteInfoDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除策略模板
        * @param id id
        */
        smMarketingSceneDelStrategyTemplateIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneDelStrategyTemplateIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 修改栏位
        * @param fieldId 栏位id
        * @param fieldName 栏位名称
        */
        smMarketingSceneEditFieldInfoPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneEditFieldInfoPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 编辑站点
        * @param siteId siteId
        * @param siteName 站点名称
        */
        smMarketingSceneEditSiteInfoPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneEditSiteInfoPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 编辑策略模板
        * @param bizPerRecomStrategyTemplateEditInfo bizPerRecomStrategyTemplateEditInfo
        */
        smMarketingSceneEditStrategyTemplatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneEditStrategyTemplatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 导出策略模板
        * @param id id
        */
        smMarketingSceneExportStrategyTemplateIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneExportStrategyTemplateIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 过滤策略标签配置（个性化推荐）
        * @param entityId 实体ID
        */
        smMarketingSceneFilterStrategyTagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneFilterStrategyTagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询已经设置好的站点有哪些客户端
        * @param siteId siteId
        */
        smMarketingSceneGetAppKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneGetAppKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取栏位
        * @param fieldId 栏位id
        */
        smMarketingSceneGetFieldInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneGetFieldInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询站点
        * @param siteId siteId
        * @param isFilter isFilter
        */
        smMarketingSceneGetSiteInfoGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneGetSiteInfoGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 导入算法模板
        * @param file txt文件
        */
        smMarketingSceneImportBizPerRecomAlgorithmTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneImportBizPerRecomAlgorithmTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 导入策略模板
        * @param file 栏位id
        */
        smMarketingSceneImportStrategyTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneImportStrategyTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询个性化推荐客户端(个性化推荐模块)
        * @param siteId 站点
        */
        smMarketingSceneQueryCurrentUserAppKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryCurrentUserAppKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询客户端下栏位(个性化推荐模块)
        * @param appKey 客户端
        */
        smMarketingSceneQueryCurrentUserColumnByAppKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryCurrentUserColumnByAppKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据客户端获取栏位
        * @param siteId 站点id
        * @param appKey 客户端
        */
        smMarketingSceneQueryFieldByAppKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryFieldByAppKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询自动化营销场景配置
        */
        smMarketingSceneQueryMarketingSceneInfoGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryMarketingSceneInfoGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询自动化营销场景单个决策树节点上限
        */
        smMarketingSceneQueryMarketingSceneNodeUpperLimitGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryMarketingSceneNodeUpperLimitGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看优先推荐内容
        */
        smMarketingSceneQueryRecommendGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryRecommendGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询策略模板
        */
        smMarketingSceneQuerySceneConfigurationGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQuerySceneConfigurationGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询策略用标签配置
        * @param entityId 实体ID
        */
        smMarketingSceneQueryStrategyTagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneQueryStrategyTagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新建栏位
        * @param bizFieldInfo bizFieldInfo
        */
        smMarketingSceneSaveFieldInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneSaveFieldInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存自动化营销场景配置
        * @param smConfigKvInfo smConfigKvInfo
        */
        smMarketingSceneSaveMarketingScenePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneSaveMarketingScenePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新建站点
        * @param bizSiteInfo bizSiteInfo
        */
        smMarketingSceneSaveSiteInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneSaveSiteInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存策略用标签配置
        * @param entityId 实体ID
        * @param labelName 标签名
        */
        smMarketingSceneSaveStrategyTagPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneSaveStrategyTagPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 策略模板调试
        * @param regular 策略模板内容
        */
        smMarketingSceneSceneConfigurationDebugGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmmarketingscenecontrollerApiFetchParamCreator.smMarketingSceneSceneConfigurationDebugGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmorginfocontrollerApi - fetch parameter creator
 */
exports.SmorginfocontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入组织机构信息
     * @param smOrgInfo smOrgInfo
     */
    smOrgInfoAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smOrgInfo" is set
        if (params.smOrgInfo == null) {
            throw new Error('Missing required parameter smOrgInfo when calling smOrgInfoAddPost');
        }
        let baseUrl = '/smOrgInfo/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smOrgInfo) {
            fetchOptions.body = JSON.stringify(params.smOrgInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新组织机构状态
     * @param id 主键ID
     * @param enableStatus 状态(关0/开1)
     */
    smOrgInfoChangeStatusIdPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smOrgInfoChangeStatusIdPut');
        }
        // verify required parameter "enableStatus" is set
        if (params.enableStatus == null) {
            throw new Error('Missing required parameter enableStatus when calling smOrgInfoChangeStatusIdPut');
        }
        let baseUrl = '/smOrgInfo/changeStatus/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            enableStatus: params.enableStatus,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询组织名称是否存在
     * @param orgName 名称
     */
    smOrgInfoCheckByOrgNameGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smOrgInfo/checkByOrgName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            orgName: params.orgName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除组织机构信息
     * @param id 主键ID
     */
    smOrgInfoDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smOrgInfoDelIdDelete');
        }
        let baseUrl = '/smOrgInfo/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据组织机构代码查询
     * @param orgCode orgCode
     */
    smOrgInfoInfoByOrgCodeOrgCodeGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "orgCode" is set
        if (params.orgCode == null) {
            throw new Error('Missing required parameter orgCode when calling smOrgInfoInfoByOrgCodeOrgCodeGet');
        }
        let baseUrl = '/smOrgInfo/infoByOrgCode/{orgCode}'
            .replace('{' + 'orgCode' + '}', '' + params.orgCode);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询组织机构信息
     * @param id 主键ID
     */
    smOrgInfoInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smOrgInfoInfoIdGet');
        }
        let baseUrl = '/smOrgInfo/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询组织机构信息列表
     * @param orgName 名称
     */
    smOrgInfoListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smOrgInfo/list';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            orgName: params.orgName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询启用状态组织机构信息列表
     */
    smOrgInfoQueryOpenListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smOrgInfo/queryOpenList';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新组织机构信息
     * @param smOrgInfo smOrgInfo
     */
    smOrgInfoUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smOrgInfo" is set
        if (params.smOrgInfo == null) {
            throw new Error('Missing required parameter smOrgInfo when calling smOrgInfoUpdatePut');
        }
        let baseUrl = '/smOrgInfo/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smOrgInfo) {
            fetchOptions.body = JSON.stringify(params.smOrgInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmorginfocontrollerApi - functional programming interface
 */
exports.SmorginfocontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入组织机构信息
        * @param smOrgInfo smOrgInfo
        */
        smOrgInfoAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新组织机构状态
        * @param id 主键ID
        * @param enableStatus 状态(关0/开1)
        */
        smOrgInfoChangeStatusIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoChangeStatusIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询组织名称是否存在
        * @param orgName 名称
        */
        smOrgInfoCheckByOrgNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoCheckByOrgNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除组织机构信息
        * @param id 主键ID
        */
        smOrgInfoDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据组织机构代码查询
        * @param orgCode orgCode
        */
        smOrgInfoInfoByOrgCodeOrgCodeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoInfoByOrgCodeOrgCodeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询组织机构信息
        * @param id 主键ID
        */
        smOrgInfoInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询组织机构信息列表
        * @param orgName 名称
        */
        smOrgInfoListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询启用状态组织机构信息列表
        */
        smOrgInfoQueryOpenListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoQueryOpenListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新组织机构信息
        * @param smOrgInfo smOrgInfo
        */
        smOrgInfoUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmorginfocontrollerApiFetchParamCreator.smOrgInfoUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmpostinfocontrollerApi - fetch parameter creator
 */
exports.SmpostinfocontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入系统管理-岗位信息--用户组织机构、权限模板对应表
     * @param smPostInfoPO smPostInfoPO
     */
    smPostInfoAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smPostInfoPO" is set
        if (params.smPostInfoPO == null) {
            throw new Error('Missing required parameter smPostInfoPO when calling smPostInfoAddPost');
        }
        let baseUrl = '/smPostInfo/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smPostInfoPO) {
            fetchOptions.body = JSON.stringify(params.smPostInfoPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除系统管理-岗位信息--用户组织机构、权限模板对应表
     * @param id id
     */
    smPostInfoDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smPostInfoDelIdDelete');
        }
        let baseUrl = '/smPostInfo/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询系统管理-岗位信息--用户组织机构、权限模板对应表
     * @param id id
     */
    smPostInfoInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smPostInfoInfoIdGet');
        }
        let baseUrl = '/smPostInfo/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询系统管理-岗位信息--用户组织机构、权限模板对应表列表
     */
    smPostInfoListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smPostInfo/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询系统管理-岗位信息--用户组织机构、权限模板对应表
     */
    smPostInfoPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smPostInfo/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新系统管理-岗位信息--用户组织机构、权限模板对应表
     * @param smPostInfoPO smPostInfoPO
     */
    smPostInfoUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smPostInfoPO" is set
        if (params.smPostInfoPO == null) {
            throw new Error('Missing required parameter smPostInfoPO when calling smPostInfoUpdatePut');
        }
        let baseUrl = '/smPostInfo/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smPostInfoPO) {
            fetchOptions.body = JSON.stringify(params.smPostInfoPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmpostinfocontrollerApi - functional programming interface
 */
exports.SmpostinfocontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入系统管理-岗位信息--用户组织机构、权限模板对应表
        * @param smPostInfoPO smPostInfoPO
        */
        smPostInfoAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除系统管理-岗位信息--用户组织机构、权限模板对应表
        * @param id id
        */
        smPostInfoDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询系统管理-岗位信息--用户组织机构、权限模板对应表
        * @param id id
        */
        smPostInfoInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询系统管理-岗位信息--用户组织机构、权限模板对应表列表
        */
        smPostInfoListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询系统管理-岗位信息--用户组织机构、权限模板对应表
        */
        smPostInfoPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新系统管理-岗位信息--用户组织机构、权限模板对应表
        * @param smPostInfoPO smPostInfoPO
        */
        smPostInfoUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostinfocontrollerApiFetchParamCreator.smPostInfoUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmpostorgmapcontrollerApi - fetch parameter creator
 */
exports.SmpostorgmapcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入岗位组织机构对应关系
     * @param smPostOrgMapPO smPostOrgMapPO
     */
    smPostOrgMapAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smPostOrgMapPO" is set
        if (params.smPostOrgMapPO == null) {
            throw new Error('Missing required parameter smPostOrgMapPO when calling smPostOrgMapAddPost');
        }
        let baseUrl = '/smPostOrgMap/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smPostOrgMapPO) {
            fetchOptions.body = JSON.stringify(params.smPostOrgMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除岗位组织机构对应关系
     * @param id id
     */
    smPostOrgMapDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smPostOrgMapDelIdDelete');
        }
        let baseUrl = '/smPostOrgMap/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询岗位组织机构对应关系
     * @param id id
     */
    smPostOrgMapInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smPostOrgMapInfoIdGet');
        }
        let baseUrl = '/smPostOrgMap/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询岗位组织机构对应关系列表
     */
    smPostOrgMapListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smPostOrgMap/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询岗位组织机构对应关系
     */
    smPostOrgMapPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smPostOrgMap/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新岗位组织机构对应关系
     * @param smPostOrgMapPO smPostOrgMapPO
     */
    smPostOrgMapUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smPostOrgMapPO" is set
        if (params.smPostOrgMapPO == null) {
            throw new Error('Missing required parameter smPostOrgMapPO when calling smPostOrgMapUpdatePut');
        }
        let baseUrl = '/smPostOrgMap/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smPostOrgMapPO) {
            fetchOptions.body = JSON.stringify(params.smPostOrgMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmpostorgmapcontrollerApi - functional programming interface
 */
exports.SmpostorgmapcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入岗位组织机构对应关系
        * @param smPostOrgMapPO smPostOrgMapPO
        */
        smPostOrgMapAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除岗位组织机构对应关系
        * @param id id
        */
        smPostOrgMapDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询岗位组织机构对应关系
        * @param id id
        */
        smPostOrgMapInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询岗位组织机构对应关系列表
        */
        smPostOrgMapListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询岗位组织机构对应关系
        */
        smPostOrgMapPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新岗位组织机构对应关系
        * @param smPostOrgMapPO smPostOrgMapPO
        */
        smPostOrgMapUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmpostorgmapcontrollerApiFetchParamCreator.smPostOrgMapUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmreportmanagementcontrollerApi - fetch parameter creator
 */
exports.SmreportmanagementcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 查询报表管理信息
     */
    smReportManagementQueryReportConfigInfoGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smReportManagement/queryReportConfigInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询报表管理单个漏斗层数节点上限
     */
    smReportManagementQueryReportConfigInfoStepUpperLimitGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smReportManagement/queryReportConfigInfoStepUpperLimit';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存报表配置信息
     * @param smConfigKvInfo smConfigKvInfo
     */
    smReportManagementSaveReportManagementPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smConfigKvInfo" is set
        if (params.smConfigKvInfo == null) {
            throw new Error('Missing required parameter smConfigKvInfo when calling smReportManagementSaveReportManagementPost');
        }
        let baseUrl = '/smReportManagement/saveReportManagement';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smConfigKvInfo) {
            fetchOptions.body = JSON.stringify(params.smConfigKvInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmreportmanagementcontrollerApi - functional programming interface
 */
exports.SmreportmanagementcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 查询报表管理信息
        */
        smReportManagementQueryReportConfigInfoGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmreportmanagementcontrollerApiFetchParamCreator.smReportManagementQueryReportConfigInfoGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询报表管理单个漏斗层数节点上限
        */
        smReportManagementQueryReportConfigInfoStepUpperLimitGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmreportmanagementcontrollerApiFetchParamCreator.smReportManagementQueryReportConfigInfoStepUpperLimitGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存报表配置信息
        * @param smConfigKvInfo smConfigKvInfo
        */
        smReportManagementSaveReportManagementPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmreportmanagementcontrollerApiFetchParamCreator.smReportManagementSaveReportManagementPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmresourceinfocontrollerApi - fetch parameter creator
 */
exports.SmresourceinfocontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 新增一级菜单
     * @param smResourceOneLevelInfo smResourceOneLevelInfo
     */
    smResourceInfoAddOneLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceOneLevelInfo" is set
        if (params.smResourceOneLevelInfo == null) {
            throw new Error('Missing required parameter smResourceOneLevelInfo when calling smResourceInfoAddOneLevelPost');
        }
        let baseUrl = '/smResourceInfo/addOneLevel';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceOneLevelInfo) {
            fetchOptions.body = JSON.stringify(params.smResourceOneLevelInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增区块/按钮
     * @param smResourceThreeLevelInfo smResourceThreeLevelInfo
     * @param isCascadeAdd isCascadeAdd
     */
    smResourceInfoAddThreeLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceThreeLevelInfo" is set
        if (params.smResourceThreeLevelInfo == null) {
            throw new Error('Missing required parameter smResourceThreeLevelInfo when calling smResourceInfoAddThreeLevelPost');
        }
        // verify required parameter "isCascadeAdd" is set
        if (params.isCascadeAdd == null) {
            throw new Error('Missing required parameter isCascadeAdd when calling smResourceInfoAddThreeLevelPost');
        }
        let baseUrl = '/smResourceInfo/addThreeLevel';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'isCascadeAdd': params.isCascadeAdd,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceThreeLevelInfo) {
            fetchOptions.body = JSON.stringify(params.smResourceThreeLevelInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增二级菜单
     * @param smResourceTwoLevelInfo smResourceTwoLevelInfo
     * @param isCascadeAdd isCascadeAdd
     */
    smResourceInfoAddTwoLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceTwoLevelInfo" is set
        if (params.smResourceTwoLevelInfo == null) {
            throw new Error('Missing required parameter smResourceTwoLevelInfo when calling smResourceInfoAddTwoLevelPost');
        }
        // verify required parameter "isCascadeAdd" is set
        if (params.isCascadeAdd == null) {
            throw new Error('Missing required parameter isCascadeAdd when calling smResourceInfoAddTwoLevelPost');
        }
        let baseUrl = '/smResourceInfo/addTwoLevel';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            isCascadeAdd: params.isCascadeAdd,
        });
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceTwoLevelInfo) {
            fetchOptions.body = JSON.stringify(params.smResourceTwoLevelInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询该KEY是否存在
     * @param resourceKey KEY
     */
    smResourceInfoCheckResourceKeyGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "resourceKey" is set
        if (params.resourceKey == null) {
            throw new Error('Missing required parameter resourceKey when calling smResourceInfoCheckResourceKeyGet');
        }
        let baseUrl = '/smResourceInfo/checkResourceKey';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            resourceKey: params.resourceKey,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询该ResourceTitle是否存在
     * @param resourceTitle ResourceTitle
     * @param id id
     */
    smResourceInfoCheckResourceTitleGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "resourceTitle" is set
        if (params.resourceTitle == null) {
            throw new Error('Missing required parameter resourceTitle when calling smResourceInfoCheckResourceTitleGet');
        }
        let baseUrl = '/smResourceInfo/checkResourceTitle';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'resourceTitle': params.resourceTitle,
            'id': params.id,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除资源表
     * @param id id
     */
    smResourceInfoDelResourceIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smResourceInfoDelResourceIdDelete');
        }
        let baseUrl = '/smResourceInfo/delResource/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询资源表列表
     * @param resourceTitle resourceTitle
     */
    smResourceInfoQueryResourceListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smResourceInfo/queryResourceList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'resourceTitle': params.resourceTitle,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看/编辑资源表
     * @param id id
     */
    smResourceInfoResourceInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smResourceInfoResourceInfoIdGet');
        }
        let baseUrl = '/smResourceInfo/resourceInfo/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新一级菜单
     * @param smResourceOneLevelUO smResourceOneLevelUO
     */
    smResourceInfoUpdateOneLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceOneLevelUO" is set
        if (params.smResourceOneLevelUO == null) {
            throw new Error('Missing required parameter smResourceOneLevelUO when calling smResourceInfoUpdateOneLevelPost');
        }
        let baseUrl = '/smResourceInfo/updateOneLevel';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceOneLevelUO) {
            fetchOptions.body = JSON.stringify(params.smResourceOneLevelUO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新区块/按钮
     * @param smResourceThreeLevelUO smResourceThreeLevelUO
     */
    smResourceInfoUpdateThreeLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceThreeLevelUO" is set
        if (params.smResourceThreeLevelUO == null) {
            throw new Error('Missing required parameter smResourceThreeLevelUO when calling smResourceInfoUpdateThreeLevelPost');
        }
        let baseUrl = '/smResourceInfo/updateThreeLevel';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceThreeLevelUO) {
            fetchOptions.body = JSON.stringify(params.smResourceThreeLevelUO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更新二级菜单
     * @param smResourceTwoLevelUO smResourceTwoLevelUO
     */
    smResourceInfoUpdateTwoLevelPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smResourceTwoLevelUO" is set
        if (params.smResourceTwoLevelUO == null) {
            throw new Error('Missing required parameter smResourceTwoLevelUO when calling smResourceInfoUpdateTwoLevelPost');
        }
        let baseUrl = '/smResourceInfo/updateTwoLevel';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smResourceTwoLevelUO) {
            fetchOptions.body = JSON.stringify(params.smResourceTwoLevelUO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmresourceinfocontrollerApi - functional programming interface
 */
exports.SmresourceinfocontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 新增一级菜单
        * @param smResourceOneLevelInfo smResourceOneLevelInfo
        */
        smResourceInfoAddOneLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoAddOneLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增区块/按钮
        * @param smResourceThreeLevelInfo smResourceThreeLevelInfo
        * @param isCascadeAdd isCascadeAdd
        */
        smResourceInfoAddThreeLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoAddThreeLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增二级菜单
        * @param smResourceTwoLevelInfo smResourceTwoLevelInfo
        * @param isCascadeAdd isCascadeAdd
        */
        smResourceInfoAddTwoLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoAddTwoLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询该KEY是否存在
        * @param resourceKey KEY
        */
        smResourceInfoCheckResourceKeyGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoCheckResourceKeyGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询该ResourceTitle是否存在
        * @param resourceTitle ResourceTitle
        * @param id id
        */
        smResourceInfoCheckResourceTitleGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoCheckResourceTitleGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除资源表
        * @param id id
        */
        smResourceInfoDelResourceIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoDelResourceIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询资源表列表
        * @param resourceTitle resourceTitle
        */
        smResourceInfoQueryResourceListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoQueryResourceListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看/编辑资源表
        * @param id id
        */
        smResourceInfoResourceInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoResourceInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新一级菜单
        * @param smResourceOneLevelUO smResourceOneLevelUO
        */
        smResourceInfoUpdateOneLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoUpdateOneLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新区块/按钮
        * @param smResourceThreeLevelUO smResourceThreeLevelUO
        */
        smResourceInfoUpdateThreeLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoUpdateThreeLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更新二级菜单
        * @param smResourceTwoLevelUO smResourceTwoLevelUO
        */
        smResourceInfoUpdateTwoLevelPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmresourceinfocontrollerApiFetchParamCreator.smResourceInfoUpdateTwoLevelPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmrowauthormapcontrollerApi - fetch parameter creator
 */
exports.SmrowauthormapcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入行资源映射
     * @param smRowAuthorMapPO smRowAuthorMapPO
     */
    smRowAuthorMapAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smRowAuthorMapPO" is set
        if (params.smRowAuthorMapPO == null) {
            throw new Error('Missing required parameter smRowAuthorMapPO when calling smRowAuthorMapAddPost');
        }
        let baseUrl = '/smRowAuthorMap/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smRowAuthorMapPO) {
            fetchOptions.body = JSON.stringify(params.smRowAuthorMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除行资源映射
     * @param id id
     */
    smRowAuthorMapDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smRowAuthorMapDelIdDelete');
        }
        let baseUrl = '/smRowAuthorMap/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询行资源映射
     * @param id id
     */
    smRowAuthorMapInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smRowAuthorMapInfoIdGet');
        }
        let baseUrl = '/smRowAuthorMap/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询行资源映射列表
     */
    smRowAuthorMapListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smRowAuthorMap/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询行资源映射
     */
    smRowAuthorMapPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smRowAuthorMap/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新行资源映射
     * @param smRowAuthorMapPO smRowAuthorMapPO
     */
    smRowAuthorMapUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smRowAuthorMapPO" is set
        if (params.smRowAuthorMapPO == null) {
            throw new Error('Missing required parameter smRowAuthorMapPO when calling smRowAuthorMapUpdatePut');
        }
        let baseUrl = '/smRowAuthorMap/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smRowAuthorMapPO) {
            fetchOptions.body = JSON.stringify(params.smRowAuthorMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmrowauthormapcontrollerApi - functional programming interface
 */
exports.SmrowauthormapcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入行资源映射
        * @param smRowAuthorMapPO smRowAuthorMapPO
        */
        smRowAuthorMapAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除行资源映射
        * @param id id
        */
        smRowAuthorMapDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询行资源映射
        * @param id id
        */
        smRowAuthorMapInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询行资源映射列表
        */
        smRowAuthorMapListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询行资源映射
        */
        smRowAuthorMapPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新行资源映射
        * @param smRowAuthorMapPO smRowAuthorMapPO
        */
        smRowAuthorMapUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmrowauthormapcontrollerApiFetchParamCreator.smRowAuthorMapUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmsafetemplatecontrollerApi - fetch parameter creator
 */
exports.SmsafetemplatecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 根据id更新脱敏模板状态
     * @param id 主键
     */
    smSafeTemplateChangeSafeTemplateStatusByIdPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smSafeTemplateChangeSafeTemplateStatusByIdPut');
        }
        let baseUrl = '/smSafeTemplate/changeSafeTemplateStatusById';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'id': params.id,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id批量删除脱敏模板信息
     * @param ids ids
     */
    smSafeTemplateDelSafeTemplateByIdsDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "ids" is set
        if (params.ids == null) {
            throw new Error('Missing required parameter ids when calling smSafeTemplateDelSafeTemplateByIdsDelete');
        }
        let baseUrl = '/smSafeTemplate/delSafeTemplateByIds';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.ids) {
            fetchOptions.body = JSON.stringify(params.ids || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 脱敏模板列表
     * @param templateType templateType
     */
    smSafeTemplateQuerySafeTemplateListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smSafeTemplate/querySafeTemplateList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            templateType: params.templateType,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询脱敏模板信息
     * @param id id
     */
    smSafeTemplateSafeTemplateInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smSafeTemplateSafeTemplateInfoIdGet');
        }
        let baseUrl = '/smSafeTemplate/safeTemplateInfo/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询脱敏模板信息
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param templateName templateName
     * @param templateType templateType
     */
    smSafeTemplateSafeTemplatePageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smSafeTemplateSafeTemplatePageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smSafeTemplateSafeTemplatePageGet');
        }
        let baseUrl = '/smSafeTemplate/safeTemplatePage';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'pageNum': params.pageNum,
            pageSize: params.pageSize,
            'templateName': params.templateName,
            'templateType': params.templateType,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存脱敏模板信息
     * @param smSafeTemplateInfo smSafeTemplateInfo
     */
    smSafeTemplateSaveSafeTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smSafeTemplateInfo" is set
        if (params.smSafeTemplateInfo == null) {
            throw new Error('Missing required parameter smSafeTemplateInfo when calling smSafeTemplateSaveSafeTemplatePost');
        }
        let baseUrl = '/smSafeTemplate/saveSafeTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smSafeTemplateInfo) {
            fetchOptions.body = JSON.stringify(params.smSafeTemplateInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmsafetemplatecontrollerApi - functional programming interface
 */
exports.SmsafetemplatecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 根据id更新脱敏模板状态
        * @param id 主键
        */
        smSafeTemplateChangeSafeTemplateStatusByIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateChangeSafeTemplateStatusByIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id批量删除脱敏模板信息
        * @param ids ids
        */
        smSafeTemplateDelSafeTemplateByIdsDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateDelSafeTemplateByIdsDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 脱敏模板列表
        * @param templateType templateType
        */
        smSafeTemplateQuerySafeTemplateListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateQuerySafeTemplateListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询脱敏模板信息
        * @param id id
        */
        smSafeTemplateSafeTemplateInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateSafeTemplateInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询脱敏模板信息
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param templateName templateName
        * @param templateType templateType
        */
        smSafeTemplateSafeTemplatePageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateSafeTemplatePageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存脱敏模板信息
        * @param smSafeTemplateInfo smSafeTemplateInfo
        */
        smSafeTemplateSaveSafeTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmsafetemplatecontrollerApiFetchParamCreator.smSafeTemplateSaveSafeTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmshortmessagegroupcontrollerApi - fetch parameter creator
 */
exports.SmshortmessagegroupcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入短信组
     * @param smShortMessageGroupPO smShortMessageGroupPO
     */
    smShortMessageGroupAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smShortMessageGroupPO" is set
        if (params.smShortMessageGroupPO == null) {
            throw new Error('Missing required parameter smShortMessageGroupPO when calling smShortMessageGroupAddPost');
        }
        let baseUrl = '/smShortMessageGroup/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smShortMessageGroupPO) {
            fetchOptions.body = JSON.stringify(params.smShortMessageGroupPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 检查短信组名是否重复
     * @param shortMessageGroupName shortMessageGroupName
     */
    smShortMessageGroupCheckRepeatGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "shortMessageGroupName" is set
        if (params.shortMessageGroupName == null) {
            throw new Error('Missing required parameter shortMessageGroupName when calling smShortMessageGroupCheckRepeatGet');
        }
        let baseUrl = '/smShortMessageGroup/checkRepeat';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            shortMessageGroupName: params.shortMessageGroupName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除短信组
     * @param id id
     */
    smShortMessageGroupDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smShortMessageGroupDelIdDelete');
        }
        let baseUrl = '/smShortMessageGroup/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询短信组
     * @param id id
     */
    smShortMessageGroupInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smShortMessageGroupInfoIdGet');
        }
        let baseUrl = '/smShortMessageGroup/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询短信组列表
     */
    smShortMessageGroupListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smShortMessageGroup/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询短信组
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    smShortMessageGroupPageGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smShortMessageGroupPageGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smShortMessageGroupPageGet');
        }
        let baseUrl = '/smShortMessageGroup/page';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新短信组
     * @param smShortMessageGroupPO smShortMessageGroupPO
     */
    smShortMessageGroupUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smShortMessageGroupPO" is set
        if (params.smShortMessageGroupPO == null) {
            throw new Error('Missing required parameter smShortMessageGroupPO when calling smShortMessageGroupUpdatePut');
        }
        let baseUrl = '/smShortMessageGroup/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smShortMessageGroupPO) {
            fetchOptions.body = JSON.stringify(params.smShortMessageGroupPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmshortmessagegroupcontrollerApi - functional programming interface
 */
exports.SmshortmessagegroupcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入短信组
        * @param smShortMessageGroupPO smShortMessageGroupPO
        */
        smShortMessageGroupAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 检查短信组名是否重复
        * @param shortMessageGroupName shortMessageGroupName
        */
        smShortMessageGroupCheckRepeatGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupCheckRepeatGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除短信组
        * @param id id
        */
        smShortMessageGroupDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询短信组
        * @param id id
        */
        smShortMessageGroupInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询短信组列表
        */
        smShortMessageGroupListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询短信组
        * @param pageNum pageNum
        * @param pageSize pageSize
        */
        smShortMessageGroupPageGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupPageGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新短信组
        * @param smShortMessageGroupPO smShortMessageGroupPO
        */
        smShortMessageGroupUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmshortmessagegroupcontrollerApiFetchParamCreator.smShortMessageGroupUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmtagauthormapcontrollerApi - fetch parameter creator
 */
exports.SmtagauthormapcontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 插入标签权限映射
     * @param smTagAuthorMapPO smTagAuthorMapPO
     */
    smTagAuthorMapAddPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smTagAuthorMapPO" is set
        if (params.smTagAuthorMapPO == null) {
            throw new Error('Missing required parameter smTagAuthorMapPO when calling smTagAuthorMapAddPost');
        }
        let baseUrl = '/smTagAuthorMap/add';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smTagAuthorMapPO) {
            fetchOptions.body = JSON.stringify(params.smTagAuthorMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id删除标签权限映射
     * @param id id
     */
    smTagAuthorMapDelIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTagAuthorMapDelIdDelete');
        }
        let baseUrl = '/smTagAuthorMap/del/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id查询标签权限映射
     * @param id id
     */
    smTagAuthorMapInfoIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTagAuthorMapInfoIdGet');
        }
        let baseUrl = '/smTagAuthorMap/info/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询标签权限映射列表
     */
    smTagAuthorMapListGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTagAuthorMap/list';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询标签权限映射
     */
    smTagAuthorMapPageGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTagAuthorMap/page';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据id更新标签权限映射
     * @param smTagAuthorMapPO smTagAuthorMapPO
     */
    smTagAuthorMapUpdatePut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smTagAuthorMapPO" is set
        if (params.smTagAuthorMapPO == null) {
            throw new Error('Missing required parameter smTagAuthorMapPO when calling smTagAuthorMapUpdatePut');
        }
        let baseUrl = '/smTagAuthorMap/update';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smTagAuthorMapPO) {
            fetchOptions.body = JSON.stringify(params.smTagAuthorMapPO || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmtagauthormapcontrollerApi - functional programming interface
 */
exports.SmtagauthormapcontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 插入标签权限映射
        * @param smTagAuthorMapPO smTagAuthorMapPO
        */
        smTagAuthorMapAddPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapAddPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id删除标签权限映射
        * @param id id
        */
        smTagAuthorMapDelIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapDelIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id查询标签权限映射
        * @param id id
        */
        smTagAuthorMapInfoIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapInfoIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询标签权限映射列表
        */
        smTagAuthorMapListGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapListGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询标签权限映射
        */
        smTagAuthorMapPageGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapPageGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据id更新标签权限映射
        * @param smTagAuthorMapPO smTagAuthorMapPO
        */
        smTagAuthorMapUpdatePut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtagauthormapcontrollerApiFetchParamCreator.smTagAuthorMapUpdatePut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmtemplatecontrollerApi - fetch parameter creator
 */
exports.SmtemplatecontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 更改模板状态
     * @param id id
     */
    smTemplateChangeTemplateStateIdPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTemplateChangeTemplateStateIdPut');
        }
        let baseUrl = '/smTemplate/changeTemplateState/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除模板
     * @param id 模板id数组
     */
    smTemplateDelByTemplateIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/delByTemplateId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            id: params.id,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据实体ID获取ID信息配置和标签(查看/编辑列模板用)
     * @param entityId entityId
     * @param templateId templateId
     */
    smTemplateFindIdAndTagByEntityIdAndTemplateIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling smTemplateFindIdAndTagByEntityIdAndTemplateIdGet');
        }
        // verify required parameter "templateId" is set
        if (params.templateId == null) {
            throw new Error('Missing required parameter templateId when calling smTemplateFindIdAndTagByEntityIdAndTemplateIdGet');
        }
        let baseUrl = '/smTemplate/findIdAndTagByEntityIdAndTemplateId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
            templateId: params.templateId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据模板ID获取模板信息和线下明细配置(查看/编辑列模板用)
     * @param templateId templateId
     */
    smTemplateFindTemplateAndOfflineByTemplateIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "templateId" is set
        if (params.templateId == null) {
            throw new Error('Missing required parameter templateId when calling smTemplateFindTemplateAndOfflineByTemplateIdGet');
        }
        let baseUrl = '/smTemplate/findTemplateAndOfflineByTemplateId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            templateId: params.templateId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据模板ID获取模板信息和选中菜单信息(查看/编辑功能权限模板用)
     * @param templateId templateId
     */
    smTemplateFindTemplateAndResourceByTemplateIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "templateId" is set
        if (params.templateId == null) {
            throw new Error('Missing required parameter templateId when calling smTemplateFindTemplateAndResourceByTemplateIdGet');
        }
        let baseUrl = '/smTemplate/findTemplateAndResourceByTemplateId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'templateId': params.templateId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 当前模板名称是否存在
     * @param templateName 模板名称
     */
    smTemplateIsExitTemplateNameGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/isExitTemplateName';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            templateName: params.templateName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看已经编辑行权限实体渠道
     * @param id id
     * @param entityId  实体ID
     */
    smTemplateQueryAlreadyEditEntityActionIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTemplateQueryAlreadyEditEntityActionIdGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling smTemplateQueryAlreadyEditEntityActionIdGet');
        }
        let baseUrl = '/smTemplate/queryAlreadyEditEntityAction/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看已经编辑行权限实体属性
     * @param id id
     * @param entityId  实体ID
     */
    smTemplateQueryAlreadyEditEntityIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTemplateQueryAlreadyEditEntityIdGet');
        }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling smTemplateQueryAlreadyEditEntityIdGet');
        }
        let baseUrl = '/smTemplate/queryAlreadyEditEntity/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看行权限客户端
     */
    smTemplateQueryAppKeyGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryAppKey';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询当前用户所有客户端(个性化推荐模块)
     */
    smTemplateQueryCurrentUserAppKeyGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryCurrentUserAppKey';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询当前岗位的线下交易(个性化推荐模块)
     */
    smTemplateQueryCurrentUserOffLineTransactionGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryCurrentUserOffLineTransaction';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据实体ID查询当前岗位的渠道(个性化推荐模块)
     * @param entityId  实体ID
     */
    smTemplateQueryCurrentUserTagByEntityIdGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryCurrentUserTagByEntityId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看行权限实体属性
     * @param entityId  实体ID
     */
    smTemplateQueryEntityAttributeGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryEntityAttribute';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看行权限实体渠道
     * @param entityId 实体
     */
    smTemplateQueryEntityTagGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryEntityTag';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            entityId: params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 根据实体ID获取ID信息配置和标签(新增列模板用)
     * @param entityId entityId
     */
    smTemplateQueryIdAndTagByEntityIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "entityId" is set
        if (params.entityId == null) {
            throw new Error('Missing required parameter entityId when calling smTemplateQueryIdAndTagByEntityIdGet');
        }
        let baseUrl = '/smTemplate/queryIdAndTagByEntityId';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'entityId': params.entityId,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看行权限线下交易
     */
    smTemplateQueryOfflineTransactionGet (options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/queryOfflineTransaction';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看行权限模板信息
     * @param id id
     */
    smTemplateQueryRowAuthorityTemplateIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smTemplateQueryRowAuthorityTemplateIdGet');
        }
        let baseUrl = '/smTemplate/queryRowAuthorityTemplate/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询模板列表
     * @param templateType templateType
     */
    smTemplateQuerySmTemplateListGet (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smTemplate/querySmTemplateList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'templateType': params.templateType,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 分页查询模板列表
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param templateName 模板名称
     * @param templateNameOrder 名称排序(1升序 2降序)
     * @param templateType 模板类型(1功能 2行 3列)
     * @param templateTypeOrder 模板类型排序(1升序 2降序)
     */
    smTemplateQueryTemplateListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smTemplateQueryTemplateListGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smTemplateQueryTemplateListGet');
        }
        let baseUrl = '/smTemplate/queryTemplateList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            templateName: params.templateName,
            templateNameOrder: params.templateNameOrder,
            templateType: params.templateType,
            templateTypeOrder: params.templateTypeOrder,
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存列字段模板
     * @param smColumnTemplateInfo smColumnTemplateInfo
     */
    smTemplateSaveColumnTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smColumnTemplateInfo" is set
        if (params.smColumnTemplateInfo == null) {
            throw new Error('Missing required parameter smColumnTemplateInfo when calling smTemplateSaveColumnTemplatePost');
        }
        let baseUrl = '/smTemplate/saveColumnTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smColumnTemplateInfo) {
            fetchOptions.body = JSON.stringify(params.smColumnTemplateInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存功能权限模板
     * @param smOperTemplateInfo smOperTemplateInfo
     */
    smTemplateSaveOperTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "smOperTemplateInfo" is set
        if (params.smOperTemplateInfo == null) {
            throw new Error('Missing required parameter smOperTemplateInfo when calling smTemplateSaveOperTemplatePost');
        }
        let baseUrl = '/smTemplate/saveOperTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.smOperTemplateInfo) {
            fetchOptions.body = JSON.stringify(params.smOperTemplateInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 保存行字段权限模板
     * @param rowAuthorityTemplateInfo rowAuthorityTemplateInfo
     */
    smTemplateSaveRowAuthorityTemplatePost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "rowAuthorityTemplateInfo" is set
        if (params.rowAuthorityTemplateInfo == null) {
            throw new Error('Missing required parameter rowAuthorityTemplateInfo when calling smTemplateSaveRowAuthorityTemplatePost');
        }
        let baseUrl = '/smTemplate/saveRowAuthorityTemplate';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.rowAuthorityTemplateInfo) {
            fetchOptions.body = JSON.stringify(params.rowAuthorityTemplateInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmtemplatecontrollerApi - functional programming interface
 */
exports.SmtemplatecontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 更改模板状态
        * @param id id
        */
        smTemplateChangeTemplateStateIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateChangeTemplateStateIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除模板
        * @param id 模板id数组
        */
        smTemplateDelByTemplateIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateDelByTemplateIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据实体ID获取ID信息配置和标签(查看/编辑列模板用)
        * @param entityId entityId
        * @param templateId templateId
        */
        smTemplateFindIdAndTagByEntityIdAndTemplateIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateFindIdAndTagByEntityIdAndTemplateIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据模板ID获取模板信息和线下明细配置(查看/编辑列模板用)
        * @param templateId templateId
        */
        smTemplateFindTemplateAndOfflineByTemplateIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateFindTemplateAndOfflineByTemplateIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据模板ID获取模板信息和选中菜单信息(查看/编辑功能权限模板用)
        * @param templateId templateId
        */
        smTemplateFindTemplateAndResourceByTemplateIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateFindTemplateAndResourceByTemplateIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 当前模板名称是否存在
        * @param templateName 模板名称
        */
        smTemplateIsExitTemplateNameGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateIsExitTemplateNameGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看已经编辑行权限实体渠道
        * @param id id
        * @param entityId  实体ID
        */
        smTemplateQueryAlreadyEditEntityActionIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryAlreadyEditEntityActionIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看已经编辑行权限实体属性
        * @param id id
        * @param entityId  实体ID
        */
        smTemplateQueryAlreadyEditEntityIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryAlreadyEditEntityIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看行权限客户端
        */
        smTemplateQueryAppKeyGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryAppKeyGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询当前用户所有客户端(个性化推荐模块)
        */
        smTemplateQueryCurrentUserAppKeyGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryCurrentUserAppKeyGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询当前岗位的线下交易(个性化推荐模块)
        */
        smTemplateQueryCurrentUserOffLineTransactionGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryCurrentUserOffLineTransactionGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据实体ID查询当前岗位的渠道(个性化推荐模块)
        * @param entityId  实体ID
        */
        smTemplateQueryCurrentUserTagByEntityIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryCurrentUserTagByEntityIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看行权限实体属性
        * @param entityId  实体ID
        */
        smTemplateQueryEntityAttributeGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryEntityAttributeGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看行权限实体渠道
        * @param entityId 实体
        */
        smTemplateQueryEntityTagGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryEntityTagGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 根据实体ID获取ID信息配置和标签(新增列模板用)
        * @param entityId entityId
        */
        smTemplateQueryIdAndTagByEntityIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryIdAndTagByEntityIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看行权限线下交易
        */
        smTemplateQueryOfflineTransactionGet (options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryOfflineTransactionGet(options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看行权限模板信息
        * @param id id
        */
        smTemplateQueryRowAuthorityTemplateIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryRowAuthorityTemplateIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询模板列表
        * @param templateType templateType
        */
        smTemplateQuerySmTemplateListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQuerySmTemplateListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 分页查询模板列表
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param templateName 模板名称
        * @param templateNameOrder 名称排序(1升序 2降序)
        * @param templateType 模板类型(1功能 2行 3列)
        * @param templateTypeOrder 模板类型排序(1升序 2降序)
        */
        smTemplateQueryTemplateListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateQueryTemplateListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存列字段模板
        * @param smColumnTemplateInfo smColumnTemplateInfo
        */
        smTemplateSaveColumnTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateSaveColumnTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存功能权限模板
        * @param smOperTemplateInfo smOperTemplateInfo
        */
        smTemplateSaveOperTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateSaveOperTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 保存行字段权限模板
        * @param rowAuthorityTemplateInfo rowAuthorityTemplateInfo
        */
        smTemplateSaveRowAuthorityTemplatePost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmtemplatecontrollerApiFetchParamCreator.smTemplateSaveRowAuthorityTemplatePost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};
/**
 * SmuserinfocontrollerApi - fetch parameter creator
 */
exports.SmuserinfocontrollerApiFetchParamCreator = {
    /**
     *
     * @summary 修改密码
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     */
    smUserInfoChangePasswordPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "oldPassword" is set
        if (params.oldPassword == null) {
            throw new Error('Missing required parameter oldPassword when calling smUserInfoChangePasswordPut');
        }
        // verify required parameter "newPassword" is set
        if (params.newPassword == null) {
            throw new Error('Missing required parameter newPassword when calling smUserInfoChangePasswordPut');
        }
        let baseUrl = '/smUserInfo/changePassword';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            oldPassword: params.oldPassword,
            newPassword: params.newPassword,
        });
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 更改用户状态
     * @param id id
     */
    smUserInfoChangeUserStateIdPut (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smUserInfoChangeUserStateIdPut');
        }
        let baseUrl = '/smUserInfo/changeUserState/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'PUT' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查询旧密码是否正确
     * @param password 旧密码
     */
    smUserInfoCheckPasswordGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "password" is set
        if (params.password == null) {
            throw new Error('Missing required parameter password when calling smUserInfoCheckPasswordGet');
        }
        let baseUrl = '/smUserInfo/checkPassword';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'password': params.password,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除岗位
     * @param id id
     */
    smUserInfoDelPostIdDelete (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smUserInfoDelPostIdDelete');
        }
        let baseUrl = '/smUserInfo/delPost/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 删除用户
     * @param id id
     */
    smUserInfoDelUserDelete (params, options) {
        if (options === undefined) { options = {}; }
        let baseUrl = '/smUserInfo/delUser';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            id: params.id,
        });
        let fetchOptions = assign({}, { method: 'DELETE' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看用户
     * @param id id
     */
    smUserInfoGetUserIdGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "id" is set
        if (params.id == null) {
            throw new Error('Missing required parameter id when calling smUserInfoGetUserIdGet');
        }
        let baseUrl = '/smUserInfo/getUser/{id}'
            .replace('{' + 'id' + '}', '' + params.id);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 获取用户列表
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userName 用户名
     */
    smUserInfoQueryUserListGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "pageNum" is set
        if (params.pageNum == null) {
            throw new Error('Missing required parameter pageNum when calling smUserInfoQueryUserListGet');
        }
        // verify required parameter "pageSize" is set
        if (params.pageSize == null) {
            throw new Error('Missing required parameter pageSize when calling smUserInfoQueryUserListGet');
        }
        let baseUrl = '/smUserInfo/queryUserList';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'userName': params.userName,
            pageNum: params.pageNum,
            'pageSize': params.pageSize,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 新增或修改用户
     * @param userAndPostInfo userAndPostInfo
     */
    smUserInfoSaveOrEditUserInfoPost (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "userAndPostInfo" is set
        if (params.userAndPostInfo == null) {
            throw new Error('Missing required parameter userAndPostInfo when calling smUserInfoSaveOrEditUserInfoPost');
        }
        let baseUrl = '/smUserInfo/saveOrEditUserInfo';
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions = assign({}, { method: 'POST' }, options);
        let contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params.userAndPostInfo) {
            fetchOptions.body = JSON.stringify(params.userAndPostInfo || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary 查看用户名称是否存在
     * @param userName userName
     */
    smUserInfoUserNameIsExitGet (params, options) {
        if (options === undefined) { options = {}; }
        // verify required parameter "userName" is set
        if (params.userName == null) {
            throw new Error('Missing required parameter userName when calling smUserInfoUserNameIsExitGet');
        }
        let baseUrl = '/smUserInfo/userNameIsExit';
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            'userName': params.userName,
        });
        let fetchOptions = assign({}, { method: 'GET' }, options);
        let contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        urlObj.query = filterEmptyParams(urlObj.query); // 过滤空的搜索参数
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SmuserinfocontrollerApi - functional programming interface
 */
exports.SmuserinfocontrollerApiFp = function (configuration) {
    return {
        /**
        *
        * @summary 修改密码
        * @param oldPassword 旧密码
        * @param newPassword 新密码
        */
        smUserInfoChangePasswordPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoChangePasswordPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 更改用户状态
        * @param id id
        */
        smUserInfoChangeUserStateIdPut (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoChangeUserStateIdPut(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查询旧密码是否正确
        * @param password 旧密码
        */
        smUserInfoCheckPasswordGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoCheckPasswordGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除岗位
        * @param id id
        */
        smUserInfoDelPostIdDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoDelPostIdDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 删除用户
        * @param id id
        */
        smUserInfoDelUserDelete (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoDelUserDelete(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看用户
        * @param id id
        */
        smUserInfoGetUserIdGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoGetUserIdGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 获取用户列表
        * @param pageNum pageNum
        * @param pageSize pageSize
        * @param userName 用户名
        */
        smUserInfoQueryUserListGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoQueryUserListGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 新增或修改用户
        * @param userAndPostInfo userAndPostInfo
        */
        smUserInfoSaveOrEditUserInfoPost (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoSaveOrEditUserInfoPost(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
        /**
        *
        * @summary 查看用户名称是否存在
        * @param userName userName
        */
        smUserInfoUserNameIsExitGet (params, options) {
            if (options === undefined) { options = {}; }
            let fetchArgs = exports.SmuserinfocontrollerApiFetchParamCreator.smUserInfoUserNameIsExitGet(params, options);
            let fetch = configuration ? (configuration.fetch || isomorphicFetch) : isomorphicFetch;
            let basePath = configuration ? (configuration.basePath || BASE_PATH) : BASE_PATH;
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        },
    };
};

export default exports;